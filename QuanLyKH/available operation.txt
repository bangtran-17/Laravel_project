

Content-Type:
Available operations
Cloud SQL Admin API v1
⊞ Delete BackupRunsDeletes the backup taken by a backup run.
⊞ Get BackupRunsRetrieves a resource containing information about a backup run.
⊞ Insert BackupRunsCreates a new backup run on demand.
⊞ List BackupRunsLists all backup runs associated with the project or a given instance and configuration in the reverse chronological order of the backup initiation time.
⊞ GenerateEphemeral ConnectGenerates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.
⊞ Get ConnectRetrieves connect settings about a Cloud SQL instance.
⊞ Delete DatabasesDeletes a database from a Cloud SQL instance.
⊞ Get DatabasesRetrieves a resource containing information about a database inside a Cloud SQL instance.
⊞ Insert DatabasesInserts a resource containing information about a database inside a Cloud SQL instance. **Note:** You can't modify the default character set and collation.
⊞ List DatabasesLists databases in the specified Cloud SQL instance.
⊞ Patch DatabasesPartially updates a resource containing information about a database inside a Cloud SQL instance. This method supports patch semantics.
⊞ Update DatabasesUpdates a resource containing information about a database inside a Cloud SQL instance.
⊞ List FlagsLists all available database flags for Cloud SQL instances.
⊞ AddServerCa InstancesAdds a new trusted Certificate Authority (CA) version for the specified instance. Required to prepare for a certificate rotation. If a CA version was previously added but never used in a certificate rotation, this operation replaces that version. There cannot be more than one CA version waiting to be rotated in.
⊞ Clone InstancesCreates a Cloud SQL instance as a clone of the source instance. Using this operation might cause your instance to restart.
⊞ Delete InstancesDeletes a Cloud SQL instance.
⊞ Demote InstancesDemotes an existing standalone instance to be a Cloud SQL read replica for an external database server.
⊞ DemoteMaster InstancesDemotes the stand-alone instance to be a Cloud SQL read replica for an external database server.
⊞ Export InstancesExports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.
⊞ Failover InstancesInitiates a manual failover of a high availability (HA) primary instance to a standby instance, which becomes the primary instance. Users are then rerouted to the new primary. For more information, see the [Overview of high availability](https://cloud.google.com/sql/docs/mysql/high-availability) page in the Cloud SQL documentation. If using Legacy HA (MySQL only), this causes the instance to failover to its failover replica instance.
⊞ Get InstancesRetrieves a resource containing information about a Cloud SQL instance.
⊞ Import InstancesImports data into a Cloud SQL instance from a SQL dump or CSV file in Cloud Storage.
⊞ Insert InstancesCreates a new Cloud SQL instance.
⊞ List InstancesLists instances under a given project.
⊞ ListServerCas InstancesLists all of the trusted Certificate Authorities (CAs) for the specified instance. There can be up to three CAs listed: the CA that was used to sign the certificate that is currently in use, a CA that has been added but not yet used to sign a certificate, and a CA used to sign a certificate that has previously rotated out.
⊞ Patch InstancesPartially updates settings of a Cloud SQL instance by merging the request with the current configuration. This method supports patch semantics.
⊞ PromoteReplica InstancesPromotes the read replica instance to be a stand-alone Cloud SQL instance. Using this operation might cause your instance to restart.
⊞ Reencrypt InstancesReencrypt CMEK instance with latest key version.
⊞ ResetSslConfig InstancesDeletes all client certificates and generates a new server SSL certificate for the instance.
⊞ Restart InstancesRestarts a Cloud SQL instance.
⊞ RestoreBackup InstancesRestores a backup of a Cloud SQL instance. Using this operation might cause your instance to restart.
⊞ RotateServerCa InstancesRotates the server certificate to one signed by the Certificate Authority (CA) version previously added with the addServerCA method.
⊞ StartReplica InstancesStarts the replication in the read replica instance.
⊞ StopReplica InstancesStops the replication in the read replica instance.
⊞ Switchover InstancesSwitches over from the primary instance to the replica instance.
⊞ TruncateLog InstancesTruncate MySQL general and slow query log tables MySQL only.
⊞ Update InstancesUpdates settings of a Cloud SQL instance. Using this operation might cause your instance to restart.
⊞ Cancel OperationsCancels an instance operation that has been performed on an instance.
⊞ Get OperationsRetrieves an instance operation that has been performed on an instance.
⊞ List OperationsLists all instance operations that have been performed on the given Cloud SQL instance in the reverse chronological order of the start time.
⊞ Instances ProjectsGet Disk Shrink Config for a given instance.
⊞ Instances ProjectsGet Latest Recovery Time for a given instance.
⊞ Instances ProjectsPerform Disk Shrink on primary instance.
⊞ Instances ProjectsReschedules the maintenance on the given instance.
⊞ Instances ProjectsReset Replica Size to primary instance disk size.
⊞ Instances ProjectsStart External primary instance migration.
⊞ Instances ProjectsVerify External primary instance external sync settings.
⊞ CreateEphemeral SslCertsGenerates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.
⊞ Delete SslCertsDeletes the SSL certificate. For First Generation instances, the certificate remains valid until the instance is restarted.
⊞ Get SslCertsRetrieves a particular SSL certificate. Does not include the private key (required for usage). The private key must be saved from the response to initial creation.
⊞ Insert SslCertsCreates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.
⊞ List SslCertsLists all of the current SSL certificates for the instance.
⊞ List TiersLists all available machine types (tiers) for Cloud SQL, for example, `db-custom-1-3840`. For more information, see https://cloud.google.com/sql/pricing.
⊞ Delete UsersDeletes a user from a Cloud SQL instance.
⊞ Get UsersRetrieves a resource containing information about a user.
⊞ Insert UsersCreates a new user in a Cloud SQL instance.
⊞ List UsersLists users in the specified Cloud SQL instance.
⊞ Update UsersUpdates an existing user in a Cloud SQL instance.
Admin SDK API directory_v1
⊞ List UsersRetrieves a paginated list of either deleted users or all users in a domain.
⊞ Watch UsersWatches for changes in users list.
Cloud Testing API v1
⊞ GetApkDetails ApplicationDetailServiceGets the details of an Android application APK.
⊞ DeviceSessions ProjectsPOST /v1/projects/{project_id}/deviceSessions/{device_session_id}:cancel Changes the DeviceSession to state FINISHED and terminates all connections. Canceled sessions are not deleted and can be retrieved or listed by the user until they expire based on the 28 day deletion policy.
⊞ DeviceSessions ProjectsPOST /v1/projects/{project_id}/deviceSessions
⊞ DeviceSessions ProjectsGET /v1/projects/{project_id}/deviceSessions/{device_session_id} Return a DeviceSession, which documents the allocation status and whether the device is allocated. Clients making requests from this API must poll GetDeviceSession.
⊞ DeviceSessions ProjectsGET /v1/projects/{project_id}/deviceSessions Lists device Sessions owned by the project user.
⊞ DeviceSessions ProjectsPATCH /v1/projects/{projectId}/deviceSessions/deviceSessionId}:updateDeviceSession Updates the current device session to the fields described by the update_mask.
⊞ TestMatrices ProjectsCancels unfinished test executions in a test matrix. This call returns immediately and cancellation proceeds asynchronously. If the matrix is already final, this operation will have no effect. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist
⊞ TestMatrices ProjectsCreates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. The returned matrix will not yet contain the executions that will be created for this matrix. Execution creation happens later on and will require a call to GetTestMatrix. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices.
⊞ TestMatrices ProjectsChecks the status of a test matrix and the executions once they are created. The test matrix will contain the list of test executions to run if and only if the resultStorage.toolResultsExecution fields have been populated. Note: Flaky test executions may be added to the matrix at a later stage. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist
⊞ Get TestEnvironmentCatalogGets the catalog of supported test environments. May return any of the following canonical error codes: - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the environment type does not exist - INTERNAL - if an internal error occurred
Recommendations AI (Beta) v1beta1
⊞ Locations ProjectsCreates a catalog item.
⊞ Locations ProjectsDeletes a catalog item.
⊞ Locations ProjectsGets a specific catalog item.
⊞ Locations ProjectsBulk import of multiple catalog items. Request processing may be synchronous. No partial updating supported. Non-existing items will be created. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully updated.
⊞ Locations ProjectsGets a list of catalog items.
⊞ Locations ProjectsUpdates a catalog item. Partial updating is supported. Non-existing items will be created.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsMakes a recommendation prediction. If using API Key based authentication, the API Key must be registered using the PredictionApiKeyRegistry service. [Learn more](https://cloud.google.com/recommendations-ai/docs/setting-up#register-key).
⊞ Locations ProjectsRegister an API key for use with predict method.
⊞ Locations ProjectsUnregister an apiKey from using for predict method.
⊞ Locations ProjectsList the registered apiKeys for use with predict method.
⊞ Locations ProjectsWrites a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Recommendations AI JavaScript pixel. Users should not call this method directly.
⊞ Locations ProjectsBulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.
⊞ Locations ProjectsGets a list of user events within a time range, with potential filtering. The method does not list unjoined user events. Unjoined user event definition: when a user event is ingested from Recommendations AI User Event APIs, the catalog item included in the user event is connected with the current catalog. If a catalog item of the ingested event is not in the current catalog, it could lead to degraded model quality. This is called an unjoined event.
⊞ Locations ProjectsDeletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first.
⊞ Locations ProjectsTriggers a user event rejoin operation with latest catalog data. Events will not be annotated with detailed catalog information if catalog item is missing at the time the user event is ingested, and these events are stored as unjoined events with a limited usage on training and serving. This API can be used to trigger a 'join' operation on specified events with latest version of catalog items. It can also be used to correct events joined with wrong catalog items.
⊞ Locations ProjectsWrites a single user event.
⊞ Locations ProjectsLists all the catalog configurations associated with the project.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates the catalog configuration.
Backup and DR Service API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a new ManagementServer in a given project and location.
⊞ Locations ProjectsDeletes a single ManagementServer.
⊞ Locations ProjectsGets details of a single ManagementServer.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists ManagementServers in a given project and location.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Cloud Deploy API v1
⊞ Locations ProjectsCancels an AutomationRun. The `state` of the `AutomationRun` after cancelling is `CANCELLED`. `CancelAutomationRun` can be called on AutomationRun in the state `IN_PROGRESS` and `PENDING`; AutomationRun in a different state returns an `FAILED_PRECONDITION` error.
⊞ Locations ProjectsGets details of a single AutomationRun.
⊞ Locations ProjectsLists AutomationRuns in a given project and location.
⊞ Locations ProjectsCreates a new Automation in a given project and location.
⊞ Locations ProjectsDeletes a single Automation resource.
⊞ Locations ProjectsGets details of a single Automation.
⊞ Locations ProjectsLists Automations in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Automation resource.
⊞ Locations ProjectsCreates a new DeliveryPipeline in a given project and location.
⊞ Locations ProjectsDeletes a single DeliveryPipeline.
⊞ Locations ProjectsGets details of a single DeliveryPipeline.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists DeliveryPipelines in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single DeliveryPipeline.
⊞ Locations ProjectsAbandons a Release in the Delivery Pipeline.
⊞ Locations ProjectsCreates a new Release in a given project and location.
⊞ Locations ProjectsGets details of a single Release.
⊞ Locations ProjectsLists Releases in a given project and location.
⊞ Locations ProjectsAdvances a Rollout in a given project and location.
⊞ Locations ProjectsApproves a Rollout.
⊞ Locations ProjectsCancels a Rollout in a given project and location.
⊞ Locations ProjectsCreates a new Rollout in a given project and location.
⊞ Locations ProjectsGets details of a single Rollout.
⊞ Locations ProjectsIgnores the specified Job in a Rollout.
⊞ Locations ProjectsGets details of a single JobRun.
⊞ Locations ProjectsLists JobRuns in a given project and location.
⊞ Locations ProjectsTerminates a Job Run in a given project and location.
⊞ Locations ProjectsLists Rollouts in a given project and location.
⊞ Locations ProjectsRetries the specified Job in a Rollout.
⊞ Locations ProjectsCreates a `Rollout` to roll back the specified target.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsGets the configuration for a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new Target in a given project and location.
⊞ Locations ProjectsDeletes a single Target.
⊞ Locations ProjectsGets details of a single Target.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Targets in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Target.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
Cloud Shell API v1
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Environments UsersAdds a public SSH key to an environment, allowing clients with the corresponding private key to connect to that environment via SSH. If a key with the same content already exists, this will error with ALREADY_EXISTS.
⊞ Environments UsersSends OAuth credentials to a running environment on behalf of a user. When this completes, the environment will be authorized to run various Google Cloud command line tools without requiring the user to manually authenticate.
⊞ Environments UsersGets an environment. Returns NOT_FOUND if the environment does not exist.
⊞ Environments UsersRemoves a public SSH key from an environment. Clients will no longer be able to connect to the environment using the corresponding private key. If a key with the same content is not present, this will error with NOT_FOUND.
⊞ Environments UsersStarts an existing environment, allowing clients to connect to it. The returned operation will contain an instance of StartEnvironmentMetadata in its metadata field. Users can wait for the environment to start by polling this operation via GetOperation. Once the environment has finished starting and is ready to accept connections, the operation will contain a StartEnvironmentResponse in its response field.
Cloud Life Sciences API v2beta
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.cancel`
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.get`
⊞ Locations ProjectsLists operations that match the specified filter in the request. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.list`
⊞ Locations ProjectsRuns a pipeline. The returned Operation's metadata field will contain a google.cloud.lifesciences.v2beta.Metadata object describing the status of the pipeline execution. The response field will contain a google.cloud.lifesciences.v2beta.RunPipelineResponse object if the pipeline completes successfully. **Note:** Before you can use this method, the *Life Sciences Service Agent* must have access to your project. This is done automatically when the Cloud Life Sciences API is first enabled, but if you delete this permission you must disable and re-enable the API to grant the Life Sciences Service Agent the required permissions. Authorization requires the following [Google IAM](https://cloud.google.com/iam/) permission: * `lifesciences.workflows.run`
Cloud Pub/Sub API v1
⊞ Schemas ProjectsCommits a new schema revision to an existing schema.
⊞ Schemas ProjectsCreates a schema.
⊞ Schemas ProjectsDeletes a schema.
⊞ Schemas ProjectsDeletes a specific schema revision.
⊞ Schemas ProjectsGets a schema.
⊞ Schemas ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Schemas ProjectsLists schemas in a project.
⊞ Schemas ProjectsLists all schema revisions for the named schema.
⊞ Schemas ProjectsCreates a new schema revision that is a copy of the provided revision_id.
⊞ Schemas ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Schemas ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Schemas ProjectsValidates a schema.
⊞ Schemas ProjectsValidates a message against a schema.
⊞ Snapshots ProjectsCreates a snapshot from the requested subscription. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. If the snapshot already exists, returns `ALREADY_EXISTS`. If the requested subscription doesn't exist, returns `NOT_FOUND`. If the backlog in the subscription is too old -- and the resulting snapshot would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned. See also the `Snapshot.expire_time` field. If the name is not provided in the request, the server will assign a random name for this snapshot on the same project as the subscription, conforming to the [resource name format] (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The generated name is populated in the returned Snapshot object. Note that for REST API requests, you must specify a name in the request.
⊞ Snapshots ProjectsRemoves an existing snapshot. Snapshots are used in [Seek] (https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. When the snapshot is deleted, all messages retained in the snapshot are immediately dropped. After a snapshot is deleted, a new one may be created with the same name, but the new one has no association with the old snapshot or its subscription, unless the same subscription is specified.
⊞ Snapshots ProjectsGets the configuration details of a snapshot. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
⊞ Snapshots ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Snapshots ProjectsLists the existing snapshots. Snapshots are used in [Seek]( https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
⊞ Snapshots ProjectsUpdates an existing snapshot. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
⊞ Snapshots ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Snapshots ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Subscriptions ProjectsAcknowledges the messages associated with the `ack_ids` in the `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages from the subscription. Acknowledging a message whose ack deadline has expired may succeed, but such a message may be redelivered later. Acknowledging a message more than once will not result in an error.
⊞ Subscriptions ProjectsCreates a subscription to a given topic. See the [resource name rules] (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). If the subscription already exists, returns `ALREADY_EXISTS`. If the corresponding topic doesn't exist, returns `NOT_FOUND`. If the name is not provided in the request, the server will assign a random name for this subscription on the same project as the topic, conforming to the [resource name format] (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The generated name is populated in the returned Subscription object. Note that for REST API requests, you must specify a name in the request.
⊞ Subscriptions ProjectsDeletes an existing subscription. All messages retained in the subscription are immediately dropped. Calls to `Pull` after deletion will return `NOT_FOUND`. After a subscription is deleted, a new one may be created with the same name, but the new one has no association with the old subscription or its topic unless the same topic is specified.
⊞ Subscriptions ProjectsDetaches a subscription from this topic. All messages retained in the subscription are dropped. Subsequent `Pull` and `StreamingPull` requests will return FAILED_PRECONDITION. If the subscription is a push subscription, pushes to the endpoint will stop.
⊞ Subscriptions ProjectsGets the configuration details of a subscription.
⊞ Subscriptions ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Subscriptions ProjectsLists matching subscriptions.
⊞ Subscriptions ProjectsModifies the ack deadline for a specific message. This method is useful to indicate that more time is needed to process a message by the subscriber, or to make the message available for redelivery if the processing was interrupted. Note that this does not modify the subscription-level `ackDeadlineSeconds` used for subsequent messages.
⊞ Subscriptions ProjectsModifies the `PushConfig` for a specified subscription. This may be used to change a push subscription to a pull one (signified by an empty `PushConfig`) or vice versa, or change the endpoint URL and other attributes of a push subscription. Messages will accumulate for delivery continuously through the call regardless of changes to the `PushConfig`.
⊞ Subscriptions ProjectsUpdates an existing subscription. Note that certain properties of a subscription, such as its topic, are not modifiable.
⊞ Subscriptions ProjectsPulls messages from the server.
⊞ Subscriptions ProjectsSeeks an existing subscription to a point in time or to a given snapshot, whichever is provided in the request. Snapshots are used in [Seek] (https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. Note that both the subscription and the snapshot must be on the same topic.
⊞ Subscriptions ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Subscriptions ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Topics ProjectsCreates the given topic with the given name. See the [resource name rules] (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names).
⊞ Topics ProjectsDeletes the topic with the given name. Returns `NOT_FOUND` if the topic does not exist. After a topic is deleted, a new topic may be created with the same name; this is an entirely new topic with none of the old configuration or subscriptions. Existing subscriptions to this topic are not deleted, but their `topic` field is set to `_deleted-topic_`.
⊞ Topics ProjectsGets the configuration of a topic.
⊞ Topics ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Topics ProjectsLists matching topics.
⊞ Topics ProjectsUpdates an existing topic. Note that certain properties of a topic are not modifiable.
⊞ Topics ProjectsAdds one or more messages to the topic. Returns `NOT_FOUND` if the topic does not exist.
⊞ Topics ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Topics ProjectsLists the names of the snapshots on this topic. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
⊞ Topics ProjectsLists the names of the attached subscriptions on this topic.
⊞ Topics ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
Firebase Realtime Database API v1beta
⊞ Locations ProjectsRequests that a new DatabaseInstance be created. The state of a successfully created DatabaseInstance is ACTIVE. Only available for projects on the Blaze plan. Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Note that it might take a few minutes for billing enablement state to propagate to Firebase systems.
⊞ Locations ProjectsMarks a DatabaseInstance to be deleted. The DatabaseInstance will be set to the DELETED state for 20 days, and will be purged within 30 days. The default database cannot be deleted. IDs for deleted database instances may never be recovered or re-used. The Database may only be deleted if it is already in a DISABLED state.
⊞ Locations ProjectsDisables a DatabaseInstance. The database can be re-enabled later using ReenableDatabaseInstance. When a database is disabled, all reads and writes are denied, including view access in the Firebase console.
⊞ Locations ProjectsGets the DatabaseInstance identified by the specified resource name.
⊞ Locations ProjectsLists each DatabaseInstance associated with the specified parent project. The list items are returned in no particular order, but will be a consistent view of the database instances when additional requests are made with a `pageToken`. The resulting list contains instances in any STATE. The list results may be stale by a few seconds. Use GetDatabaseInstance for consistent reads.
⊞ Locations ProjectsEnables a DatabaseInstance. The database must have been disabled previously using DisableDatabaseInstance. The state of a successfully reenabled DatabaseInstance is ACTIVE.
⊞ Locations ProjectsRestores a DatabaseInstance that was previously marked to be deleted. After the delete method is used, DatabaseInstances are set to the DELETED state for 20 days, and will be purged within 30 days. Databases in the DELETED state can be undeleted without losing any data. This method may only be used on a DatabaseInstance in the DELETED state. Purged DatabaseInstances may not be recovered.
Resource Settings API v1
⊞ Settings FoldersReturns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist.
⊞ Settings FoldersLists all the settings that are available on the Cloud resource `parent`.
⊞ Settings FoldersUpdates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.
⊞ Settings OrganizationsReturns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist.
⊞ Settings OrganizationsLists all the settings that are available on the Cloud resource `parent`.
⊞ Settings OrganizationsUpdates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.
⊞ Settings ProjectsReturns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist.
⊞ Settings ProjectsLists all the settings that are available on the Cloud resource `parent`.
⊞ Settings ProjectsUpdates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.
Identity Toolkit API v3
⊞ CreateAuthUri RelyingpartyCreates the URI used by the IdP to authenticate the user.
⊞ DeleteAccount RelyingpartyDelete user account.
⊞ DownloadAccount RelyingpartyBatch download user accounts.
⊞ EmailLinkSignin RelyingpartyReset password for a user.
⊞ GetAccountInfo RelyingpartyReturns the account info.
⊞ GetOobConfirmationCode RelyingpartyGet a code for user action confirmation.
⊞ GetProjectConfig RelyingpartyGet project configuration.
⊞ GetPublicKeys RelyingpartyGet token signing public key.
⊞ GetRecaptchaParam RelyingpartyGet recaptcha secure param.
⊞ ResetPassword RelyingpartyReset password for a user.
⊞ SendVerificationCode RelyingpartySend SMS verification code.
⊞ SetAccountInfo RelyingpartySet account info for a user.
⊞ SetProjectConfig RelyingpartySet project configuration.
⊞ SignOutUser RelyingpartySign out user.
⊞ SignupNewUser RelyingpartySignup new user.
⊞ UploadAccount RelyingpartyBatch upload existing user accounts.
⊞ VerifyAssertion RelyingpartyVerifies the assertion returned by the IdP.
⊞ VerifyCustomToken RelyingpartyVerifies the developer asserted ID token.
⊞ VerifyPassword RelyingpartyVerifies the user entered password.
⊞ VerifyPhoneNumber RelyingpartyVerifies ownership of a phone number and creates/updates the user account accordingly.
Smart Device Management API v1
⊞ Devices EnterprisesExecutes a command to device managed by the enterprise.
⊞ Devices EnterprisesGets a device managed by the enterprise.
⊞ Devices EnterprisesLists devices managed by the enterprise.
⊞ Structures EnterprisesGets a structure managed by the enterprise.
⊞ Structures EnterprisesLists structures managed by the enterprise.
⊞ Structures EnterprisesGets a room managed by the enterprise.
⊞ Structures EnterprisesLists rooms managed by the enterprise.
Apigee API v1
⊞ Issuers HybridLists hybrid services and its trusted issuers service account ids. This api is authenticated and unauthorized(allow all the users) and used by runtime authn-authz service to query control plane's issuer service account ids.
⊞ Analytics OrganizationsCreate a Datastore for an org
⊞ Analytics OrganizationsDelete a Datastore from an org.
⊞ Analytics OrganizationsGet a Datastore
⊞ Analytics OrganizationsList Datastores
⊞ Analytics OrganizationsTest if Datastore configuration is correct. This includes checking if credentials provided by customer have required permissions in target destination storage
⊞ Analytics OrganizationsUpdate a Datastore
⊞ Apiproducts OrganizationsUpdates or creates API product attributes. This API **replaces** the current list of attributes with the attributes specified in the request body. In this way, you can update existing attributes, add new attributes, or delete existing attributes by omitting them from the request body. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
⊞ Apiproducts OrganizationsDeletes an API product attribute.
⊞ Apiproducts OrganizationsGets the value of an API product attribute.
⊞ Apiproducts OrganizationsLists all API product attributes.
⊞ Apiproducts OrganizationsUpdates the value of an API product attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
⊞ Apiproducts OrganizationsCreates an API product in an organization. You create API products after you have proxied backend services using API proxies. An API product is a collection of API resources combined with quota settings and metadata that you can use to deliver customized and productized API bundles to your developer community. This metadata can include: - Scope - Environments - API proxies - Extensible profile API products enable you repackage APIs on the fly, without having to do any additional coding or configuration. Apigee recommends that you start with a simple API product including only required elements. You then provision credentials to apps to enable them to start testing your APIs. After you have authentication and authorization working against a simple API product, you can iterate to create finer-grained API products, defining different sets of API resources for each API product. **WARNING:** - If you don't specify an API proxy in the request body, *any* app associated with the product can make calls to *any* API in your entire organization. - If you don't specify an environment in the request body, the product allows access to all environments. For more information, see What is an API product?
⊞ Apiproducts OrganizationsDeletes an API product from an organization. Deleting an API product causes app requests to the resource URIs defined in the API product to fail. Ensure that you create a new API product to serve existing apps, unless your intention is to disable access to the resources defined in the API product. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.
⊞ Apiproducts OrganizationsGets configuration details for an API product. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.
⊞ Apiproducts OrganizationsLists all API product names for an organization. Filter the list by passing an `attributename` and `attibutevalue`. The maximum number of API products returned is 1000. You can paginate the list of API products returned using the `startKey` and `count` query parameters.
⊞ Apiproducts OrganizationsCreate a rate plan that is associated with an API product in an organization. Using rate plans, API product owners can monetize their API products by configuring one or more of the following: - Billing frequency - Initial setup fees for using an API product - Payment funding model (postpaid only) - Fixed recurring or consumption-based charges for using an API product - Revenue sharing with developer partners An API product can have multiple rate plans associated with it but *only one* rate plan can be active at any point of time. **Note: From the developer's perspective, they purchase API products not rate plans.
⊞ Apiproducts OrganizationsDeletes a rate plan.
⊞ Apiproducts OrganizationsGets the details of a rate plan.
⊞ Apiproducts OrganizationsLists all the rate plans for an API product.
⊞ Apiproducts OrganizationsUpdates an existing rate plan.
⊞ Apiproducts OrganizationsUpdates an existing API product. You must include all required values, whether or not you are updating them, as well as any optional values that you are updating. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via UI or API. View the list of API products to identify their internal names.
⊞ Apis OrganizationsCreates an API proxy. The API proxy created will not be accessible at runtime until it is deployed to an environment. Create a new API proxy by setting the `name` query parameter to the name of the API proxy. Import an API proxy configuration bundle stored in zip format on your local machine to your organization by doing the following: * Set the `name` query parameter to the name of the API proxy. * Set the `action` query parameter to `import`. * Set the `Content-Type` header to `multipart/form-data`. * Pass as a file the name of API proxy configuration bundle stored in zip format on your local machine using the `file` form field. **Note**: To validate the API proxy configuration bundle only without importing it, set the `action` query parameter to `validate`. When importing an API proxy configuration bundle, if the API proxy does not exist, it will be created. If the API proxy exists, then a new revision is created. Invalid API proxy configurations are rejected, and a list of validation errors is returned to the client.
⊞ Apis OrganizationsDeletes an API proxy and all associated endpoints, policies, resources, and revisions. The API proxy must be undeployed before you can delete it.
⊞ Apis OrganizationsLists all deployments of an API proxy.
⊞ Apis OrganizationsGets an API proxy including a list of existing revisions.
⊞ Apis OrganizationsCreates a key value map in an API proxy.
⊞ Apis OrganizationsDeletes a key value map from an API proxy.
⊞ Apis OrganizationsCreates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
⊞ Apis OrganizationsDeletes a key value entry from a key value map scoped to an organization, environment, or API proxy. **Notes:** * After you delete the key value entry, the policy consuming the entry will continue to function with its cached values for a few minutes. This is expected behavior. * Supported for Apigee hybrid 1.8.x and higher.
⊞ Apis OrganizationsGet the key value entry value for a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
⊞ Apis OrganizationsLists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
⊞ Apis OrganizationsLists the names of all API proxies in an organization. The names returned correspond to the names defined in the configuration files for each API proxy.
⊞ Apis OrganizationsUpdates an existing API proxy.
⊞ Apis OrganizationsDeletes an API proxy revision and all policies, resources, endpoints, and revisions associated with it. The API proxy revision must be undeployed before you can delete it.
⊞ Apis OrganizationsLists all deployments of an API proxy revision.
⊞ Apis OrganizationsGets an API proxy revision. To download the API proxy configuration bundle for the specified revision as a zip file, set the `format` query parameter to `bundle`. If you are using curl, specify `-o filename.zip` to save the output to a file; otherwise, it displays to `stdout`. Then, develop the API proxy configuration locally and upload the updated API proxy configuration revision, as described in [updateApiProxyRevision](updateApiProxyRevision).
⊞ Apis OrganizationsUpdates an existing API proxy revision by uploading the API proxy configuration bundle as a zip file from your local machine. You can update only API proxy revisions that have never been deployed. After deployment, an API proxy revision becomes immutable, even if it is undeployed. Set the `Content-Type` header to either `multipart/form-data` or `application/octet-stream`.
⊞ Appgroups OrganizationsCreates an app and associates it with an AppGroup. This API associates the AppGroup app with the specified API product and auto-generates an API key for the app to use in calls to API proxies inside that API product. The `name` is the unique ID of the app that you can use in API calls.
⊞ Appgroups OrganizationsDeletes an AppGroup app. **Note**: The delete operation is asynchronous. The AppGroup app is deleted immediately, but its associated resources, such as app keys or access tokens, may take anywhere from a few seconds to a few minutes to be deleted.
⊞ Appgroups OrganizationsReturns the details for an AppGroup app.
⊞ Appgroups OrganizationsRemoves an API product from an app's consumer key. After the API product is removed, the app cannot access the API resources defined in that API product. **Note**: The consumer key is not removed, only its association with the API product.
⊞ Appgroups OrganizationsApproves or revokes the consumer key for an API product. After a consumer key is approved, the app can use it to access APIs. A consumer key that is revoked or pending cannot be used to access an API. Any access tokens associated with a revoked consumer key will remain active. However, Apigee checks the status of the consumer key and if set to `revoked` will not allow access to the API.
⊞ Appgroups OrganizationsCreates a custom consumer key and secret for a AppGroup app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the ProductizeAppGroupAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteAppGroupAppKey API.
⊞ Appgroups OrganizationsDeletes an app's consumer key and removes all API products associated with the app. After the consumer key is deleted, it cannot be used to access any APIs.
⊞ Appgroups OrganizationsGets details for a consumer key for a AppGroup app, including the key and secret value, associated API products, and other information.
⊞ Appgroups OrganizationsAdds an API product to an AppGroupAppKey, enabling the app that holds the key to access the API resources bundled in the API product. In addition, you can add attributes to the AppGroupAppKey. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively. You can use the same key to access all API products associated with the app.
⊞ Appgroups OrganizationsLists all apps created by an AppGroup in an Apigee organization. Optionally, you can request an expanded view of the AppGroup apps. Lists all AppGroupApps in an AppGroup. A maximum of 1000 AppGroup apps are returned in the response if PageSize is not specified, or if the PageSize is greater than 1000.
⊞ Appgroups OrganizationsUpdates the details for an AppGroup app. In addition, you can add an API product to an AppGroup app and automatically generate an API key for the app to use when calling APIs in the API product. If you want to use an existing API key for the API product, add the API product to the API key using the UpdateAppGroupAppKey API. Using this API, you cannot update the app name, as it is the primary key used to identify the app and cannot be changed. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively.
⊞ Appgroups OrganizationsCreates an AppGroup. Once created, user can register apps under the AppGroup to obtain secret key and password. At creation time, the AppGroup's state is set as `active`.
⊞ Appgroups OrganizationsDeletes an AppGroup. All app and API keys associations with the AppGroup are also removed. **Warning**: This API will permanently delete the AppGroup and related artifacts. **Note**: The delete operation is asynchronous. The AppGroup app is deleted immediately, but its associated resources, such as apps and API keys, may take anywhere from a few seconds to a few minutes to be deleted.
⊞ Appgroups OrganizationsReturns the AppGroup details for the provided AppGroup name in the request URI.
⊞ Appgroups OrganizationsLists all AppGroups in an organization. A maximum of 1000 AppGroups are returned in the response if PageSize is not specified, or if the PageSize is greater than 1000.
⊞ Appgroups OrganizationsUpdates an AppGroup. This API replaces the existing AppGroup details with those specified in the request. Include or exclude any existing details that you want to retain or delete, respectively. Note that the state of the AppGroup should be updated using `action`, and not via AppGroup.
⊞ Apps OrganizationsGets the app profile for the specified app ID.
⊞ Apps OrganizationsLists IDs of apps within an organization that have the specified app status (approved or revoked) or are of the specified app type (developer or company).
⊞ Create OrganizationsCreates an Apigee organization. See [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).
⊞ Datacollectors OrganizationsCreates a new data collector.
⊞ Datacollectors OrganizationsDeletes a data collector.
⊞ Datacollectors OrganizationsGets a data collector.
⊞ Datacollectors OrganizationsLists all data collectors.
⊞ Datacollectors OrganizationsUpdates a data collector.
⊞ Delete OrganizationsDelete an Apigee organization. For organizations with BillingType EVALUATION, an immediate deletion is performed. For paid organizations, a soft-deletion is performed. The organization can be restored within the soft-deletion period which can be controlled using the retention field in the request.
⊞ Deployments OrganizationsLists all deployments of API proxies or shared flows.
⊞ Developers OrganizationsUpdates attributes for a developer app. This API replaces the current attributes with those specified in the request.
⊞ Developers OrganizationsDeletes a developer app attribute.
⊞ Developers OrganizationsReturns a developer app attribute.
⊞ Developers OrganizationsReturns a list of all developer app attributes.
⊞ Developers OrganizationsUpdates a developer app attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
⊞ Developers OrganizationsCreates an app associated with a developer. This API associates the developer app with the specified API product and auto-generates an API key for the app to use in calls to API proxies inside that API product. The `name` is the unique ID of the app that you can use in API calls. The `DisplayName` (set as an attribute) appears in the UI. If you don't set the `DisplayName` attribute, the `name` appears in the UI.
⊞ Developers OrganizationsDeletes a developer app. **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as app keys or access tokens, may take anywhere from a few seconds to a few minutes to be deleted.
⊞ Developers OrganizationsManages access to a developer app by enabling you to: * Approve or revoke a developer app * Generate a new consumer key and secret for a developer app To approve or revoke a developer app, set the `action` query parameter to `approve` or `revoke`, respectively, and the `Content-Type` header to `application/octet-stream`. If a developer app is revoked, none of its API keys are valid for API calls even though the keys are still approved. If successful, the API call returns the following HTTP status code: `204 No Content` To generate a new consumer key and secret for a developer app, pass the new key/secret details. Rather than replace an existing key, this API generates a new key. In this case, multiple key pairs may be associated with a single developer app. Each key pair has an independent status (`approve` or `revoke`) and expiration time. Any approved, non-expired key can be used in an API call. For example, if you're using API key rotation, you can generate new keys with expiration times that overlap keys that are going to expire. You might also generate a new consumer key/secret if the security of the original key/secret is compromised. The `keyExpiresIn` property defines the expiration time for the API key in milliseconds. If you don't set this property or set it to `-1`, the API key never expires. **Notes**: * When generating a new key/secret, this API replaces the existing attributes, notes, and callback URLs with those specified in the request. Include or exclude any existing information that you want to retain or delete, respectively. * To migrate existing consumer keys and secrets to hybrid from another system, see the CreateDeveloperAppKey API.
⊞ Developers OrganizationsReturns the details for a developer app.
⊞ Developers OrganizationsRemoves an API product from an app's consumer key. After the API product is removed, the app cannot access the API resources defined in that API product. **Note**: The consumer key is not removed, only its association with the API product.
⊞ Developers OrganizationsApproves or revokes the consumer key for an API product. After a consumer key is approved, the app can use it to access APIs. A consumer key that is revoked or pending cannot be used to access an API. Any access tokens associated with a revoked consumer key will remain active. However, Apigee checks the status of the consumer key and if set to `revoked` will not allow access to the API.
⊞ Developers OrganizationsCreates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API. **Note**: All keys start out with status=approved, even if status=revoked is passed when the key is created. To revoke a key, use the UpdateDeveloperAppKey API.
⊞ Developers OrganizationsCreates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API. **Note**: All keys start out with status=approved, even if status=revoked is passed when the key is created. To revoke a key, use the UpdateDeveloperAppKey API.
⊞ Developers OrganizationsDeletes an app's consumer key and removes all API products associated with the app. After the consumer key is deleted, it cannot be used to access any APIs. **Note**: After you delete a consumer key, you may want to: 1. Create a new consumer key and secret for the developer app using the CreateDeveloperAppKey API, and subsequently add an API product to the key using the UpdateDeveloperAppKey API. 2. Delete the developer app, if it is no longer required.
⊞ Developers OrganizationsGets details for a consumer key for a developer app, including the key and secret value, associated API products, and other information.
⊞ Developers OrganizationsUpdates the scope of an app. This API replaces the existing scopes with those specified in the request. Include or exclude any existing scopes that you want to retain or delete, respectively. The specified scopes must already be defined for the API products associated with the app. This API sets the `scopes` element under the `apiProducts` element in the attributes of the app.
⊞ Developers OrganizationsAdds an API product to a developer app key, enabling the app that holds the key to access the API resources bundled in the API product. In addition, you can add attributes to a developer app key. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively. You can use the same key to access all API products associated with the app.
⊞ Developers OrganizationsLists all apps created by a developer in an Apigee organization. Optionally, you can request an expanded view of the developer apps. A maximum of 100 developer apps are returned per API call. You can paginate the list of deveoper apps returned using the `startKey` and `count` query parameters.
⊞ Developers OrganizationsUpdates the details for a developer app. In addition, you can add an API product to a developer app and automatically generate an API key for the app to use when calling APIs in the API product. If you want to use an existing API key for the API product, add the API product to the API key using the UpdateDeveloperAppKey API. Using this API, you cannot update the following: * App name as it is the primary key used to identify the app and cannot be changed. * Scopes associated with the app. Instead, use the ReplaceDeveloperAppKey API. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively.
⊞ Developers OrganizationsUpdates developer attributes. This API replaces the existing attributes with those specified in the request. Add new attributes, and include or exclude any existing attributes that you want to retain or remove, respectively. The custom attribute limit is 18. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
⊞ Developers OrganizationsDeletes a developer attribute.
⊞ Developers OrganizationsReturns the value of the specified developer attribute.
⊞ Developers OrganizationsReturns a list of all developer attributes.
⊞ Developers OrganizationsUpdates a developer attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
⊞ Developers OrganizationsAdjust the prepaid balance for the developer. This API will be used in scenarios where the developer has been under-charged or over-charged.
⊞ Developers OrganizationsCredits the account balance for the developer.
⊞ Developers OrganizationsCreates a developer. Once created, the developer can register an app and obtain an API key. At creation time, a developer is set as `active`. To change the developer status, use the SetDeveloperStatus API.
⊞ Developers OrganizationsDeletes a developer. All apps and API keys associated with the developer are also removed. **Warning**: This API will permanently delete the developer and related artifacts. To avoid permanently deleting developers and their artifacts, set the developer status to `inactive` using the SetDeveloperStatus API. **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as apps and API keys, may take anywhere from a few seconds to a few minutes to be deleted.
⊞ Developers OrganizationsReturns the developer details, including the developer's name, email address, apps, and other information. **Note**: The response includes only the first 100 developer apps.
⊞ Developers OrganizationsGets the account balance for the developer.
⊞ Developers OrganizationsGets the monetization configuration for the developer.
⊞ Developers OrganizationsLists all developers in an organization by email address. By default, the response does not include company developers. Set the `includeCompany` query parameter to `true` to include company developers. **Note**: A maximum of 1000 developers are returned in the response. You paginate the list of developers returned using the `startKey` and `count` query parameters.
⊞ Developers OrganizationsSets the status of a developer. A developer is `active` by default. If you set a developer's status to `inactive`, the API keys assigned to the developer apps are no longer valid even though the API keys are set to `approved`. Inactive developers can still sign in to the developer portal and create apps; however, any new API keys generated during app creation won't work. To set the status of a developer, set the `action` query parameter to `active` or `inactive`, and the `Content-Type` header to `application/octet-stream`. If successful, the API call returns the following HTTP status code: `204 No Content`
⊞ Developers OrganizationsCreates a subscription to an API product.
⊞ Developers OrganizationsExpires an API product subscription immediately.
⊞ Developers OrganizationsGets details for an API product subscription.
⊞ Developers OrganizationsLists all API product subscriptions for a developer.
⊞ Developers OrganizationsUpdates a developer. This API replaces the existing developer details with those specified in the request. Include or exclude any existing details that you want to retain or delete, respectively. The custom attribute limit is 18. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
⊞ Developers OrganizationsUpdates the monetization configuration for the developer.
⊞ EndpointAttachments OrganizationsCreates an endpoint attachment. **Note:** Not supported for Apigee hybrid.
⊞ EndpointAttachments OrganizationsDeletes an endpoint attachment.
⊞ EndpointAttachments OrganizationsGets the endpoint attachment.
⊞ EndpointAttachments OrganizationsLists the endpoint attachments in an organization.
⊞ Envgroups OrganizationsCreates a new attachment of an environment to an environment group.
⊞ Envgroups OrganizationsDeletes an environment group attachment.
⊞ Envgroups OrganizationsGets an environment group attachment.
⊞ Envgroups OrganizationsLists all attachments of an environment group.
⊞ Envgroups OrganizationsCreates a new environment group.
⊞ Envgroups OrganizationsDeletes an environment group.
⊞ Envgroups OrganizationsGets an environment group.
⊞ Envgroups OrganizationsGets the deployed ingress configuration for an environment group.
⊞ Envgroups OrganizationsLists all environment groups.
⊞ Envgroups OrganizationsUpdates an environment group.
⊞ Environments OrganizationsUpdates an add-on enablement status of an environment.
⊞ Environments OrganizationsGets a list of metrics and dimensions that can be used to create analytics queries and reports. Each schema element contains the name of the field, its associated type, and a flag indicating whether it is a standard or custom field.
⊞ Environments OrganizationsSubmit a data export job to be processed in the background. If the request is successful, the API returns a 201 status, a URI that can be used to retrieve the status of the export job, and the `state` value of "enqueued".
⊞ Environments OrganizationsGets the details and status of an analytics export job. If the export job is still in progress, its `state` is set to "running". After the export job has completed successfully, its `state` is set to "completed". If the export job fails, its `state` is set to `failed`.
⊞ Environments OrganizationsLists the details and status of all analytics export jobs belonging to the parent organization and environment.
⊞ Environments OrganizationsLists all deployments of an API proxy in an environment.
⊞ Environments OrganizationsCreates a debug session for a deployed API Proxy revision.
⊞ Environments OrganizationsGets the debug data from a transaction.
⊞ Environments OrganizationsDeletes the data from a debug session. This does not cancel the debug session or prevent further data from being collected if the session is still active in runtime pods.
⊞ Environments OrganizationsRetrieves a debug session.
⊞ Environments OrganizationsLists debug sessions that are currently active in the given API Proxy revision.
⊞ Environments OrganizationsDeploys a revision of an API proxy. If another revision of the same API proxy revision is currently deployed, set the `override` parameter to `true` to have this revision replace the currently deployed revision. You cannot invoke an API proxy until it has been deployed to an environment. After you deploy an API proxy revision, you cannot edit it. To edit the API proxy, you must create and deploy a new revision. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.deploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
⊞ Environments OrganizationsGenerates a report for a dry run analysis of a DeployApiProxy request without committing the deployment. In addition to the standard validations performed when adding deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being created. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run DeployApiProxy request. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateDeployChangeReport`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.deploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
⊞ Environments OrganizationsGenerates a report for a dry run analysis of an UndeployApiProxy request without committing the undeploy. In addition to the standard validations performed when removing deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being removed. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run UndeployApiProxy request. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateUndeployChangeReport`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.undeploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
⊞ Environments OrganizationsGets the deployment of an API proxy revision and actual state reported by runtime pods.
⊞ Environments OrganizationsUndeploys an API proxy revision from an environment. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.undeploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
⊞ Environments OrganizationsCreates a new ArchiveDeployment.
⊞ Environments OrganizationsDeletes an archive deployment.
⊞ Environments OrganizationsGenerates a signed URL for downloading the original zip file used to create an Archive Deployment. The URL is only valid for a limited period and should be used within minutes after generation. Each call returns a new upload URL.
⊞ Environments OrganizationsGenerates a signed URL for uploading an Archive zip file to Google Cloud Storage. Once the upload is complete, the signed URL should be passed to CreateArchiveDeployment. When uploading to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * Source file size should not exceed 1GB limit. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * `content-type: application/zip` * `x-goog-content-length-range: 0,1073741824` And this header SHOULD NOT be specified: * `Authorization: Bearer YOUR_TOKEN`
⊞ Environments OrganizationsGets the specified ArchiveDeployment.
⊞ Environments OrganizationsLists the ArchiveDeployments in the specified Environment.
⊞ Environments OrganizationsUpdates an existing ArchiveDeployment. Labels can modified but most of the other fields are not modifiable.
⊞ Environments OrganizationsDeletes a cache.
⊞ Environments OrganizationsCreates an environment in an organization.
⊞ Environments OrganizationsDeletes an environment from an organization. **Warning: You must delete all key value maps and key value entries before you delete an environment.** Otherwise, if you re-create the environment the key value map entry operations will encounter encryption/decryption discrepancies.
⊞ Environments OrganizationsLists all deployments of API proxies or shared flows in an environment.
⊞ Environments OrganizationsAttaches a shared flow to a flow hook.
⊞ Environments OrganizationsDetaches a shared flow from a flow hook.
⊞ Environments OrganizationsReturns the name of the shared flow attached to the specified flow hook. If there's no shared flow attached to the flow hook, the API does not return an error; it simply does not return a name in the response.
⊞ Environments OrganizationsGets environment details.
⊞ Environments OrganizationsGets the add-ons config of an environment.
⊞ Environments OrganizationsGets the API Security runtime configuration for an environment. This named ApiSecurityRuntimeConfig to prevent conflicts with ApiSecurityConfig from addon config.
⊞ Environments OrganizationsGets the debug mask singleton resource for an environment.
⊞ Environments OrganizationsGets the deployed configuration for an environment.
⊞ Environments OrganizationsGets the IAM policy on an environment. For more information, see [Manage users, roles, and permissions using the API](https://cloud.google.com/apigee/docs/api-platform/system-administration/manage-users-roles). You must have the `apigee.environments.getIamPolicy` permission to call this API.
⊞ Environments OrganizationsGetSecurityActionConfig returns the current SecurityActions configuration.
⊞ Environments OrganizationsGet distributed trace configuration in an environment.
⊞ Environments OrganizationsCreates an alias from a key/certificate pair. The structure of the request is controlled by the `format` query parameter: - `keycertfile` - Separate PEM-encoded key and certificate files are uploaded. Set `Content-Type: multipart/form-data` and include the `keyFile`, `certFile`, and `password` (if keys are encrypted) fields in the request body. If uploading to a truststore, omit `keyFile`. - `pkcs12` - A PKCS12 file is uploaded. Set `Content-Type: multipart/form-data`, provide the file in the `file` field, and include the `password` field if the file is encrypted in the request body. - `selfsignedcert` - A new private key and certificate are generated. Set `Content-Type: application/json` and include CertificateGenerationSpec in the request body.
⊞ Environments OrganizationsGenerates a PKCS #10 Certificate Signing Request for the private key in an alias.
⊞ Environments OrganizationsDeletes an alias.
⊞ Environments OrganizationsGets an alias.
⊞ Environments OrganizationsGets the certificate from an alias in PEM-encoded form.
⊞ Environments OrganizationsUpdates the certificate in an alias.
⊞ Environments OrganizationsCreates a keystore or truststore. - Keystore: Contains certificates and their associated keys. - Truststore: Contains trusted certificates used to validate a server's certificate. These certificates are typically self-signed certificates or certificates that are not signed by a trusted CA.
⊞ Environments OrganizationsDeletes a keystore or truststore.
⊞ Environments OrganizationsGets a keystore or truststore.
⊞ Environments OrganizationsCreates a key value map in an environment.
⊞ Environments OrganizationsDeletes a key value map from an environment.
⊞ Environments OrganizationsCreates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
⊞ Environments OrganizationsDeletes a key value entry from a key value map scoped to an organization, environment, or API proxy. **Notes:** * After you delete the key value entry, the policy consuming the entry will continue to function with its cached values for a few minutes. This is expected behavior. * Supported for Apigee hybrid 1.8.x and higher.
⊞ Environments OrganizationsGet the key value entry value for a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
⊞ Environments OrganizationsLists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
⊞ Environments OrganizationsUpdates properties for an Apigee environment with patch semantics using a field mask. **Note:** Not supported for Apigee hybrid.
⊞ Environments OrganizationsSimilar to GetStats except that the response is less verbose.
⊞ Environments OrganizationsSubmit a query to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
⊞ Environments OrganizationsGet query status If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
⊞ Environments OrganizationsAfter the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
⊞ Environments OrganizationsAfter the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is sent to the client as a list of urls to JSON files.
⊞ Environments OrganizationsReturn a list of Asynchronous Queries
⊞ Environments OrganizationsCreates a Reference in the specified environment.
⊞ Environments OrganizationsDeletes a Reference from an environment. Returns the deleted Reference resource.
⊞ Environments OrganizationsGets a Reference resource.
⊞ Environments OrganizationsUpdates an existing Reference. Note that this operation has PUT semantics; it will replace the entirety of the existing Reference with the resource in the request body.
⊞ Environments OrganizationsCreates a resource file. Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
⊞ Environments OrganizationsDeletes a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
⊞ Environments OrganizationsGets the contents of a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
⊞ Environments OrganizationsLists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
⊞ Environments OrganizationsLists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
⊞ Environments OrganizationsUpdates a resource file. Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
⊞ Environments OrganizationsCreateSecurityAction creates a SecurityAction.
⊞ Environments OrganizationsDisable a SecurityAction. The `state` of the SecurityAction after disabling is `DISABLED`. `DisableSecurityAction` can be called on SecurityActions in the state `ENABLED`; SecurityActions in a different state (including `DISABLED`) return an error.
⊞ Environments OrganizationsEnable a SecurityAction. The `state` of the SecurityAction after enabling is `ENABLED`. `EnableSecurityAction` can be called on SecurityActions in the state `DISABLED`; SecurityActions in a different state (including `ENABLED) return an error.
⊞ Environments OrganizationsGet a SecurityAction by name.
⊞ Environments OrganizationsReturns a list of SecurityActions. This returns both enabled and disabled actions.
⊞ Environments OrganizationsGetSecurityIncident gets the specified security incident. Returns NOT_FOUND if security incident is not present for the specified organization and environment.
⊞ Environments OrganizationsListSecurityIncidents lists all the security incident associated with the environment.
⊞ Environments OrganizationsSubmit a report request to be processed in the background. If the submission succeeds, the API returns a 200 status and an ID that refer to the report request. In addition to the HTTP status 200, the `state` of "enqueued" means that the request succeeded.
⊞ Environments OrganizationsGet security report status If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
⊞ Environments OrganizationsAfter the query is completed, use this API to retrieve the results as file. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
⊞ Environments OrganizationsAfter the query is completed, use this API to view the query result when result size is small.
⊞ Environments OrganizationsReturn a list of Security Reports
⊞ Environments OrganizationsRetrieve security statistics as tabular rows.
⊞ Environments OrganizationsRetrieve security statistics as a collection of time series.
⊞ Environments OrganizationsSets the IAM policy on an environment, if the policy already exists it will be replaced. For more information, see [Manage users, roles, and permissions using the API](https://cloud.google.com/apigee/docs/api-platform/system-administration/manage-users-roles). You must have the `apigee.environments.setIamPolicy` permission to call this API.
⊞ Environments OrganizationsLists all deployments of a shared flow in an environment.
⊞ Environments OrganizationsDeploys a revision of a shared flow. If another revision of the same shared flow is currently deployed, set the `override` parameter to `true` to have this revision replace the currently deployed revision. You cannot use a shared flow until it has been deployed to an environment. For a request path `organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.sharedflowrevisions.deploy` on the resource `organizations/{org}/sharedflows/{sf}/revisions/{rev}`
⊞ Environments OrganizationsGets the deployment of a shared flow revision and actual state reported by runtime pods.
⊞ Environments OrganizationsUndeploys a shared flow revision from an environment. For a request path `organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.sharedflowrevisions.undeploy` on the resource `organizations/{org}/sharedflows/{sf}/revisions/{rev}`
⊞ Environments OrganizationsRetrieve metrics grouped by dimensions. The types of metrics you can retrieve include traffic, message counts, API call latency, response size, and cache hits and counts. Dimensions let you view metrics in meaningful groups. You can optionally pass dimensions as path parameters to the `stats` API. If dimensions are not specified, the metrics are computed on the entire set of data for the given time range.
⊞ Environments OrganizationsCreates a subscription for the environment's Pub/Sub topic. The server will assign a random name for this subscription. The "name" and "push_config" must *not* be specified.
⊞ Environments OrganizationsCreates a TargetServer in the specified environment.
⊞ Environments OrganizationsDeletes a TargetServer from an environment. Returns the deleted TargetServer resource.
⊞ Environments OrganizationsGets a TargetServer resource.
⊞ Environments OrganizationsUpdates an existing TargetServer. Note that this operation has PUT semantics; it will replace the entirety of the existing TargetServer with the resource in the request body.
⊞ Environments OrganizationsTests the permissions of a user on an environment, and returns a subset of permissions that the user has on the environment. If the environment does not exist, an empty permission set is returned (a NOT_FOUND error is not returned).
⊞ Environments OrganizationsCreates a trace configuration override. The response contains a system-generated UUID, that can be used to view, update, or delete the configuration override. Use the List API to view the existing trace configuration overrides.
⊞ Environments OrganizationsDeletes a distributed trace configuration override.
⊞ Environments OrganizationsGets a trace configuration override.
⊞ Environments OrganizationsLists all of the distributed trace configuration overrides in an environment.
⊞ Environments OrganizationsUpdates a distributed trace configuration override. Note that the repeated fields have replace semantics when included in the field mask and that they will be overwritten by the value of the fields in the request body.
⊞ Environments OrganizationsDeletes a subscription for the environment's Pub/Sub topic.
⊞ Environments OrganizationsUpdates an existing environment. When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get). **Note**: Both `PUT` and `POST` methods are supported for updating an existing environment.
⊞ Environments OrganizationsUpdates the debug mask singleton resource for an environment.
⊞ Environments OrganizationsUpdates an existing environment. When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get). **Note**: Both `PUT` and `POST` methods are supported for updating an existing environment.
⊞ Environments OrganizationsUpdateSecurityActionConfig updates the current SecurityActions configuration. This method is used to enable/disable the feature at the environment level.
⊞ Environments OrganizationsUpdates the trace configurations in an environment. Note that the repeated fields have replace semantics when included in the field mask and that they will be overwritten by the value of the fields in the request body.
⊞ Get OrganizationsGets the profile for an Apigee organization. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).
⊞ GetDeployedIngressConfig OrganizationsGets the deployed ingress configuration for an organization.
⊞ GetProjectMapping OrganizationsGets the project ID and region for an Apigee organization.
⊞ GetRuntimeConfig OrganizationsGet runtime config for an organization.
⊞ GetSyncAuthorization OrganizationsLists the service accounts with the permissions required to allow the Synchronizer to download environment data from the control plane. An ETag is returned in the response to `getSyncAuthorization`. Pass that ETag when calling [setSyncAuthorization](setSyncAuthorization) to ensure that you are updating the correct version. If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.
⊞ HostQueries OrganizationsSubmit a query at host level to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
⊞ HostQueries OrganizationsGet status of a query submitted at host level. If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
⊞ HostQueries OrganizationsAfter the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
⊞ HostQueries Organizations
⊞ HostQueries OrganizationsReturn a list of Asynchronous Queries at host level.
⊞ HostSecurityReports OrganizationsSubmit a query at host level to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
⊞ HostSecurityReports OrganizationsGet status of a query submitted at host level. If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
⊞ HostSecurityReports OrganizationsAfter the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
⊞ HostSecurityReports OrganizationsAfter the query is completed, use this API to view the query result when result size is small.
⊞ HostSecurityReports OrganizationsReturn a list of Security Reports at host level.
⊞ HostStats OrganizationsRetrieve metrics grouped by dimensions in host level. The types of metrics you can retrieve include traffic, message counts, API call latency, response size, and cache hits and counts. Dimensions let you view metrics in meaningful groups. You can optionally pass dimensions as path parameters to the `stats` API. If dimensions are not specified, the metrics are computed on the entire set of data for the given time range.
⊞ Instances OrganizationsCreates a new attachment of an environment to an instance. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsDeletes an attachment. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsGets an attachment. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsLists all attachments to an instance. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsCreates a new canary evaluation for an organization.
⊞ Instances OrganizationsGets a CanaryEvaluation for an organization.
⊞ Instances OrganizationsCreates an Apigee runtime instance. The instance is accessible from the authorized network configured on the organization. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsDeletes an Apigee runtime instance. The instance stops serving requests and the runtime data is deleted. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsGets the details for an Apigee runtime instance. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsLists all Apigee runtime instances for the organization. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsActivates the NAT address. The Apigee instance can now use this for Internet egress traffic. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsCreates a NAT address. The address is created in the RESERVED state and a static external IP address will be provisioned. At this time, the instance will not use this IP address for Internet egress traffic. The address can be activated for use once any required firewall IP whitelisting has been completed. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsDeletes the NAT address. Connections that are actively using the address are drained before it is removed. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsGets the details of a NAT address. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsLists the NAT addresses for an Apigee instance. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsUpdates an Apigee runtime instance. You can update the fields described in NodeConfig. No other fields will be updated. **Note:** Not supported for Apigee hybrid.
⊞ Instances OrganizationsReports the latest status for a runtime instance.
⊞ Keyvaluemaps OrganizationsCreates a key value map in an organization.
⊞ Keyvaluemaps OrganizationsDeletes a key value map from an organization.
⊞ Keyvaluemaps OrganizationsCreates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
⊞ Keyvaluemaps OrganizationsDeletes a key value entry from a key value map scoped to an organization, environment, or API proxy. **Notes:** * After you delete the key value entry, the policy consuming the entry will continue to function with its cached values for a few minutes. This is expected behavior. * Supported for Apigee hybrid 1.8.x and higher.
⊞ Keyvaluemaps OrganizationsGet the key value entry value for a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
⊞ Keyvaluemaps OrganizationsLists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
⊞ List OrganizationsLists the Apigee organizations and associated Google Cloud projects that you have permission to access. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).
⊞ Operations OrganizationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations OrganizationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ OptimizedHostStats OrganizationsSimilar to GetHostStats except that the response is less verbose.
⊞ Reports OrganizationsCreates a Custom Report for an Organization. A Custom Report provides Apigee Customers to create custom dashboards in addition to the standard dashboards which are provided. The Custom Report in its simplest form contains specifications about metrics, dimensions and filters. It is important to note that the custom report by itself does not provide an executable entity. The Edge UI converts the custom report definition into an analytics query and displays the result in a chart.
⊞ Reports OrganizationsDeletes an existing custom report definition
⊞ Reports OrganizationsRetrieve a custom report definition.
⊞ Reports OrganizationsReturn a list of Custom Reports
⊞ Reports OrganizationsUpdate an existing custom report definition
⊞ SecurityProfiles OrganizationsCreateSecurityProfile create a new custom security profile.
⊞ SecurityProfiles OrganizationsDeleteSecurityProfile delete a profile with all its revisions.
⊞ SecurityProfiles OrganizationsComputeEnvironmentScores calculates scores for requested time range for the specified security profile and environment.
⊞ SecurityProfiles OrganizationsCreateSecurityProfileEnvironmentAssociation creates profile environment association i.e. attaches environment to security profile.
⊞ SecurityProfiles OrganizationsDeleteSecurityProfileEnvironmentAssociation removes profile environment association i.e. detaches environment from security profile.
⊞ SecurityProfiles OrganizationsGetSecurityProfile gets the specified security profile. Returns NOT_FOUND if security profile is not present for the specified organization.
⊞ SecurityProfiles OrganizationsListSecurityProfiles lists all the security profiles associated with the org including attached and unattached profiles.
⊞ SecurityProfiles OrganizationsListSecurityProfileRevisions lists all the revisions of the security profile.
⊞ SecurityProfiles OrganizationsUpdateSecurityProfile update the metadata of security profile.
⊞ SetAddons OrganizationsConfigures the add-ons for the Apigee organization. The existing add-on configuration will be fully replaced.
⊞ SetSyncAuthorization OrganizationsSets the permissions required to allow the Synchronizer to download environment data from the control plane. You must call this API to enable proper functioning of hybrid. Pass the ETag when calling `setSyncAuthorization` to ensure that you are updating the correct version. To get an ETag, call [getSyncAuthorization](getSyncAuthorization). If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.
⊞ Sharedflows OrganizationsUploads a ZIP-formatted shared flow configuration bundle to an organization. If the shared flow already exists, this creates a new revision of it. If the shared flow does not exist, this creates it. Once imported, the shared flow revision must be deployed before it can be accessed at runtime. The size limit of a shared flow bundle is 15 MB.
⊞ Sharedflows OrganizationsDeletes a shared flow and all it's revisions. The shared flow must be undeployed before you can delete it.
⊞ Sharedflows OrganizationsLists all deployments of a shared flow.
⊞ Sharedflows OrganizationsGets a shared flow by name, including a list of its revisions.
⊞ Sharedflows OrganizationsLists all shared flows in the organization.
⊞ Sharedflows OrganizationsDeletes a shared flow and all associated policies, resources, and revisions. You must undeploy the shared flow before deleting it.
⊞ Sharedflows OrganizationsLists all deployments of a shared flow revision.
⊞ Sharedflows OrganizationsGets a revision of a shared flow. To download the shared flow configuration bundle for the specified revision as a zip file, set the `format` query parameter to `bundle`. If you are using curl, specify `-o filename.zip` to save the output to a file; otherwise, it displays to `stdout`. Then, develop the shared flow configuration locally and upload the updated sharedFlow configuration revision, as described in [updateSharedFlowRevision](updateSharedFlowRevision).
⊞ Sharedflows OrganizationsUpdates a shared flow revision. This operation is only allowed on revisions which have never been deployed. After deployment a revision becomes immutable, even if it becomes undeployed. The payload is a ZIP-formatted shared flow. Content type must be either multipart/form-data or application/octet-stream.
⊞ Sites OrganizationsCreates a new API category.
⊞ Sites OrganizationsDeletes an API category.
⊞ Sites OrganizationsGets an API category.
⊞ Sites OrganizationsReturns the API categories associated with a portal.
⊞ Sites OrganizationsUpdates an API category.
⊞ Update OrganizationsUpdates the properties for an Apigee organization. No other fields in the organization profile will be updated.
⊞ ProvisionOrganization ProjectsProvisions a new Apigee organization with a functioning runtime. This is the standard way to create trial organizations for a free Apigee trial.
SAS Portal API (Testing) v1alpha1
⊞ CheckHasProvisionedDeployment CustomersChecks whether a SAS deployment for the authentication context exists.
⊞ Deployments CustomersCreates a new deployment.
⊞ Deployments CustomersDeletes a deployment.
⊞ Deployments CustomersCreates a device under a node or customer.
⊞ Deployments CustomersCreates a signed device under a node or customer.
⊞ Deployments CustomersLists devices under a node or customer.
⊞ Deployments CustomersReturns a requested deployment.
⊞ Deployments CustomersLists deployments.
⊞ Deployments CustomersMoves a deployment under another node or customer.
⊞ Deployments CustomersUpdates an existing deployment.
⊞ Devices CustomersCreates a device under a node or customer.
⊞ Devices CustomersCreates a signed device under a node or customer.
⊞ Devices CustomersDeletes a device.
⊞ Devices CustomersGets details about a device.
⊞ Devices CustomersLists devices under a node or customer.
⊞ Devices CustomersMoves a device under another node or customer.
⊞ Devices CustomersUpdates a device.
⊞ Devices CustomersSigns a device.
⊞ Devices CustomersUpdates a signed device.
⊞ Get CustomersReturns a requested customer.
⊞ List CustomersReturns a list of requested customers.
⊞ MigrateOrganization CustomersMigrates a SAS organization to the cloud. This will create GCP projects for each deployment and associate them. The SAS Organization is linked to the gcp project that called the command. go/sas-legacy-customer-migration
⊞ Nodes CustomersCreates a new node.
⊞ Nodes CustomersDeletes a node.
⊞ Nodes CustomersCreates a new deployment.
⊞ Nodes CustomersLists deployments.
⊞ Nodes CustomersCreates a device under a node or customer.
⊞ Nodes CustomersCreates a signed device under a node or customer.
⊞ Nodes CustomersLists devices under a node or customer.
⊞ Nodes CustomersReturns a requested node.
⊞ Nodes CustomersLists nodes.
⊞ Nodes CustomersMoves a node under another node or customer.
⊞ Nodes CustomersCreates a new node.
⊞ Nodes CustomersLists nodes.
⊞ Nodes CustomersUpdates an existing node.
⊞ Patch CustomersUpdates an existing customer.
⊞ ProvisionDeployment CustomersCreates a new SAS deployment through the GCP workflow. Creates a SAS organization if an organization match is not found.
⊞ SetupSasAnalytics CustomersSetups the a GCP Project to receive SAS Analytics messages via GCP Pub/Sub with a subscription to BigQuery. All the Pub/Sub topics and BigQuery tables are created automatically as part of this service.
⊞ Devices DeploymentsDeletes a device.
⊞ Devices DeploymentsGets details about a device.
⊞ Devices DeploymentsMoves a device under another node or customer.
⊞ Devices DeploymentsUpdates a device.
⊞ Devices DeploymentsSigns a device.
⊞ Devices DeploymentsUpdates a signed device.
⊞ Get DeploymentsReturns a requested deployment.
⊞ GenerateSecret InstallerGenerates a secret to be used with the ValidateInstaller.
⊞ Validate InstallerValidates the identity of a Certified Professional Installer (CPI).
⊞ Deployments NodesDeletes a deployment.
⊞ Deployments NodesCreates a device under a node or customer.
⊞ Deployments NodesCreates a signed device under a node or customer.
⊞ Deployments NodesLists devices under a node or customer.
⊞ Deployments NodesReturns a requested deployment.
⊞ Deployments NodesLists deployments.
⊞ Deployments NodesMoves a deployment under another node or customer.
⊞ Deployments NodesUpdates an existing deployment.
⊞ Devices NodesCreates a device under a node or customer.
⊞ Devices NodesCreates a signed device under a node or customer.
⊞ Devices NodesDeletes a device.
⊞ Devices NodesGets details about a device.
⊞ Devices NodesLists devices under a node or customer.
⊞ Devices NodesMoves a device under another node or customer.
⊞ Devices NodesUpdates a device.
⊞ Devices NodesSigns a device.
⊞ Devices NodesUpdates a signed device.
⊞ Get NodesReturns a requested node.
⊞ Nodes NodesCreates a new node.
⊞ Nodes NodesDeletes a node.
⊞ Nodes NodesCreates a new deployment.
⊞ Nodes NodesLists deployments.
⊞ Nodes NodesCreates a device under a node or customer.
⊞ Nodes NodesCreates a signed device under a node or customer.
⊞ Nodes NodesLists devices under a node or customer.
⊞ Nodes NodesReturns a requested node.
⊞ Nodes NodesLists nodes.
⊞ Nodes NodesMoves a node under another node or customer.
⊞ Nodes NodesCreates a new node.
⊞ Nodes NodesLists nodes.
⊞ Nodes NodesUpdates an existing node.
⊞ Get PoliciesGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Set PoliciesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ Test PoliciesReturns permissions that a caller has on the specified resource.
Compute Engine API v1
⊞ AggregatedList AcceleratorTypesRetrieves an aggregated list of accelerator types.
⊞ Get AcceleratorTypesReturns the specified accelerator type.
⊞ List AcceleratorTypesRetrieves a list of accelerator types that are available to the specified project.
⊞ AggregatedList AddressesRetrieves an aggregated list of addresses.
⊞ Delete AddressesDeletes the specified address resource.
⊞ Get AddressesReturns the specified address resource.
⊞ Insert AddressesCreates an address resource in the specified project by using the data included in the request.
⊞ List AddressesRetrieves a list of addresses contained within the specified region.
⊞ Move AddressesMoves the specified address resource.
⊞ SetLabels AddressesSets the labels on an Address. To learn more about labels, read the Labeling Resources documentation.
⊞ AggregatedList AutoscalersRetrieves an aggregated list of autoscalers.
⊞ Delete AutoscalersDeletes the specified autoscaler.
⊞ Get AutoscalersReturns the specified autoscaler resource.
⊞ Insert AutoscalersCreates an autoscaler in the specified project using the data included in the request.
⊞ List AutoscalersRetrieves a list of autoscalers contained within the specified zone.
⊞ Patch AutoscalersUpdates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ Update AutoscalersUpdates an autoscaler in the specified project using the data included in the request.
⊞ AddSignedUrlKey BackendBucketsAdds a key for validating requests with signed URLs for this backend bucket.
⊞ Delete BackendBucketsDeletes the specified BackendBucket resource.
⊞ DeleteSignedUrlKey BackendBucketsDeletes a key for validating requests with signed URLs for this backend bucket.
⊞ Get BackendBucketsReturns the specified BackendBucket resource.
⊞ GetIamPolicy BackendBucketsGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert BackendBucketsCreates a BackendBucket resource in the specified project using the data included in the request.
⊞ List BackendBucketsRetrieves the list of BackendBucket resources available to the specified project.
⊞ Patch BackendBucketsUpdates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ SetEdgeSecurityPolicy BackendBucketsSets the edge security policy for the specified backend bucket.
⊞ SetIamPolicy BackendBucketsSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions BackendBucketsReturns permissions that a caller has on the specified resource.
⊞ Update BackendBucketsUpdates the specified BackendBucket resource with the data included in the request.
⊞ AddSignedUrlKey BackendServicesAdds a key for validating requests with signed URLs for this backend service.
⊞ AggregatedList BackendServicesRetrieves the list of all BackendService resources, regional and global, available to the specified project.
⊞ Delete BackendServicesDeletes the specified BackendService resource.
⊞ DeleteSignedUrlKey BackendServicesDeletes a key for validating requests with signed URLs for this backend service.
⊞ Get BackendServicesReturns the specified BackendService resource.
⊞ GetHealth BackendServicesGets the most recent health check results for this BackendService. Example request body: { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" }
⊞ GetIamPolicy BackendServicesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert BackendServicesCreates a BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview .
⊞ List BackendServicesRetrieves the list of BackendService resources available to the specified project.
⊞ ListUsable BackendServicesRetrieves an aggregated list of all usable backend services in the specified project.
⊞ Patch BackendServicesPatches the specified BackendService resource with the data included in the request. For more information, see Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ SetEdgeSecurityPolicy BackendServicesSets the edge security policy for the specified backend service.
⊞ SetIamPolicy BackendServicesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ SetSecurityPolicy BackendServicesSets the Google Cloud Armor security policy for the specified backend service. For more information, see Google Cloud Armor Overview
⊞ TestIamPermissions BackendServicesReturns permissions that a caller has on the specified resource.
⊞ Update BackendServicesUpdates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.
⊞ AggregatedList DiskTypesRetrieves an aggregated list of disk types.
⊞ Get DiskTypesReturns the specified disk type.
⊞ List DiskTypesRetrieves a list of disk types available to the specified project.
⊞ AddResourcePolicies DisksAdds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
⊞ AggregatedList DisksRetrieves an aggregated list of persistent disks.
⊞ BulkInsert DisksBulk create a set of disks.
⊞ CreateSnapshot DisksCreates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating snapshots in a project different from the source disk project.
⊞ Delete DisksDeletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
⊞ Get DisksReturns the specified persistent disk.
⊞ GetIamPolicy DisksGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert DisksCreates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
⊞ List DisksRetrieves a list of persistent disks contained within the specified zone.
⊞ RemoveResourcePolicies DisksRemoves resource policies from a disk.
⊞ Resize DisksResizes the specified persistent disk. You can only increase the size of the disk.
⊞ SetIamPolicy DisksSets the access control policy on the specified resource. Replaces any existing policy.
⊞ SetLabels DisksSets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
⊞ StartAsyncReplication DisksStarts asynchronous replication. Must be invoked on the primary disk.
⊞ StopAsyncReplication DisksStops asynchronous replication. Can be invoked either on the primary or on the secondary disk.
⊞ StopGroupAsyncReplication DisksStops asynchronous replication for a consistency group of disks. Can be invoked either in the primary or secondary scope.
⊞ TestIamPermissions DisksReturns permissions that a caller has on the specified resource.
⊞ Update DisksUpdates the specified disk with the data included in the request. The update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.
⊞ Delete ExternalVpnGatewaysDeletes the specified externalVpnGateway.
⊞ Get ExternalVpnGatewaysReturns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
⊞ Insert ExternalVpnGatewaysCreates a ExternalVpnGateway in the specified project using the data included in the request.
⊞ List ExternalVpnGatewaysRetrieves the list of ExternalVpnGateway available to the specified project.
⊞ SetLabels ExternalVpnGatewaysSets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
⊞ TestIamPermissions ExternalVpnGatewaysReturns permissions that a caller has on the specified resource.
⊞ AddAssociation FirewallPoliciesInserts an association for the specified firewall policy.
⊞ AddRule FirewallPoliciesInserts a rule into a firewall policy.
⊞ CloneRules FirewallPoliciesCopies rules to the specified firewall policy.
⊞ Delete FirewallPoliciesDeletes the specified policy.
⊞ Get FirewallPoliciesReturns the specified firewall policy.
⊞ GetAssociation FirewallPoliciesGets an association with the specified name.
⊞ GetIamPolicy FirewallPoliciesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ GetRule FirewallPoliciesGets a rule of the specified priority.
⊞ Insert FirewallPoliciesCreates a new policy in the specified project using the data included in the request.
⊞ List FirewallPoliciesLists all the policies that have been configured for the specified folder or organization.
⊞ ListAssociations FirewallPoliciesLists associations of a specified target, i.e., organization or folder.
⊞ Move FirewallPoliciesMoves the specified firewall policy.
⊞ Patch FirewallPoliciesPatches the specified policy with the data included in the request.
⊞ PatchRule FirewallPoliciesPatches a rule of the specified priority.
⊞ RemoveAssociation FirewallPoliciesRemoves an association for the specified firewall policy.
⊞ RemoveRule FirewallPoliciesDeletes a rule of the specified priority.
⊞ SetIamPolicy FirewallPoliciesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions FirewallPoliciesReturns permissions that a caller has on the specified resource.
⊞ Delete FirewallsDeletes the specified firewall.
⊞ Get FirewallsReturns the specified firewall.
⊞ Insert FirewallsCreates a firewall rule in the specified project using the data included in the request.
⊞ List FirewallsRetrieves the list of firewall rules available to the specified project.
⊞ Patch FirewallsUpdates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ Update FirewallsUpdates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
⊞ AggregatedList ForwardingRulesRetrieves an aggregated list of forwarding rules.
⊞ Delete ForwardingRulesDeletes the specified ForwardingRule resource.
⊞ Get ForwardingRulesReturns the specified ForwardingRule resource.
⊞ Insert ForwardingRulesCreates a ForwardingRule resource in the specified project and region using the data included in the request.
⊞ List ForwardingRulesRetrieves a list of ForwardingRule resources available to the specified project and region.
⊞ Patch ForwardingRulesUpdates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
⊞ SetLabels ForwardingRulesSets the labels on the specified resource. To learn more about labels, read the Labeling Resources documentation.
⊞ SetTarget ForwardingRulesChanges target URL for forwarding rule. The new target should be of the same type as the old target.
⊞ Delete GlobalAddressesDeletes the specified address resource.
⊞ Get GlobalAddressesReturns the specified address resource.
⊞ Insert GlobalAddressesCreates an address resource in the specified project by using the data included in the request.
⊞ List GlobalAddressesRetrieves a list of global addresses.
⊞ Move GlobalAddressesMoves the specified address resource from one project to another project.
⊞ SetLabels GlobalAddressesSets the labels on a GlobalAddress. To learn more about labels, read the Labeling Resources documentation.
⊞ Delete GlobalForwardingRulesDeletes the specified GlobalForwardingRule resource.
⊞ Get GlobalForwardingRulesReturns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
⊞ Insert GlobalForwardingRulesCreates a GlobalForwardingRule resource in the specified project using the data included in the request.
⊞ List GlobalForwardingRulesRetrieves a list of GlobalForwardingRule resources available to the specified project.
⊞ Patch GlobalForwardingRulesUpdates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
⊞ SetLabels GlobalForwardingRulesSets the labels on the specified resource. To learn more about labels, read the Labeling resources documentation.
⊞ SetTarget GlobalForwardingRulesChanges target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
⊞ AttachNetworkEndpoints GlobalNetworkEndpointGroupsAttach a network endpoint to the specified network endpoint group.
⊞ Delete GlobalNetworkEndpointGroupsDeletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
⊞ DetachNetworkEndpoints GlobalNetworkEndpointGroupsDetach the network endpoint from the specified network endpoint group.
⊞ Get GlobalNetworkEndpointGroupsReturns the specified network endpoint group.
⊞ Insert GlobalNetworkEndpointGroupsCreates a network endpoint group in the specified project using the parameters that are included in the request.
⊞ List GlobalNetworkEndpointGroupsRetrieves the list of network endpoint groups that are located in the specified project.
⊞ ListNetworkEndpoints GlobalNetworkEndpointGroupsLists the network endpoints in the specified network endpoint group.
⊞ AggregatedList GlobalOperationsRetrieves an aggregated list of all operations.
⊞ Delete GlobalOperationsDeletes the specified Operations resource.
⊞ Get GlobalOperationsRetrieves the specified Operations resource.
⊞ List GlobalOperationsRetrieves a list of Operation resources contained within the specified project.
⊞ Wait GlobalOperationsWaits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
⊞ Delete GlobalOrganizationOperationsDeletes the specified Operations resource.
⊞ Get GlobalOrganizationOperationsRetrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
⊞ List GlobalOrganizationOperationsRetrieves a list of Operation resources contained within the specified organization.
⊞ Delete GlobalPublicDelegatedPrefixesDeletes the specified global PublicDelegatedPrefix.
⊞ Get GlobalPublicDelegatedPrefixesReturns the specified global PublicDelegatedPrefix resource.
⊞ Insert GlobalPublicDelegatedPrefixesCreates a global PublicDelegatedPrefix in the specified project using the parameters that are included in the request.
⊞ List GlobalPublicDelegatedPrefixesLists the global PublicDelegatedPrefixes for a project.
⊞ Patch GlobalPublicDelegatedPrefixesPatches the specified global PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ AggregatedList HealthChecksRetrieves the list of all HealthCheck resources, regional and global, available to the specified project.
⊞ Delete HealthChecksDeletes the specified HealthCheck resource.
⊞ Get HealthChecksReturns the specified HealthCheck resource.
⊞ Insert HealthChecksCreates a HealthCheck resource in the specified project using the data included in the request.
⊞ List HealthChecksRetrieves the list of HealthCheck resources available to the specified project.
⊞ Patch HealthChecksUpdates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ Update HealthChecksUpdates a HealthCheck resource in the specified project using the data included in the request.
⊞ Delete HttpHealthChecksDeletes the specified HttpHealthCheck resource.
⊞ Get HttpHealthChecksReturns the specified HttpHealthCheck resource.
⊞ Insert HttpHealthChecksCreates a HttpHealthCheck resource in the specified project using the data included in the request.
⊞ List HttpHealthChecksRetrieves the list of HttpHealthCheck resources available to the specified project.
⊞ Patch HttpHealthChecksUpdates a HttpHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ Update HttpHealthChecksUpdates a HttpHealthCheck resource in the specified project using the data included in the request.
⊞ Delete HttpsHealthChecksDeletes the specified HttpsHealthCheck resource.
⊞ Get HttpsHealthChecksReturns the specified HttpsHealthCheck resource.
⊞ Insert HttpsHealthChecksCreates a HttpsHealthCheck resource in the specified project using the data included in the request.
⊞ List HttpsHealthChecksRetrieves the list of HttpsHealthCheck resources available to the specified project.
⊞ Patch HttpsHealthChecksUpdates a HttpsHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ Update HttpsHealthChecksUpdates a HttpsHealthCheck resource in the specified project using the data included in the request.
⊞ Get ImageFamilyViewsReturns the latest image that is part of an image family, is not deprecated and is rolled out in the specified zone.
⊞ Delete ImagesDeletes the specified image.
⊞ Deprecate ImagesSets the deprecation status of an image. If an empty request body is given, clears the deprecation status instead.
⊞ Get ImagesReturns the specified image.
⊞ GetFromFamily ImagesReturns the latest image that is part of an image family and is not deprecated. For more information on image families, see Public image families documentation.
⊞ GetIamPolicy ImagesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert ImagesCreates an image in the specified project using the data included in the request.
⊞ List ImagesRetrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
⊞ Patch ImagesPatches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.
⊞ SetIamPolicy ImagesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ SetLabels ImagesSets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
⊞ TestIamPermissions ImagesReturns permissions that a caller has on the specified resource.
⊞ AbandonInstances InstanceGroupManagersFlags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
⊞ AggregatedList InstanceGroupManagersRetrieves the list of managed instance groups and groups them by zone.
⊞ ApplyUpdatesToInstances InstanceGroupManagersApplies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
⊞ CreateInstances InstanceGroupManagersCreates instances with per-instance configurations in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
⊞ Delete InstanceGroupManagersDeletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read Deleting an instance group for more information.
⊞ DeleteInstances InstanceGroupManagersFlags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
⊞ DeletePerInstanceConfigs InstanceGroupManagersDeletes selected per-instance configurations for the managed instance group.
⊞ Get InstanceGroupManagersReturns all of the details about the specified managed instance group.
⊞ Insert InstanceGroupManagersCreates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method. A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
⊞ List InstanceGroupManagersRetrieves a list of managed instance groups that are contained within the specified project and zone.
⊞ ListErrors InstanceGroupManagersLists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported.
⊞ ListManagedInstances InstanceGroupManagersLists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action. The orderBy query parameter is not supported. The `pageToken` query parameter is supported only in the alpha and beta API and only if the group's `listManagedInstancesResults` field is set to `PAGINATED`.
⊞ ListPerInstanceConfigs InstanceGroupManagersLists all of the per-instance configurations defined for the managed instance group. The orderBy query parameter is not supported.
⊞ Patch InstanceGroupManagersUpdates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
⊞ PatchPerInstanceConfigs InstanceGroupManagersInserts or patches per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
⊞ RecreateInstances InstanceGroupManagersFlags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field; for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
⊞ Resize InstanceGroupManagersResizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method. When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including: + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance. This list is subject to change. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
⊞ SetInstanceTemplate InstanceGroupManagersSpecifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
⊞ SetTargetPools InstanceGroupManagersModifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
⊞ UpdatePerInstanceConfigs InstanceGroupManagersInserts or updates per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
⊞ AddInstances InstanceGroupsAdds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read Adding instances for more information.
⊞ AggregatedList InstanceGroupsRetrieves the list of instance groups and sorts them by zone.
⊞ Delete InstanceGroupsDeletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read Deleting an instance group for more information.
⊞ Get InstanceGroupsReturns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
⊞ Insert InstanceGroupsCreates an instance group in the specified project using the parameters that are included in the request.
⊞ List InstanceGroupsRetrieves the list of zonal instance group resources contained within the specified zone. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
⊞ ListInstances InstanceGroupsLists the instances in the specified instance group. The orderBy query parameter is not supported. The filter query parameter is supported, but only for expressions that use `eq` (equal) or `ne` (not equal) operators.
⊞ RemoveInstances InstanceGroupsRemoves one or more instances from the specified instance group, but does not delete those instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
⊞ SetNamedPorts InstanceGroupsSets the named ports for the specified instance group.
⊞ AggregatedList InstanceTemplatesRetrieves the list of all InstanceTemplates resources, regional and global, available to the specified project.
⊞ Delete InstanceTemplatesDeletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
⊞ Get InstanceTemplatesReturns the specified instance template.
⊞ GetIamPolicy InstanceTemplatesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert InstanceTemplatesCreates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
⊞ List InstanceTemplatesRetrieves a list of instance templates that are contained within the specified project.
⊞ SetIamPolicy InstanceTemplatesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions InstanceTemplatesReturns permissions that a caller has on the specified resource.
⊞ AddAccessConfig InstancesAdds an access config to an instance's network interface.
⊞ AddResourcePolicies InstancesAdds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
⊞ AggregatedList InstancesRetrieves an aggregated list of all of the instances in your project across all regions and zones. The performance of this method degrades when a filter is specified on a project that has a very large number of instances.
⊞ AttachDisk InstancesAttaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
⊞ BulkInsert InstancesCreates multiple instances. Count specifies the number of instances to create. For more information, see About bulk creation of VMs.
⊞ Delete InstancesDeletes the specified Instance resource. For more information, see Deleting an instance.
⊞ DeleteAccessConfig InstancesDeletes an access config from an instance's network interface.
⊞ DetachDisk InstancesDetaches a disk from an instance.
⊞ Get InstancesReturns the specified Instance resource.
⊞ GetEffectiveFirewalls InstancesReturns effective firewalls applied to an interface of the instance.
⊞ GetGuestAttributes InstancesReturns the specified guest attributes entry.
⊞ GetIamPolicy InstancesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ GetScreenshot InstancesReturns the screenshot from the specified instance.
⊞ GetSerialPortOutput InstancesReturns the last 1 MB of serial port output from the specified instance.
⊞ GetShieldedInstanceIdentity InstancesReturns the Shielded Instance Identity of an instance
⊞ Insert InstancesCreates an instance resource in the specified project using the data included in the request.
⊞ List InstancesRetrieves the list of instances contained within the specified zone.
⊞ ListReferrers InstancesRetrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.
⊞ RemoveResourcePolicies InstancesRemoves resource policies from an instance.
⊞ Reset InstancesPerforms a reset on the instance. This is a hard reset. The VM does not do a graceful shutdown. For more information, see Resetting an instance.
⊞ Resume InstancesResumes an instance that was suspended using the instances().suspend method.
⊞ SendDiagnosticInterrupt InstancesSends diagnostic interrupt to the instance.
⊞ SetDeletionProtection InstancesSets deletion protection on the instance.
⊞ SetDiskAutoDelete InstancesSets the auto-delete flag for a disk attached to an instance.
⊞ SetIamPolicy InstancesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ SetLabels InstancesSets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
⊞ SetMachineResources InstancesChanges the number and/or type of accelerator for a stopped instance to the values specified in the request.
⊞ SetMachineType InstancesChanges the machine type for a stopped instance to the machine type specified in the request.
⊞ SetMetadata InstancesSets metadata for the specified instance to the data included in the request.
⊞ SetMinCpuPlatform InstancesChanges the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
⊞ SetName InstancesSets name of an instance.
⊞ SetScheduling InstancesSets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states. For more information about setting scheduling options for a VM, see Set VM host maintenance policy.
⊞ SetSecurityPolicy InstancesSets the Google Cloud Armor security policy for the specified instance. For more information, see Google Cloud Armor Overview
⊞ SetServiceAccount InstancesSets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
⊞ SetShieldedInstanceIntegrityPolicy InstancesSets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ SetTags InstancesSets network tags for the specified instance to the data included in the request.
⊞ SimulateMaintenanceEvent InstancesSimulates a host maintenance event on a VM. For more information, see Simulate a host maintenance event.
⊞ Start InstancesStarts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
⊞ StartWithEncryptionKey InstancesStarts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
⊞ Stop InstancesStops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
⊞ Suspend InstancesThis method suspends a running instance, saving its state to persistent storage, and allows you to resume the instance at a later time. Suspended instances have no compute costs (cores or RAM), and incur only storage charges for the saved VM memory and localSSD data. Any charged resources the virtual machine was using, such as persistent disks and static IP addresses, will continue to be charged while the instance is suspended. For more information, see Suspending and resuming an instance.
⊞ TestIamPermissions InstancesReturns permissions that a caller has on the specified resource.
⊞ Update InstancesUpdates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See Updating a running instance for a list of updatable instance properties.
⊞ UpdateAccessConfig InstancesUpdates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ UpdateDisplayDevice InstancesUpdates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ UpdateNetworkInterface InstancesUpdates an instance's network interface. This method can only update an interface's alias IP range and attached network. See Modifying alias IP ranges for an existing instance for instructions on changing alias IP ranges. See Migrating a VM between networks for instructions on migrating an interface. This method follows PATCH semantics.
⊞ UpdateShieldedInstanceConfig InstancesUpdates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ AggregatedList InterconnectAttachmentsRetrieves an aggregated list of interconnect attachments.
⊞ Delete InterconnectAttachmentsDeletes the specified interconnect attachment.
⊞ Get InterconnectAttachmentsReturns the specified interconnect attachment.
⊞ Insert InterconnectAttachmentsCreates an InterconnectAttachment in the specified project using the data included in the request.
⊞ List InterconnectAttachmentsRetrieves the list of interconnect attachments contained within the specified region.
⊞ Patch InterconnectAttachmentsUpdates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ SetLabels InterconnectAttachmentsSets the labels on an InterconnectAttachment. To learn more about labels, read the Labeling Resources documentation.
⊞ Get InterconnectLocationsReturns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
⊞ List InterconnectLocationsRetrieves the list of interconnect locations available to the specified project.
⊞ Get InterconnectRemoteLocationsReturns the details for the specified interconnect remote location. Gets a list of available interconnect remote locations by making a list() request.
⊞ List InterconnectRemoteLocationsRetrieves the list of interconnect remote locations available to the specified project.
⊞ Delete InterconnectsDeletes the specified Interconnect.
⊞ Get InterconnectsReturns the specified Interconnect. Get a list of available Interconnects by making a list() request.
⊞ GetDiagnostics InterconnectsReturns the interconnectDiagnostics for the specified Interconnect. In the event of a global outage, do not use this API to make decisions about where to redirect your network traffic. Unlike a VLAN attachment, which is regional, a Cloud Interconnect connection is a global resource. A global outage can prevent this API from functioning properly.
⊞ GetMacsecConfig InterconnectsReturns the interconnectMacsecConfig for the specified Interconnect.
⊞ Insert InterconnectsCreates an Interconnect in the specified project using the data included in the request.
⊞ List InterconnectsRetrieves the list of Interconnects available to the specified project.
⊞ Patch InterconnectsUpdates the specified Interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ SetLabels InterconnectsSets the labels on an Interconnect. To learn more about labels, read the Labeling Resources documentation.
⊞ Get LicenseCodesReturn a specified license code. License codes are mirrored across all projects that have permissions to read the License Code. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
⊞ TestIamPermissions LicenseCodesReturns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
⊞ Delete LicensesDeletes the specified license. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
⊞ Get LicensesReturns the specified License resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
⊞ GetIamPolicy LicensesGets the access control policy for a resource. May be empty if no such policy or resource exists. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
⊞ Insert LicensesCreate a License resource in the specified project. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
⊞ List LicensesRetrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
⊞ SetIamPolicy LicensesSets the access control policy on the specified resource. Replaces any existing policy. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
⊞ TestIamPermissions LicensesReturns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
⊞ Delete MachineImagesDeletes the specified machine image. Deleting a machine image is permanent and cannot be undone.
⊞ Get MachineImagesReturns the specified machine image.
⊞ GetIamPolicy MachineImagesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert MachineImagesCreates a machine image in the specified project using the data that is included in the request. If you are creating a new machine image to update an existing instance, your new machine image should use the same network or, if applicable, the same subnetwork as the original instance.
⊞ List MachineImagesRetrieves a list of machine images that are contained within the specified project.
⊞ SetIamPolicy MachineImagesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions MachineImagesReturns permissions that a caller has on the specified resource.
⊞ AggregatedList MachineTypesRetrieves an aggregated list of machine types.
⊞ Get MachineTypesReturns the specified machine type.
⊞ List MachineTypesRetrieves a list of machine types available to the specified project.
⊞ AggregatedList NetworkAttachmentsRetrieves the list of all NetworkAttachment resources, regional and global, available to the specified project.
⊞ Delete NetworkAttachmentsDeletes the specified NetworkAttachment in the given scope
⊞ Get NetworkAttachmentsReturns the specified NetworkAttachment resource in the given scope.
⊞ GetIamPolicy NetworkAttachmentsGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert NetworkAttachmentsCreates a NetworkAttachment in the specified project in the given scope using the parameters that are included in the request.
⊞ List NetworkAttachmentsLists the NetworkAttachments for a project in the given scope.
⊞ Patch NetworkAttachmentsPatches the specified NetworkAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ SetIamPolicy NetworkAttachmentsSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions NetworkAttachmentsReturns permissions that a caller has on the specified resource.
⊞ AggregatedList NetworkEdgeSecurityServicesRetrieves the list of all NetworkEdgeSecurityService resources available to the specified project.
⊞ Delete NetworkEdgeSecurityServicesDeletes the specified service.
⊞ Get NetworkEdgeSecurityServicesGets a specified NetworkEdgeSecurityService.
⊞ Insert NetworkEdgeSecurityServicesCreates a new service in the specified project using the data included in the request.
⊞ Patch NetworkEdgeSecurityServicesPatches the specified policy with the data included in the request.
⊞ AggregatedList NetworkEndpointGroupsRetrieves the list of network endpoint groups and sorts them by zone.
⊞ AttachNetworkEndpoints NetworkEndpointGroupsAttach a list of network endpoints to the specified network endpoint group.
⊞ Delete NetworkEndpointGroupsDeletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
⊞ DetachNetworkEndpoints NetworkEndpointGroupsDetach a list of network endpoints from the specified network endpoint group.
⊞ Get NetworkEndpointGroupsReturns the specified network endpoint group.
⊞ Insert NetworkEndpointGroupsCreates a network endpoint group in the specified project using the parameters that are included in the request.
⊞ List NetworkEndpointGroupsRetrieves the list of network endpoint groups that are located in the specified project and zone.
⊞ ListNetworkEndpoints NetworkEndpointGroupsLists the network endpoints in the specified network endpoint group.
⊞ TestIamPermissions NetworkEndpointGroupsReturns permissions that a caller has on the specified resource.
⊞ AddAssociation NetworkFirewallPoliciesInserts an association for the specified firewall policy.
⊞ AddRule NetworkFirewallPoliciesInserts a rule into a firewall policy.
⊞ CloneRules NetworkFirewallPoliciesCopies rules to the specified firewall policy.
⊞ Delete NetworkFirewallPoliciesDeletes the specified policy.
⊞ Get NetworkFirewallPoliciesReturns the specified network firewall policy.
⊞ GetAssociation NetworkFirewallPoliciesGets an association with the specified name.
⊞ GetIamPolicy NetworkFirewallPoliciesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ GetRule NetworkFirewallPoliciesGets a rule of the specified priority.
⊞ Insert NetworkFirewallPoliciesCreates a new policy in the specified project using the data included in the request.
⊞ List NetworkFirewallPoliciesLists all the policies that have been configured for the specified project.
⊞ Patch NetworkFirewallPoliciesPatches the specified policy with the data included in the request.
⊞ PatchRule NetworkFirewallPoliciesPatches a rule of the specified priority.
⊞ RemoveAssociation NetworkFirewallPoliciesRemoves an association for the specified firewall policy.
⊞ RemoveRule NetworkFirewallPoliciesDeletes a rule of the specified priority.
⊞ SetIamPolicy NetworkFirewallPoliciesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions NetworkFirewallPoliciesReturns permissions that a caller has on the specified resource.
⊞ AddPeering NetworksAdds a peering to the specified network.
⊞ Delete NetworksDeletes the specified network.
⊞ Get NetworksReturns the specified network.
⊞ GetEffectiveFirewalls NetworksReturns the effective firewalls on a given network.
⊞ Insert NetworksCreates a network in the specified project using the data included in the request.
⊞ List NetworksRetrieves the list of networks available to the specified project.
⊞ ListPeeringRoutes NetworksLists the peering routes exchanged over peering connection.
⊞ Patch NetworksPatches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.
⊞ RemovePeering NetworksRemoves a peering from the specified network.
⊞ SwitchToCustomMode NetworksSwitches the network mode from auto subnet mode to custom subnet mode.
⊞ UpdatePeering NetworksUpdates the specified network peering with the data included in the request. You can only modify the NetworkPeering.export_custom_routes field and the NetworkPeering.import_custom_routes field.
⊞ AddNodes NodeGroupsAdds specified number of nodes to the node group.
⊞ AggregatedList NodeGroupsRetrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
⊞ Delete NodeGroupsDeletes the specified NodeGroup resource.
⊞ DeleteNodes NodeGroupsDeletes specified nodes from the node group.
⊞ Get NodeGroupsReturns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
⊞ GetIamPolicy NodeGroupsGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert NodeGroupsCreates a NodeGroup resource in the specified project using the data included in the request.
⊞ List NodeGroupsRetrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
⊞ ListNodes NodeGroupsLists nodes in the node group.
⊞ Patch NodeGroupsUpdates the specified node group.
⊞ SetIamPolicy NodeGroupsSets the access control policy on the specified resource. Replaces any existing policy.
⊞ SetNodeTemplate NodeGroupsUpdates the node template of the node group.
⊞ SimulateMaintenanceEvent NodeGroupsSimulates maintenance event on specified nodes from the node group.
⊞ TestIamPermissions NodeGroupsReturns permissions that a caller has on the specified resource.
⊞ AggregatedList NodeTemplatesRetrieves an aggregated list of node templates.
⊞ Delete NodeTemplatesDeletes the specified NodeTemplate resource.
⊞ Get NodeTemplatesReturns the specified node template.
⊞ GetIamPolicy NodeTemplatesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert NodeTemplatesCreates a NodeTemplate resource in the specified project using the data included in the request.
⊞ List NodeTemplatesRetrieves a list of node templates available to the specified project.
⊞ SetIamPolicy NodeTemplatesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions NodeTemplatesReturns permissions that a caller has on the specified resource.
⊞ AggregatedList NodeTypesRetrieves an aggregated list of node types.
⊞ Get NodeTypesReturns the specified node type.
⊞ List NodeTypesRetrieves a list of node types available to the specified project.
⊞ AggregatedList PacketMirroringsRetrieves an aggregated list of packetMirrorings.
⊞ Delete PacketMirroringsDeletes the specified PacketMirroring resource.
⊞ Get PacketMirroringsReturns the specified PacketMirroring resource.
⊞ Insert PacketMirroringsCreates a PacketMirroring resource in the specified project and region using the data included in the request.
⊞ List PacketMirroringsRetrieves a list of PacketMirroring resources available to the specified project and region.
⊞ Patch PacketMirroringsPatches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ TestIamPermissions PacketMirroringsReturns permissions that a caller has on the specified resource.
⊞ DisableXpnHost ProjectsDisable this project as a shared VPC host project.
⊞ DisableXpnResource ProjectsDisable a service resource (also known as service project) associated with this host project.
⊞ EnableXpnHost ProjectsEnable this project as a shared VPC host project.
⊞ EnableXpnResource ProjectsEnable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
⊞ Get ProjectsReturns the specified Project resource. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
⊞ GetXpnHost ProjectsGets the shared VPC host project that this project links to. May be empty if no link exists.
⊞ GetXpnResources ProjectsGets service resources (a.k.a service project) associated with this host project.
⊞ ListXpnHosts ProjectsLists all shared VPC host projects visible to the user in an organization.
⊞ MoveDisk ProjectsMoves a persistent disk from one zone to another.
⊞ MoveInstance ProjectsMoves an instance and its attached persistent disks from one zone to another. *Note*: Moving VMs or disks by using this method might cause unexpected behavior. For more information, see the [known issue](/compute/docs/troubleshooting/known-issues#moving_vms_or_disks_using_the_moveinstance_api_or_the_causes_unexpected_behavior). [Deprecated] This method is deprecated. See [moving instance across zones](/compute/docs/instances/moving-instance-across-zones) instead.
⊞ SetCommonInstanceMetadata ProjectsSets metadata common to all instances within the specified project using the data included in the request.
⊞ SetDefaultNetworkTier ProjectsSets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
⊞ SetUsageExportBucket ProjectsEnables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
⊞ Announce PublicAdvertisedPrefixesAnnounces the specified PublicAdvertisedPrefix
⊞ Delete PublicAdvertisedPrefixesDeletes the specified PublicAdvertisedPrefix
⊞ Get PublicAdvertisedPrefixesReturns the specified PublicAdvertisedPrefix resource.
⊞ Insert PublicAdvertisedPrefixesCreates a PublicAdvertisedPrefix in the specified project using the parameters that are included in the request.
⊞ List PublicAdvertisedPrefixesLists the PublicAdvertisedPrefixes for a project.
⊞ Patch PublicAdvertisedPrefixesPatches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ Withdraw PublicAdvertisedPrefixesWithdraws the specified PublicAdvertisedPrefix
⊞ AggregatedList PublicDelegatedPrefixesLists all PublicDelegatedPrefix resources owned by the specific project across all scopes.
⊞ Announce PublicDelegatedPrefixesAnnounces the specified PublicDelegatedPrefix in the given region.
⊞ Delete PublicDelegatedPrefixesDeletes the specified PublicDelegatedPrefix in the given region.
⊞ Get PublicDelegatedPrefixesReturns the specified PublicDelegatedPrefix resource in the given region.
⊞ Insert PublicDelegatedPrefixesCreates a PublicDelegatedPrefix in the specified project in the given region using the parameters that are included in the request.
⊞ List PublicDelegatedPrefixesLists the PublicDelegatedPrefixes for a project in the given region.
⊞ Patch PublicDelegatedPrefixesPatches the specified PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ Withdraw PublicDelegatedPrefixesWithdraws the specified PublicDelegatedPrefix in the given region.
⊞ Delete RegionAutoscalersDeletes the specified autoscaler.
⊞ Get RegionAutoscalersReturns the specified autoscaler.
⊞ Insert RegionAutoscalersCreates an autoscaler in the specified project using the data included in the request.
⊞ List RegionAutoscalersRetrieves a list of autoscalers contained within the specified region.
⊞ Patch RegionAutoscalersUpdates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ Update RegionAutoscalersUpdates an autoscaler in the specified project using the data included in the request.
⊞ Delete RegionBackendServicesDeletes the specified regional BackendService resource.
⊞ Get RegionBackendServicesReturns the specified regional BackendService resource.
⊞ GetHealth RegionBackendServicesGets the most recent health check results for this regional BackendService.
⊞ GetIamPolicy RegionBackendServicesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert RegionBackendServicesCreates a regional BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview.
⊞ List RegionBackendServicesRetrieves the list of regional BackendService resources available to the specified project in the given region.
⊞ ListUsable RegionBackendServicesRetrieves an aggregated list of all usable backend services in the specified project in the given region.
⊞ Patch RegionBackendServicesUpdates the specified regional BackendService resource with the data included in the request. For more information, see Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ SetIamPolicy RegionBackendServicesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ SetSecurityPolicy RegionBackendServicesSets the Google Cloud Armor security policy for the specified backend service. For more information, see Google Cloud Armor Overview
⊞ TestIamPermissions RegionBackendServicesReturns permissions that a caller has on the specified resource.
⊞ Update RegionBackendServicesUpdates the specified regional BackendService resource with the data included in the request. For more information, see Backend services overview .
⊞ AggregatedList RegionCommitmentsRetrieves an aggregated list of commitments by region.
⊞ Get RegionCommitmentsReturns the specified commitment resource.
⊞ Insert RegionCommitmentsCreates a commitment in the specified project using the data included in the request.
⊞ List RegionCommitmentsRetrieves a list of commitments contained within the specified region.
⊞ Update RegionCommitmentsUpdates the specified commitment with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: auto_renew.
⊞ Get RegionDiskTypesReturns the specified regional disk type.
⊞ List RegionDiskTypesRetrieves a list of regional disk types available to the specified project.
⊞ AddResourcePolicies RegionDisksAdds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
⊞ BulkInsert RegionDisksBulk create a set of disks.
⊞ CreateSnapshot RegionDisksCreates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating snapshots in a project different from the source disk project.
⊞ Delete RegionDisksDeletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
⊞ Get RegionDisksReturns a specified regional persistent disk.
⊞ GetIamPolicy RegionDisksGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert RegionDisksCreates a persistent regional disk in the specified project using the data included in the request.
⊞ List RegionDisksRetrieves the list of persistent disks contained within the specified region.
⊞ RemoveResourcePolicies RegionDisksRemoves resource policies from a regional disk.
⊞ Resize RegionDisksResizes the specified regional persistent disk.
⊞ SetIamPolicy RegionDisksSets the access control policy on the specified resource. Replaces any existing policy.
⊞ SetLabels RegionDisksSets the labels on the target regional disk.
⊞ StartAsyncReplication RegionDisksStarts asynchronous replication. Must be invoked on the primary disk.
⊞ StopAsyncReplication RegionDisksStops asynchronous replication. Can be invoked either on the primary or on the secondary disk.
⊞ StopGroupAsyncReplication RegionDisksStops asynchronous replication for a consistency group of disks. Can be invoked either in the primary or secondary scope.
⊞ TestIamPermissions RegionDisksReturns permissions that a caller has on the specified resource.
⊞ Update RegionDisksUpdate the specified disk with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.
⊞ Delete RegionHealthCheckServicesDeletes the specified regional HealthCheckService.
⊞ Get RegionHealthCheckServicesReturns the specified regional HealthCheckService resource.
⊞ Insert RegionHealthCheckServicesCreates a regional HealthCheckService resource in the specified project and region using the data included in the request.
⊞ List RegionHealthCheckServicesLists all the HealthCheckService resources that have been configured for the specified project in the given region.
⊞ Patch RegionHealthCheckServicesUpdates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ Delete RegionHealthChecksDeletes the specified HealthCheck resource.
⊞ Get RegionHealthChecksReturns the specified HealthCheck resource.
⊞ Insert RegionHealthChecksCreates a HealthCheck resource in the specified project using the data included in the request.
⊞ List RegionHealthChecksRetrieves the list of HealthCheck resources available to the specified project.
⊞ Patch RegionHealthChecksUpdates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ Update RegionHealthChecksUpdates a HealthCheck resource in the specified project using the data included in the request.
⊞ AbandonInstances RegionInstanceGroupManagersFlags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
⊞ ApplyUpdatesToInstances RegionInstanceGroupManagersApply updates to selected instances the managed instance group.
⊞ CreateInstances RegionInstanceGroupManagersCreates instances with per-instance configurations in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
⊞ Delete RegionInstanceGroupManagersDeletes the specified managed instance group and all of the instances in that group.
⊞ DeleteInstances RegionInstanceGroupManagersFlags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
⊞ DeletePerInstanceConfigs RegionInstanceGroupManagersDeletes selected per-instance configurations for the managed instance group.
⊞ Get RegionInstanceGroupManagersReturns all of the details about the specified managed instance group.
⊞ Insert RegionInstanceGroupManagersCreates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method. A regional managed instance group can contain up to 2000 instances.
⊞ List RegionInstanceGroupManagersRetrieves the list of managed instance groups that are contained within the specified region.
⊞ ListErrors RegionInstanceGroupManagersLists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.
⊞ ListManagedInstances RegionInstanceGroupManagersLists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported. The `pageToken` query parameter is supported only in the alpha and beta API and only if the group's `listManagedInstancesResults` field is set to `PAGINATED`.
⊞ ListPerInstanceConfigs RegionInstanceGroupManagersLists all of the per-instance configurations defined for the managed instance group. The orderBy query parameter is not supported.
⊞ Patch RegionInstanceGroupManagersUpdates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
⊞ PatchPerInstanceConfigs RegionInstanceGroupManagersInserts or patches per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
⊞ RecreateInstances RegionInstanceGroupManagersFlags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field; for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
⊞ Resize RegionInstanceGroupManagersChanges the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances. The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
⊞ SetInstanceTemplate RegionInstanceGroupManagersSets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
⊞ SetTargetPools RegionInstanceGroupManagersModifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
⊞ UpdatePerInstanceConfigs RegionInstanceGroupManagersInserts or updates per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
⊞ Get RegionInstanceGroupsReturns the specified instance group resource.
⊞ List RegionInstanceGroupsRetrieves the list of instance group resources contained within the specified region.
⊞ ListInstances RegionInstanceGroupsLists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.
⊞ SetNamedPorts RegionInstanceGroupsSets the named ports for the specified regional instance group.
⊞ Delete RegionInstanceTemplatesDeletes the specified instance template. Deleting an instance template is permanent and cannot be undone.
⊞ Get RegionInstanceTemplatesReturns the specified instance template.
⊞ Insert RegionInstanceTemplatesCreates an instance template in the specified project and region using the global instance template whose URL is included in the request.
⊞ List RegionInstanceTemplatesRetrieves a list of instance templates that are contained within the specified project and region.
⊞ BulkInsert RegionInstancesCreates multiple instances in a given region. Count specifies the number of instances to create.
⊞ AttachNetworkEndpoints RegionNetworkEndpointGroupsAttach a list of network endpoints to the specified network endpoint group.
⊞ Delete RegionNetworkEndpointGroupsDeletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.
⊞ DetachNetworkEndpoints RegionNetworkEndpointGroupsDetach the network endpoint from the specified network endpoint group.
⊞ Get RegionNetworkEndpointGroupsReturns the specified network endpoint group.
⊞ Insert RegionNetworkEndpointGroupsCreates a network endpoint group in the specified project using the parameters that are included in the request.
⊞ List RegionNetworkEndpointGroupsRetrieves the list of regional network endpoint groups available to the specified project in the given region.
⊞ ListNetworkEndpoints RegionNetworkEndpointGroupsLists the network endpoints in the specified network endpoint group.
⊞ AddAssociation RegionNetworkFirewallPoliciesInserts an association for the specified network firewall policy.
⊞ AddRule RegionNetworkFirewallPoliciesInserts a rule into a network firewall policy.
⊞ CloneRules RegionNetworkFirewallPoliciesCopies rules to the specified network firewall policy.
⊞ Delete RegionNetworkFirewallPoliciesDeletes the specified network firewall policy.
⊞ Get RegionNetworkFirewallPoliciesReturns the specified network firewall policy.
⊞ GetAssociation RegionNetworkFirewallPoliciesGets an association with the specified name.
⊞ GetEffectiveFirewalls RegionNetworkFirewallPoliciesReturns the effective firewalls on a given network.
⊞ GetIamPolicy RegionNetworkFirewallPoliciesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ GetRule RegionNetworkFirewallPoliciesGets a rule of the specified priority.
⊞ Insert RegionNetworkFirewallPoliciesCreates a new network firewall policy in the specified project and region.
⊞ List RegionNetworkFirewallPoliciesLists all the network firewall policies that have been configured for the specified project in the given region.
⊞ Patch RegionNetworkFirewallPoliciesPatches the specified network firewall policy.
⊞ PatchRule RegionNetworkFirewallPoliciesPatches a rule of the specified priority.
⊞ RemoveAssociation RegionNetworkFirewallPoliciesRemoves an association for the specified network firewall policy.
⊞ RemoveRule RegionNetworkFirewallPoliciesDeletes a rule of the specified priority.
⊞ SetIamPolicy RegionNetworkFirewallPoliciesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions RegionNetworkFirewallPoliciesReturns permissions that a caller has on the specified resource.
⊞ Delete RegionNotificationEndpointsDeletes the specified NotificationEndpoint in the given region
⊞ Get RegionNotificationEndpointsReturns the specified NotificationEndpoint resource in the given region.
⊞ Insert RegionNotificationEndpointsCreate a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
⊞ List RegionNotificationEndpointsLists the NotificationEndpoints for a project in the given region.
⊞ Delete RegionOperationsDeletes the specified region-specific Operations resource.
⊞ Get RegionOperationsRetrieves the specified region-specific Operations resource.
⊞ List RegionOperationsRetrieves a list of Operation resources contained within the specified region.
⊞ Wait RegionOperationsWaits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
⊞ AddRule RegionSecurityPoliciesInserts a rule into a security policy.
⊞ Delete RegionSecurityPoliciesDeletes the specified policy.
⊞ Get RegionSecurityPoliciesList all of the ordered rules present in a single specified policy.
⊞ GetRule RegionSecurityPoliciesGets a rule at the specified priority.
⊞ Insert RegionSecurityPoliciesCreates a new policy in the specified project using the data included in the request.
⊞ List RegionSecurityPoliciesList all the policies that have been configured for the specified project and region.
⊞ Patch RegionSecurityPoliciesPatches the specified policy with the data included in the request. To clear fields in the policy, leave the fields empty and specify them in the updateMask. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
⊞ PatchRule RegionSecurityPoliciesPatches a rule at the specified priority. To clear fields in the rule, leave the fields empty and specify them in the updateMask.
⊞ RemoveRule RegionSecurityPoliciesDeletes a rule at the specified priority.
⊞ Delete RegionSslCertificatesDeletes the specified SslCertificate resource in the region.
⊞ Get RegionSslCertificatesReturns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
⊞ Insert RegionSslCertificatesCreates a SslCertificate resource in the specified project and region using the data included in the request
⊞ List RegionSslCertificatesRetrieves the list of SslCertificate resources available to the specified project in the specified region.
⊞ Delete RegionSslPoliciesDeletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
⊞ Get RegionSslPoliciesLists all of the ordered rules present in a single specified policy.
⊞ Insert RegionSslPoliciesCreates a new policy in the specified project and region using the data included in the request.
⊞ List RegionSslPoliciesLists all the SSL policies that have been configured for the specified project and region.
⊞ ListAvailableFeatures RegionSslPoliciesLists all features that can be specified in the SSL policy when using custom profile.
⊞ Patch RegionSslPoliciesPatches the specified SSL policy with the data included in the request.
⊞ Delete RegionTargetHttpProxiesDeletes the specified TargetHttpProxy resource.
⊞ Get RegionTargetHttpProxiesReturns the specified TargetHttpProxy resource in the specified region.
⊞ Insert RegionTargetHttpProxiesCreates a TargetHttpProxy resource in the specified project and region using the data included in the request.
⊞ List RegionTargetHttpProxiesRetrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
⊞ SetUrlMap RegionTargetHttpProxiesChanges the URL map for TargetHttpProxy.
⊞ Delete RegionTargetHttpsProxiesDeletes the specified TargetHttpsProxy resource.
⊞ Get RegionTargetHttpsProxiesReturns the specified TargetHttpsProxy resource in the specified region.
⊞ Insert RegionTargetHttpsProxiesCreates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
⊞ List RegionTargetHttpsProxiesRetrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
⊞ Patch RegionTargetHttpsProxiesPatches the specified regional TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ SetSslCertificates RegionTargetHttpsProxiesReplaces SslCertificates for TargetHttpsProxy.
⊞ SetUrlMap RegionTargetHttpsProxiesChanges the URL map for TargetHttpsProxy.
⊞ Delete RegionTargetTcpProxiesDeletes the specified TargetTcpProxy resource.
⊞ Get RegionTargetTcpProxiesReturns the specified TargetTcpProxy resource.
⊞ Insert RegionTargetTcpProxiesCreates a TargetTcpProxy resource in the specified project and region using the data included in the request.
⊞ List RegionTargetTcpProxiesRetrieves a list of TargetTcpProxy resources available to the specified project in a given region.
⊞ Delete RegionUrlMapsDeletes the specified UrlMap resource.
⊞ Get RegionUrlMapsReturns the specified UrlMap resource.
⊞ Insert RegionUrlMapsCreates a UrlMap resource in the specified project using the data included in the request.
⊞ List RegionUrlMapsRetrieves the list of UrlMap resources available to the specified project in the specified region.
⊞ Patch RegionUrlMapsPatches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ Update RegionUrlMapsUpdates the specified UrlMap resource with the data included in the request.
⊞ Validate RegionUrlMapsRuns static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
⊞ Get RegionsReturns the specified Region resource. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
⊞ List RegionsRetrieves the list of region resources available to the specified project. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `items.quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
⊞ AggregatedList ReservationsRetrieves an aggregated list of reservations.
⊞ Delete ReservationsDeletes the specified reservation.
⊞ Get ReservationsRetrieves information about the specified reservation.
⊞ GetIamPolicy ReservationsGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert ReservationsCreates a new reservation. For more information, read Reserving zonal resources.
⊞ List ReservationsA list of all the reservations that have been configured for the specified project in specified zone.
⊞ Resize ReservationsResizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
⊞ SetIamPolicy ReservationsSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions ReservationsReturns permissions that a caller has on the specified resource.
⊞ Update ReservationsUpdate share settings of the reservation.
⊞ AggregatedList ResourcePoliciesRetrieves an aggregated list of resource policies.
⊞ Delete ResourcePoliciesDeletes the specified resource policy.
⊞ Get ResourcePoliciesRetrieves all information of the specified resource policy.
⊞ GetIamPolicy ResourcePoliciesGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert ResourcePoliciesCreates a new resource policy.
⊞ List ResourcePoliciesA list all the resource policies that have been configured for the specified project in specified region.
⊞ Patch ResourcePoliciesModify the specified resource policy.
⊞ SetIamPolicy ResourcePoliciesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions ResourcePoliciesReturns permissions that a caller has on the specified resource.
⊞ AggregatedList RoutersRetrieves an aggregated list of routers.
⊞ Delete RoutersDeletes the specified Router resource.
⊞ Get RoutersReturns the specified Router resource.
⊞ GetNatIpInfo RoutersRetrieves runtime NAT IP information.
⊞ GetNatMappingInfo RoutersRetrieves runtime Nat mapping information of VM endpoints.
⊞ GetRouterStatus RoutersRetrieves runtime information of the specified router.
⊞ Insert RoutersCreates a Router resource in the specified project and region using the data included in the request.
⊞ List RoutersRetrieves a list of Router resources available to the specified project.
⊞ Patch RoutersPatches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ Preview RoutersPreview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
⊞ Update RoutersUpdates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
⊞ Delete RoutesDeletes the specified Route resource.
⊞ Get RoutesReturns the specified Route resource.
⊞ Insert RoutesCreates a Route resource in the specified project using the data included in the request.
⊞ List RoutesRetrieves the list of Route resources available to the specified project.
⊞ AddRule SecurityPoliciesInserts a rule into a security policy.
⊞ AggregatedList SecurityPoliciesRetrieves the list of all SecurityPolicy resources, regional and global, available to the specified project.
⊞ Delete SecurityPoliciesDeletes the specified policy.
⊞ Get SecurityPoliciesList all of the ordered rules present in a single specified policy.
⊞ GetRule SecurityPoliciesGets a rule at the specified priority.
⊞ Insert SecurityPoliciesCreates a new policy in the specified project using the data included in the request.
⊞ List SecurityPoliciesList all the policies that have been configured for the specified project.
⊞ ListPreconfiguredExpressionSets SecurityPoliciesGets the current list of preconfigured Web Application Firewall (WAF) expressions.
⊞ Patch SecurityPoliciesPatches the specified policy with the data included in the request. To clear fields in the policy, leave the fields empty and specify them in the updateMask. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
⊞ PatchRule SecurityPoliciesPatches a rule at the specified priority. To clear fields in the rule, leave the fields empty and specify them in the updateMask.
⊞ RemoveRule SecurityPoliciesDeletes a rule at the specified priority.
⊞ SetLabels SecurityPoliciesSets the labels on a security policy. To learn more about labels, read the Labeling Resources documentation.
⊞ AggregatedList ServiceAttachmentsRetrieves the list of all ServiceAttachment resources, regional and global, available to the specified project.
⊞ Delete ServiceAttachmentsDeletes the specified ServiceAttachment in the given scope
⊞ Get ServiceAttachmentsReturns the specified ServiceAttachment resource in the given scope.
⊞ GetIamPolicy ServiceAttachmentsGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert ServiceAttachmentsCreates a ServiceAttachment in the specified project in the given scope using the parameters that are included in the request.
⊞ List ServiceAttachmentsLists the ServiceAttachments for a project in the given scope.
⊞ Patch ServiceAttachmentsPatches the specified ServiceAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ SetIamPolicy ServiceAttachmentsSets the access control policy on the specified resource. Replaces any existing policy.
⊞ TestIamPermissions ServiceAttachmentsReturns permissions that a caller has on the specified resource.
⊞ Get SnapshotSettingsGet snapshot settings.
⊞ Patch SnapshotSettingsPatch snapshot settings.
⊞ Delete SnapshotsDeletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot. For more information, see Deleting snapshots.
⊞ Get SnapshotsReturns the specified Snapshot resource.
⊞ GetIamPolicy SnapshotsGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert SnapshotsCreates a snapshot in the specified project using the data included in the request. For regular snapshot creation, consider using this method instead of disks.createSnapshot, as this method supports more features, such as creating snapshots in a project different from the source disk project.
⊞ List SnapshotsRetrieves the list of Snapshot resources contained within the specified project.
⊞ SetIamPolicy SnapshotsSets the access control policy on the specified resource. Replaces any existing policy.
⊞ SetLabels SnapshotsSets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
⊞ TestIamPermissions SnapshotsReturns permissions that a caller has on the specified resource.
⊞ AggregatedList SslCertificatesRetrieves the list of all SslCertificate resources, regional and global, available to the specified project.
⊞ Delete SslCertificatesDeletes the specified SslCertificate resource.
⊞ Get SslCertificatesReturns the specified SslCertificate resource.
⊞ Insert SslCertificatesCreates a SslCertificate resource in the specified project using the data included in the request.
⊞ List SslCertificatesRetrieves the list of SslCertificate resources available to the specified project.
⊞ AggregatedList SslPoliciesRetrieves the list of all SslPolicy resources, regional and global, available to the specified project.
⊞ Delete SslPoliciesDeletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
⊞ Get SslPoliciesLists all of the ordered rules present in a single specified policy.
⊞ Insert SslPoliciesReturns the specified SSL policy resource.
⊞ List SslPoliciesLists all the SSL policies that have been configured for the specified project.
⊞ ListAvailableFeatures SslPoliciesLists all features that can be specified in the SSL policy when using custom profile.
⊞ Patch SslPoliciesPatches the specified SSL policy with the data included in the request.
⊞ AggregatedList SubnetworksRetrieves an aggregated list of subnetworks.
⊞ Delete SubnetworksDeletes the specified subnetwork.
⊞ ExpandIpCidrRange SubnetworksExpands the IP CIDR range of the subnetwork to a specified value.
⊞ Get SubnetworksReturns the specified subnetwork.
⊞ GetIamPolicy SubnetworksGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert SubnetworksCreates a subnetwork in the specified project using the data included in the request.
⊞ List SubnetworksRetrieves a list of subnetworks available to the specified project.
⊞ ListUsable SubnetworksRetrieves an aggregated list of all usable subnetworks in the project.
⊞ Patch SubnetworksPatches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
⊞ SetIamPolicy SubnetworksSets the access control policy on the specified resource. Replaces any existing policy.
⊞ SetPrivateIpGoogleAccess SubnetworksSet whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
⊞ TestIamPermissions SubnetworksReturns permissions that a caller has on the specified resource.
⊞ Delete TargetGrpcProxiesDeletes the specified TargetGrpcProxy in the given scope
⊞ Get TargetGrpcProxiesReturns the specified TargetGrpcProxy resource in the given scope.
⊞ Insert TargetGrpcProxiesCreates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.
⊞ List TargetGrpcProxiesLists the TargetGrpcProxies for a project in the given scope.
⊞ Patch TargetGrpcProxiesPatches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ AggregatedList TargetHttpProxiesRetrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.
⊞ Delete TargetHttpProxiesDeletes the specified TargetHttpProxy resource.
⊞ Get TargetHttpProxiesReturns the specified TargetHttpProxy resource.
⊞ Insert TargetHttpProxiesCreates a TargetHttpProxy resource in the specified project using the data included in the request.
⊞ List TargetHttpProxiesRetrieves the list of TargetHttpProxy resources available to the specified project.
⊞ Patch TargetHttpProxiesPatches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ SetUrlMap TargetHttpProxiesChanges the URL map for TargetHttpProxy.
⊞ AggregatedList TargetHttpsProxiesRetrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
⊞ Delete TargetHttpsProxiesDeletes the specified TargetHttpsProxy resource.
⊞ Get TargetHttpsProxiesReturns the specified TargetHttpsProxy resource.
⊞ Insert TargetHttpsProxiesCreates a TargetHttpsProxy resource in the specified project using the data included in the request.
⊞ List TargetHttpsProxiesRetrieves the list of TargetHttpsProxy resources available to the specified project.
⊞ Patch TargetHttpsProxiesPatches the specified TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
⊞ SetCertificateMap TargetHttpsProxiesChanges the Certificate Map for TargetHttpsProxy.
⊞ SetQuicOverride TargetHttpsProxiesSets the QUIC override policy for TargetHttpsProxy.
⊞ SetSslCertificates TargetHttpsProxiesReplaces SslCertificates for TargetHttpsProxy.
⊞ SetSslPolicy TargetHttpsProxiesSets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
⊞ SetUrlMap TargetHttpsProxiesChanges the URL map for TargetHttpsProxy.
⊞ AggregatedList TargetInstancesRetrieves an aggregated list of target instances.
⊞ Delete TargetInstancesDeletes the specified TargetInstance resource.
⊞ Get TargetInstancesReturns the specified TargetInstance resource.
⊞ Insert TargetInstancesCreates a TargetInstance resource in the specified project and zone using the data included in the request.
⊞ List TargetInstancesRetrieves a list of TargetInstance resources available to the specified project and zone.
⊞ SetSecurityPolicy TargetInstancesSets the Google Cloud Armor security policy for the specified target instance. For more information, see Google Cloud Armor Overview
⊞ AddHealthCheck TargetPoolsAdds health check URLs to a target pool.
⊞ AddInstance TargetPoolsAdds an instance to a target pool.
⊞ AggregatedList TargetPoolsRetrieves an aggregated list of target pools.
⊞ Delete TargetPoolsDeletes the specified target pool.
⊞ Get TargetPoolsReturns the specified target pool.
⊞ GetHealth TargetPoolsGets the most recent health check results for each IP for the instance that is referenced by the given target pool.
⊞ Insert TargetPoolsCreates a target pool in the specified project and region using the data included in the request.
⊞ List TargetPoolsRetrieves a list of target pools available to the specified project and region.
⊞ RemoveHealthCheck TargetPoolsRemoves health check URL from a target pool.
⊞ RemoveInstance TargetPoolsRemoves instance URL from a target pool.
⊞ SetBackup TargetPoolsChanges a backup target pool's configurations.
⊞ SetSecurityPolicy TargetPoolsSets the Google Cloud Armor security policy for the specified target pool. For more information, see Google Cloud Armor Overview
⊞ Delete TargetSslProxiesDeletes the specified TargetSslProxy resource.
⊞ Get TargetSslProxiesReturns the specified TargetSslProxy resource.
⊞ Insert TargetSslProxiesCreates a TargetSslProxy resource in the specified project using the data included in the request.
⊞ List TargetSslProxiesRetrieves the list of TargetSslProxy resources available to the specified project.
⊞ SetBackendService TargetSslProxiesChanges the BackendService for TargetSslProxy.
⊞ SetCertificateMap TargetSslProxiesChanges the Certificate Map for TargetSslProxy.
⊞ SetProxyHeader TargetSslProxiesChanges the ProxyHeaderType for TargetSslProxy.
⊞ SetSslCertificates TargetSslProxiesChanges SslCertificates for TargetSslProxy.
⊞ SetSslPolicy TargetSslProxiesSets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.
⊞ AggregatedList TargetTcpProxiesRetrieves the list of all TargetTcpProxy resources, regional and global, available to the specified project.
⊞ Delete TargetTcpProxiesDeletes the specified TargetTcpProxy resource.
⊞ Get TargetTcpProxiesReturns the specified TargetTcpProxy resource.
⊞ Insert TargetTcpProxiesCreates a TargetTcpProxy resource in the specified project using the data included in the request.
⊞ List TargetTcpProxiesRetrieves the list of TargetTcpProxy resources available to the specified project.
⊞ SetBackendService TargetTcpProxiesChanges the BackendService for TargetTcpProxy.
⊞ SetProxyHeader TargetTcpProxiesChanges the ProxyHeaderType for TargetTcpProxy.
⊞ AggregatedList TargetVpnGatewaysRetrieves an aggregated list of target VPN gateways.
⊞ Delete TargetVpnGatewaysDeletes the specified target VPN gateway.
⊞ Get TargetVpnGatewaysReturns the specified target VPN gateway.
⊞ Insert TargetVpnGatewaysCreates a target VPN gateway in the specified project and region using the data included in the request.
⊞ List TargetVpnGatewaysRetrieves a list of target VPN gateways available to the specified project and region.
⊞ SetLabels TargetVpnGatewaysSets the labels on a TargetVpnGateway. To learn more about labels, read the Labeling Resources documentation.
⊞ AggregatedList UrlMapsRetrieves the list of all UrlMap resources, regional and global, available to the specified project.
⊞ Delete UrlMapsDeletes the specified UrlMap resource.
⊞ Get UrlMapsReturns the specified UrlMap resource.
⊞ Insert UrlMapsCreates a UrlMap resource in the specified project using the data included in the request.
⊞ InvalidateCache UrlMapsInitiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap. For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
⊞ List UrlMapsRetrieves the list of UrlMap resources available to the specified project.
⊞ Patch UrlMapsPatches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
⊞ Update UrlMapsUpdates the specified UrlMap resource with the data included in the request.
⊞ Validate UrlMapsRuns static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
⊞ AggregatedList VpnGatewaysRetrieves an aggregated list of VPN gateways.
⊞ Delete VpnGatewaysDeletes the specified VPN gateway.
⊞ Get VpnGatewaysReturns the specified VPN gateway.
⊞ GetStatus VpnGatewaysReturns the status for the specified VPN gateway.
⊞ Insert VpnGatewaysCreates a VPN gateway in the specified project and region using the data included in the request.
⊞ List VpnGatewaysRetrieves a list of VPN gateways available to the specified project and region.
⊞ SetLabels VpnGatewaysSets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
⊞ TestIamPermissions VpnGatewaysReturns permissions that a caller has on the specified resource.
⊞ AggregatedList VpnTunnelsRetrieves an aggregated list of VPN tunnels.
⊞ Delete VpnTunnelsDeletes the specified VpnTunnel resource.
⊞ Get VpnTunnelsReturns the specified VpnTunnel resource.
⊞ Insert VpnTunnelsCreates a VpnTunnel resource in the specified project and region using the data included in the request.
⊞ List VpnTunnelsRetrieves a list of VpnTunnel resources contained in the specified project and region.
⊞ SetLabels VpnTunnelsSets the labels on a VpnTunnel. To learn more about labels, read the Labeling Resources documentation.
⊞ Delete ZoneOperationsDeletes the specified zone-specific Operations resource.
⊞ Get ZoneOperationsRetrieves the specified zone-specific Operations resource.
⊞ List ZoneOperationsRetrieves a list of Operation resources contained within the specified zone.
⊞ Wait ZoneOperationsWaits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method waits for no more than the 2 minutes and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
⊞ Get ZonesReturns the specified Zone resource.
⊞ List ZonesRetrieves the list of Zone resources available to the specified project.
API Keys API v2
⊞ LookupKey KeysFind the parent project and resource name of the API key that matches the key string in the request. If the API key has been purged, resource name will not be set. The service account must have the `apikeys.keys.lookup` permission on the parent project.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsCreates a new API key. NOTE: Key is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsDeletes an API key. Deleted key can be retrieved within 30 days of deletion. Afterward, key will be purged from the project. NOTE: Key is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsGets the metadata for an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsGet the key string for an API key. NOTE: Key is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsLists the API keys owned by a project. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsPatches the modifiable fields of an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsUndeletes an API key which was deleted within 30 days. NOTE: Key is a global resource; hence the only supported value for location is `global`.
Cloud Asset API v1
⊞ Undefined AnalyzeIamPolicyAnalyzes IAM policies to answer which identities have what accesses on which resources.
⊞ Undefined AnalyzeIamPolicyLongrunningAnalyzes IAM policies asynchronously to answer which identities have what accesses on which resources, and writes the analysis results to a Google Cloud Storage or a BigQuery destination. For Cloud Storage destination, the output format is the JSON format that represents a AnalyzeIamPolicyResponse. This method implements the google.longrunning.Operation, which allows you to track the operation status. We recommend intervals of at least 2 seconds with exponential backoff retry to poll the operation result. The metadata contains the metadata for the long-running operation.
⊞ Undefined AnalyzeMoveAnalyze moving a resource to a specified destination without kicking off the actual move. The analysis is best effort depending on the user's permissions of viewing different hierarchical policies and configurations. The policies and configuration are subject to change before the actual resource migration takes place.
⊞ Undefined AnalyzeOrgPoliciesAnalyzes organization policies under a scope.
⊞ Undefined AnalyzeOrgPolicyGovernedAssetsAnalyzes organization policies governed assets (Google Cloud resources or policies) under a scope. This RPC supports custom constraints and the following 10 canned constraints: * storage.uniformBucketLevelAccess * iam.disableServiceAccountKeyCreation * iam.allowedPolicyMemberDomains * compute.vmExternalIpAccess * appengine.enforceServiceAccountActAsCheck * gcp.resourceLocations * compute.trustedImageProjects * compute.skipDefaultNetworkCreation * compute.requireOsLogin * compute.disableNestedVirtualization This RPC only returns either resources of types supported by [searchable asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types), or IAM policies.
⊞ Undefined AnalyzeOrgPolicyGovernedContainersAnalyzes organization policies governed containers (projects, folders or organization) under a scope.
⊞ List AssetsLists assets with time and resource types and returns paged results in response.
⊞ Undefined BatchGetAssetsHistoryBatch gets the update history of assets that overlap a time window. For IAM_POLICY content, this API outputs history when the asset and its attached IAM POLICY both exist. This can create gaps in the output history. Otherwise, this API outputs history with asset in both non-delete or deleted status. If a specified asset does not exist, this API returns an INVALID_ARGUMENT error.
⊞ BatchGet EffectiveIamPoliciesGets effective IAM policies for a batch of resources.
⊞ Undefined ExportAssetsExports assets with time and resource types to a given Cloud Storage location/BigQuery table. For Cloud Storage location destinations, the output format is newline-delimited JSON. Each line represents a google.cloud.asset.v1.Asset in the JSON format; for BigQuery table destinations, the output table stores the fields in asset Protobuf as columns. This API implements the google.longrunning.Operation API, which allows you to keep track of the export. We recommend intervals of at least 2 seconds with exponential retry to poll the export operation result. For regular-size resource parent, the export operation usually finishes within 5 minutes.
⊞ Create FeedsCreates a feed in a parent project/folder/organization to listen to its asset updates.
⊞ Delete FeedsDeletes an asset feed.
⊞ Get FeedsGets details about an asset feed.
⊞ List FeedsLists all asset feeds in a parent project/folder/organization.
⊞ Patch FeedsUpdates an asset feed configuration.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Undefined QueryAssetsIssue a job that queries assets using a SQL statement compatible with [BigQuery SQL](https://cloud.google.com/bigquery/docs/introduction-sql). If the query execution finishes within timeout and there's no pagination, the full query results will be returned in the `QueryAssetsResponse`. Otherwise, full query results can be obtained by issuing extra requests with the `job_reference` from the a previous `QueryAssets` call. Note, the query result has approximately 10 GB limitation enforced by [BigQuery](https://cloud.google.com/bigquery/docs/best-practices-performance-output). Queries return larger results will result in errors.
⊞ Create SavedQueriesCreates a saved query in a parent project/folder/organization.
⊞ Delete SavedQueriesDeletes a saved query.
⊞ Get SavedQueriesGets details about a saved query.
⊞ List SavedQueriesLists all saved queries in a parent project/folder/organization.
⊞ Patch SavedQueriesUpdates a saved query.
⊞ Undefined SearchAllIamPoliciesSearches all IAM policies within the specified scope, such as a project, folder, or organization. The caller must be granted the `cloudasset.assets.searchAllIamPolicies` permission on the desired scope, otherwise the request will be rejected.
⊞ Undefined SearchAllResourcesSearches all Google Cloud resources within the specified scope, such as a project, folder, or organization. The caller must be granted the `cloudasset.assets.searchAllResources` permission on the desired scope, otherwise the request will be rejected.
Connectors API v2
⊞ Locations ProjectsExecutes an action with the name specified in the request. The input parameters for executing the action are passed through the body of the ExecuteAction request.
⊞ Locations ProjectsGets the schema of the given action.
⊞ Locations ProjectsGets the schema of all the actions supported by the connector.
⊞ Locations ProjectsCreates a new entity row of the specified entity type in the external system. The field values for creating the row are contained in the body of the request. The response message contains a `Entity` message object returned as a response by the external system.
⊞ Locations ProjectsDeletes an existing entity row matching the entity type and entity id specified in the request.
⊞ Locations ProjectsDeletes entities based on conditions specified in the request and not on entity id.
⊞ Locations ProjectsGets a single entity row matching the entity type and entity id specified in the request.
⊞ Locations ProjectsLists entity rows of a particular entity type contained in the request. Note: 1. Currently, only max of one 'sort_by' column is supported. 2. If no 'sort_by' column is provided, the primary key of the table is used. If zero or more than one primary key is available, we default to the unpaginated list entities logic which only returns the first page. 3. The values of the 'sort_by' columns must uniquely identify an entity row, otherwise undefined behaviors may be observed during pagination. 4. Since transactions are not supported, any updates, inserts or deletes during pagination can lead to stale data being returned or other unexpected behaviors.
⊞ Locations ProjectsUpdates an existing entity row matching the entity type and entity id specified in the request. The fields in the entity row that need to be modified are contained in the body of the request. All unspecified fields are left unchanged. The response message contains a `Entity` message object returned as a response by the external system.
⊞ Locations ProjectsUpdates entities based on conditions specified in the request and not on entity id.
⊞ Locations ProjectsGets metadata of given entity type
⊞ Locations ProjectsLists metadata related to all entity types present in the external system.
⊞ Locations ProjectsExecutes a SQL statement specified in the body of the request. An example of this SQL statement in the case of Salesforce connector would be 'select * from Account a, Order o where a.Id = o.AccountId'.
Cloud Identity-Aware Proxy API v1
⊞ Undefined GetIamPolicyGets the access control policy for an Identity-Aware Proxy protected resource. More information about managing access via IAP can be found at: https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api
⊞ Undefined GetIapSettingsGets the IAP settings on a particular IAP protected resource.
⊞ Brands ProjectsConstructs a new OAuth brand for the project if one does not exist. The created brand is "internal only", meaning that OAuth clients created under it only accept requests from users who belong to the same Google Workspace organization as the project. The brand is created in an un-reviewed status. NOTE: The "internal only" status can be manually changed in the Google Cloud Console. Requires that a brand does not already exist for the project, and that the specified support email is owned by the caller.
⊞ Brands ProjectsRetrieves the OAuth brand of the project.
⊞ Brands ProjectsCreates an Identity Aware Proxy (IAP) OAuth client. The client is owned by IAP. Requires that the brand for the project exists and that it is set for internal-only use.
⊞ Brands ProjectsDeletes an Identity Aware Proxy (IAP) OAuth client. Useful for removing obsolete clients, managing the number of clients in a given project, and cleaning up after tests. Requires that the client is owned by IAP.
⊞ Brands ProjectsRetrieves an Identity Aware Proxy (IAP) OAuth client. Requires that the client is owned by IAP.
⊞ Brands ProjectsLists the existing clients for the brand.
⊞ Brands ProjectsResets an Identity Aware Proxy (IAP) OAuth client secret. Useful if the secret was compromised. Requires that the client is owned by IAP.
⊞ Brands ProjectsLists the existing brands for the project.
⊞ Iap Tunnel ProjectsCreates a new TunnelDestGroup.
⊞ Iap Tunnel ProjectsDeletes a TunnelDestGroup.
⊞ Iap Tunnel ProjectsRetrieves an existing TunnelDestGroup.
⊞ Iap Tunnel ProjectsLists the existing TunnelDestGroups. To group across all locations, use a `-` as the location ID. For example: `/v1/projects/123/iap_tunnel/locations/-/destGroups`
⊞ Iap Tunnel ProjectsUpdates a TunnelDestGroup.
⊞ Undefined SetIamPolicySets the access control policy for an Identity-Aware Proxy protected resource. Replaces any existing policy. More information about managing access via IAP can be found at: https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api
⊞ Undefined TestIamPermissionsReturns permissions that a caller has on the Identity-Aware Proxy protected resource. More information about managing access via IAP can be found at: https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api
⊞ Undefined UpdateIapSettingsUpdates the IAP settings on a particular IAP protected resource. It replaces all fields unless the `update_mask` is set.
⊞ Undefined ValidateAttributeExpressionValidates a given CEL expression conforms to IAP restrictions.
AlloyDB API v1
⊞ Locations ProjectsCreates a new Backup in a given project and location.
⊞ Locations ProjectsDeletes a single Backup.
⊞ Locations ProjectsGets details of a single Backup.
⊞ Locations ProjectsLists Backups in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Backup.
⊞ Locations ProjectsCreates a new Cluster in a given project and location.
⊞ Locations ProjectsCreates a cluster of type SECONDARY in the given location using the primary cluster as the source.
⊞ Locations ProjectsDeletes a single Cluster.
⊞ Locations ProjectsGenerate a client certificate signed by a Cluster CA. The sole purpose of this endpoint is to support AlloyDB connectors and the Auth Proxy client. The endpoint's behavior is subject to change without notice, so do not rely on its behavior remaining constant. Future changes will not break AlloyDB connectors or the Auth Proxy client.
⊞ Locations ProjectsGets details of a single Cluster.
⊞ Locations ProjectsCreates a new Instance in a given project and location.
⊞ Locations ProjectsCreates a new SECONDARY Instance in a given project and location.
⊞ Locations ProjectsDeletes a single Instance.
⊞ Locations ProjectsForces a Failover for a highly available instance. Failover promotes the HA standby instance as the new primary. Imperative only.
⊞ Locations ProjectsGets details of a single Instance.
⊞ Locations ProjectsGet instance metadata used for a connection.
⊞ Locations ProjectsInjects fault in an instance. Imperative only.
⊞ Locations ProjectsLists Instances in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Instance.
⊞ Locations ProjectsRestart an Instance in a cluster. Imperative only.
⊞ Locations ProjectsLists Clusters in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Cluster.
⊞ Locations ProjectsPromotes a SECONDARY cluster. This turns down replication from the PRIMARY cluster and promotes a secondary cluster into its own standalone cluster. Imperative only.
⊞ Locations ProjectsCreates a new Cluster in a given project and location, with a volume restored from the provided source, either a backup ID or a point-in-time and a source cluster.
⊞ Locations ProjectsCreates a new User in a given project, location, and cluster.
⊞ Locations ProjectsDeletes a single User.
⊞ Locations ProjectsGets details of a single User.
⊞ Locations ProjectsLists Users in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single User.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsLists SupportedDatabaseFlags for a given project and location.
Certificate Authority API v1
⊞ Locations ProjectsActivate a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. After the parent Certificate Authority signs a certificate signing request from FetchCertificateAuthorityCsr, this method can complete the activation process.
⊞ Locations ProjectsReturns a CertificateRevocationList.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists CertificateRevocationLists.
⊞ Locations ProjectsUpdate a CertificateRevocationList.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreate a new CertificateAuthority in a given Project and Location.
⊞ Locations ProjectsDelete a CertificateAuthority.
⊞ Locations ProjectsDisable a CertificateAuthority.
⊞ Locations ProjectsEnable a CertificateAuthority.
⊞ Locations ProjectsFetch a certificate signing request (CSR) from a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. The CSR must then be signed by the desired parent Certificate Authority, which could be another CertificateAuthority resource, or could be an on-prem certificate authority. See also ActivateCertificateAuthority.
⊞ Locations ProjectsReturns a CertificateAuthority.
⊞ Locations ProjectsLists CertificateAuthorities.
⊞ Locations ProjectsUpdate a CertificateAuthority.
⊞ Locations ProjectsUndelete a CertificateAuthority that has been deleted.
⊞ Locations ProjectsCreate a new Certificate in a given Project, Location from a particular CaPool.
⊞ Locations ProjectsReturns a Certificate.
⊞ Locations ProjectsLists Certificates.
⊞ Locations ProjectsUpdate a Certificate. Currently, the only field you can update is the labels field.
⊞ Locations ProjectsRevoke a Certificate.
⊞ Locations ProjectsCreate a CaPool.
⊞ Locations ProjectsDelete a CaPool.
⊞ Locations ProjectsFetchCaCerts returns the current trust anchor for the CaPool. This will include CA certificate chains for all ACTIVE CertificateAuthority resources in the CaPool.
⊞ Locations ProjectsReturns a CaPool.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists CaPools.
⊞ Locations ProjectsUpdate a CaPool.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreate a new CertificateTemplate in a given Project and Location.
⊞ Locations ProjectsDeleteCertificateTemplate deletes a CertificateTemplate.
⊞ Locations ProjectsReturns a CertificateTemplate.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists CertificateTemplates.
⊞ Locations ProjectsUpdate a CertificateTemplate.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Cloud Video Intelligence API v1
⊞ Projects OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Projects OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Projects OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Annotate VideosPerforms asynchronous video annotation. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `AnnotateVideoProgress` (progress). `Operation.response` contains `AnnotateVideoResponse` (results).
Cloud Datastore API v1
⊞ AllocateIds ProjectsAllocates IDs for the given keys, which is useful for referencing an entity before it is inserted.
⊞ BeginTransaction ProjectsBegins a new transaction.
⊞ Commit ProjectsCommits a transaction, optionally creating, deleting or modifying some entities.
⊞ Export ProjectsExports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.
⊞ Import ProjectsImports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore.
⊞ Indexes ProjectsCreates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created.
⊞ Indexes ProjectsDeletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
⊞ Indexes ProjectsGets an index.
⊞ Indexes ProjectsLists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results.
⊞ Lookup ProjectsLooks up entities by key.
⊞ Operations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Operations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ ReserveIds ProjectsPrevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
⊞ Rollback ProjectsRolls back a transaction.
⊞ RunAggregationQuery ProjectsRuns an aggregation query.
⊞ RunQuery ProjectsQueries for entities.
Cloud Document AI API v1
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsFetches processor types. Note that we don't use ListProcessorTypes here, because it isn't paginated.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsGets a processor type detail.
⊞ Locations ProjectsLists the processor types that exist.
⊞ Locations ProjectsLRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.
⊞ Locations ProjectsCreates a processor from the ProcessorType provided. The processor will be at `ENABLED` state by default after its creation.
⊞ Locations ProjectsDeletes the processor, unloads all deployed model artifacts if it was enabled and then deletes all artifacts associated with this processor.
⊞ Locations ProjectsDisables a processor
⊞ Locations ProjectsEnables a processor
⊞ Locations ProjectsGets a processor detail.
⊞ Locations ProjectsSend a document for Human Review. The input document should be processed by the specified processor.
⊞ Locations ProjectsLists all processors which belong to this project.
⊞ Locations ProjectsProcesses a single document.
⊞ Locations ProjectsLRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.
⊞ Locations ProjectsDeletes the processor version, all artifacts under the processor version will be deleted.
⊞ Locations ProjectsDeploys the processor version.
⊞ Locations ProjectsEvaluates a ProcessorVersion against annotated documents, producing an Evaluation.
⊞ Locations ProjectsRetrieves a specific evaluation.
⊞ Locations ProjectsRetrieves a set of evaluations for a given processor version.
⊞ Locations ProjectsGets a processor version detail.
⊞ Locations ProjectsLists all versions of a processor.
⊞ Locations ProjectsProcesses a single document.
⊞ Locations ProjectsTrains a new processor version. Operation metadata is returned as TrainProcessorVersionMetadata.
⊞ Locations ProjectsUndeploys the processor version.
⊞ Locations ProjectsSet the default (active) version of a Processor that will be used in ProcessDocument and BatchProcessDocuments.
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
Dataproc Metastore API v1
⊞ Locations ProjectsCreates a metastore federation in a project and location.
⊞ Locations ProjectsDeletes a single federation.
⊞ Locations ProjectsGets the details of a single federation.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists federations in a project and location.
⊞ Locations ProjectsUpdates the fields of a federation.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
⊞ Locations ProjectsAlter metadata resource location. The metadata resource can be a database, table, or partition. This functionality only updates the parent directory for the respective metadata resource and does not transfer any existing data to the new location.
⊞ Locations ProjectsCreates a new backup in a given project and location.
⊞ Locations ProjectsDeletes a single backup.
⊞ Locations ProjectsGets details of a single backup.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists backups in a service.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsCreates a metastore service in a project and location.
⊞ Locations ProjectsDeletes a single service.
⊞ Locations ProjectsExports metadata from a service.
⊞ Locations ProjectsGets the details of a single service.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists services in a project and location.
⊞ Locations ProjectsCreates a new MetadataImport in a given project and location.
⊞ Locations ProjectsGets details of a single import.
⊞ Locations ProjectsLists imports in a service.
⊞ Locations ProjectsUpdates a single import. Only the description field of MetadataImport is supported to be updated.
⊞ Locations ProjectsMove a table to another database.
⊞ Locations ProjectsUpdates the parameters of a single service.
⊞ Locations ProjectsQuery DPMS metadata.
⊞ Locations ProjectsRestores a service from a backup.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
Cloud Scheduler API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsCreates a job.
⊞ Locations ProjectsDeletes a job.
⊞ Locations ProjectsGets a job.
⊞ Locations ProjectsLists jobs.
⊞ Locations ProjectsUpdates a job. If successful, the updated Job is returned. If the job does not exist, `NOT_FOUND` is returned. If UpdateJob does not successfully return, it is possible for the job to be in an Job.State.UPDATE_FAILED state. A job in this state may not be executed. If this happens, retry the UpdateJob request until a successful response is received.
⊞ Locations ProjectsPauses a job. If a job is paused then the system will stop executing the job until it is re-enabled via ResumeJob. The state of the job is stored in state; if paused it will be set to Job.State.PAUSED. A job must be in Job.State.ENABLED to be paused.
⊞ Locations ProjectsResume a job. This method reenables a job after it has been Job.State.PAUSED. The state of a job is stored in Job.state; after calling this method it will be set to Job.State.ENABLED. A job must be in Job.State.PAUSED to be resumed.
⊞ Locations ProjectsForces a job to run now. When this method is called, Cloud Scheduler will dispatch the job, even if the job is already running.
⊞ Locations ProjectsLists information about the supported locations for this service.
Cloud Profiler API v2
⊞ Profiles ProjectsCreateProfile creates a new profile resource in the online mode. The server ensures that the new profiles are created at a constant rate per deployment, so the creation request may hang for some time until the next profile session is available. The request may fail with ABORTED error if the creation is not available within ~1m, the response will indicate the duration of the backoff the client should take before attempting creating a profile again. The backoff duration is returned in google.rpc.RetryInfo extension on the response status. To a gRPC client, the extension will be return as a binary-serialized proto in the trailing metadata item named "google.rpc.retryinfo-bin".
⊞ Profiles ProjectsCreateOfflineProfile creates a new profile resource in the offline mode. The client provides the profile to create along with the profile bytes, the server records it.
⊞ Profiles ProjectsUpdateProfile updates the profile bytes and labels on the profile resource created in the online mode. Updating the bytes for profiles created in the offline mode is currently not supported: the profile content must be provided at the time of the profile creation.
Retail API v2
⊞ Locations ProjectsAdds the specified CatalogAttribute to the AttributesConfig. If the CatalogAttribute to add already exists, an ALREADY_EXISTS error is returned.
⊞ Locations ProjectsRemoves the specified CatalogAttribute from the AttributesConfig. If the CatalogAttribute to remove does not exist, a NOT_FOUND error is returned.
⊞ Locations ProjectsReplaces the specified CatalogAttribute in the AttributesConfig by updating the catalog attribute with the same CatalogAttribute.key. If the CatalogAttribute to replace does not exist, a NOT_FOUND error is returned.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsWe recommend that you use the ProductService.AddLocalInventories method instead of the ProductService.AddFulfillmentPlaces method. ProductService.AddLocalInventories achieves the same results but provides more fine-grained control over ingesting local inventory data. Incrementally adds place IDs to Product.fulfillment_info.place_ids. This process is asynchronous and does not require the Product to exist before updating fulfillment information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, the added place IDs are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. The returned Operations will be obsolete after 1 day, and GetOperation API will return NOT_FOUND afterwards. If conflicting updates are issued, the Operations associated with the stale updates will not be marked as done until being obsolete.
⊞ Locations ProjectsUpdates local inventory information for a Product at a list of places, while respecting the last update timestamps of each inventory field. This process is asynchronous and does not require the Product to exist before updating inventory information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, updates are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. Local inventory information can only be modified using this method. ProductService.CreateProduct and ProductService.UpdateProduct has no effect on local inventories. The returned Operations will be obsolete after 1 day, and GetOperation API will return NOT_FOUND afterwards. If conflicting updates are issued, the Operations associated with the stale updates will not be marked as done until being obsolete.
⊞ Locations ProjectsCreates a Product.
⊞ Locations ProjectsDeletes a Product.
⊞ Locations ProjectsGets a Product.
⊞ Locations ProjectsBulk import of multiple Products. Request processing may be synchronous. Non-existing items are created. Note that it is possible for a subset of the Products to be successfully updated.
⊞ Locations ProjectsGets a list of Products.
⊞ Locations ProjectsUpdates a Product.
⊞ Locations ProjectsPermanently deletes all selected Products under a branch. This process is asynchronous. If the request is valid, the removal will be enqueued and processed offline. Depending on the number of Products, this operation could take hours to complete. Before the operation completes, some Products may still be returned by ProductService.GetProduct or ProductService.ListProducts. Depending on the number of Products, this operation could take hours to complete. To get a sample of Products that would be deleted, set PurgeProductsRequest.force to false.
⊞ Locations ProjectsWe recommend that you use the ProductService.RemoveLocalInventories method instead of the ProductService.RemoveFulfillmentPlaces method. ProductService.RemoveLocalInventories achieves the same results but provides more fine-grained control over ingesting local inventory data. Incrementally removes place IDs from a Product.fulfillment_info.place_ids. This process is asynchronous and does not require the Product to exist before updating fulfillment information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, the removed place IDs are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. The returned Operations will be obsolete after 1 day, and GetOperation API will return NOT_FOUND afterwards. If conflicting updates are issued, the Operations associated with the stale updates will not be marked as done until being obsolete.
⊞ Locations ProjectsRemove local inventory information for a Product at a list of places at a removal timestamp. This process is asynchronous. If the request is valid, the removal will be enqueued and processed downstream. As a consequence, when a response is returned, removals are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. Local inventory information can only be removed using this method. ProductService.CreateProduct and ProductService.UpdateProduct has no effect on local inventories. The returned Operations will be obsolete after 1 day, and GetOperation API will return NOT_FOUND afterwards. If conflicting updates are issued, the Operations associated with the stale updates will not be marked as done until being obsolete.
⊞ Locations ProjectsUpdates inventory information for a Product while respecting the last update timestamps of each inventory field. This process is asynchronous and does not require the Product to exist before updating fulfillment information. If the request is valid, the update is enqueued and processed downstream. As a consequence, when a response is returned, updates are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. When inventory is updated with ProductService.CreateProduct and ProductService.UpdateProduct, the specified inventory field value(s) overwrite any existing value(s) while ignoring the last update time for this field. Furthermore, the last update times for the specified inventory fields are overwritten by the times of the ProductService.CreateProduct or ProductService.UpdateProduct request. If no inventory fields are set in CreateProductRequest.product, then any pre-existing inventory information for this product is used. If no inventory fields are set in SetInventoryRequest.set_mask, then any existing inventory information is preserved. Pre-existing inventory information can only be updated with ProductService.SetInventory, ProductService.AddFulfillmentPlaces, and ProductService.RemoveFulfillmentPlaces. The returned Operations is obsolete after one day, and the GetOperation API returns `NOT_FOUND` afterwards. If conflicting updates are issued, the Operations associated with the stale updates are not marked as done until they are obsolete.
⊞ Locations ProjectsCompletes the specified prefix with keyword suggestions. This feature is only available for users who have Retail Search enabled. Enable Retail Search on Cloud Console before using this feature.
⊞ Locations ProjectsBulk import of processed completion dataset. Request processing is asynchronous. Partial updating is not supported. The operation is successfully finished only after the imported suggestions are indexed successfully and ready for serving. The process takes hours. This feature is only available for users who have Retail Search enabled. Enable Retail Search on Cloud Console before using this feature.
⊞ Locations ProjectsCreates a Control. If the Control to create already exists, an ALREADY_EXISTS error is returned.
⊞ Locations ProjectsDeletes a Control. If the Control to delete does not exist, a NOT_FOUND error is returned.
⊞ Locations ProjectsGets a Control.
⊞ Locations ProjectsLists all Controls by their parent Catalog.
⊞ Locations ProjectsUpdates a Control. Control cannot be set to a different oneof field, if so an INVALID_ARGUMENT is returned. If the Control to update does not exist, a NOT_FOUND error is returned.
⊞ Locations ProjectsGets an AttributesConfig.
⊞ Locations ProjectsGets a CompletionConfig.
⊞ Locations ProjectsGet which branch is currently default branch set by CatalogService.SetDefaultBranch method under a specified parent catalog.
⊞ Locations ProjectsLists all the Catalogs associated with the project.
⊞ Locations ProjectsCreates a new model.
⊞ Locations ProjectsDeletes an existing model.
⊞ Locations ProjectsGets a model.
⊞ Locations ProjectsLists all the models linked to this event store.
⊞ Locations ProjectsUpdate of model metadata. Only fields that currently can be updated are: `filtering_option` and `periodic_tuning_state`. If other values are provided, this API method ignores them.
⊞ Locations ProjectsPauses the training of an existing model.
⊞ Locations ProjectsResumes the training of an existing model.
⊞ Locations ProjectsTunes an existing model.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates the Catalogs.
⊞ Locations ProjectsMakes a recommendation prediction.
⊞ Locations ProjectsPerforms a search. This feature is only available for users who have Retail Search enabled. Enable Retail Search on Cloud Console before using this feature.
⊞ Locations ProjectsEnables a Control on the specified ServingConfig. The control is added in the last position of the list of controls it belongs to (e.g. if it's a facet spec control it will be applied in the last position of servingConfig.facetSpecIds) Returns a ALREADY_EXISTS error if the control has already been applied. Returns a FAILED_PRECONDITION error if the addition could exceed maximum number of control allowed for that type of control.
⊞ Locations ProjectsCreates a ServingConfig. A maximum of 100 ServingConfigs are allowed in a Catalog, otherwise a FAILED_PRECONDITION error is returned.
⊞ Locations ProjectsDeletes a ServingConfig. Returns a NotFound error if the ServingConfig does not exist.
⊞ Locations ProjectsGets a ServingConfig. Returns a NotFound error if the ServingConfig does not exist.
⊞ Locations ProjectsLists all ServingConfigs linked to this catalog.
⊞ Locations ProjectsUpdates a ServingConfig.
⊞ Locations ProjectsMakes a recommendation prediction.
⊞ Locations ProjectsDisables a Control on the specified ServingConfig. The control is removed from the ServingConfig. Returns a NOT_FOUND error if the Control is not enabled for the ServingConfig.
⊞ Locations ProjectsPerforms a search. This feature is only available for users who have Retail Search enabled. Enable Retail Search on Cloud Console before using this feature.
⊞ Locations ProjectsSet a specified branch id as default branch. API methods such as SearchService.Search, ProductService.GetProduct, ProductService.ListProducts will treat requests using "default_branch" to the actual branch id set as default. For example, if `projects/*/locations/*/catalogs/*/branches/1` is set as default, setting SearchRequest.branch to `projects/*/locations/*/catalogs/*/branches/default_branch` is equivalent to setting SearchRequest.branch to `projects/*/locations/*/catalogs/*/branches/1`. Using multiple branches can be useful when developers would like to have a staging branch to test and verify for future usage. When it becomes ready, developers switch on the staging branch using this API while keeping using `projects/*/locations/*/catalogs/*/branches/default_branch` as SearchRequest.branch to route the traffic to this staging branch. CAUTION: If you have live predict/search traffic, switching the default branch could potentially cause outages if the ID space of the new branch is very different from the old one. More specifically: * PredictionService will only return product IDs from branch {newBranch}. * SearchService will only return product IDs from branch {newBranch} (if branch is not explicitly set). * UserEventService will only join events with products from branch {newBranch}.
⊞ Locations ProjectsUpdates the AttributesConfig. The catalog attributes in the request will be updated in the catalog, or inserted if they do not exist. Existing catalog attributes not included in the request will remain unchanged. Attributes that are assigned to products, but do not exist at the catalog level, are always included in the response. The product attribute is assigned default values for missing catalog attribute fields, e.g., searchable and dynamic facetable options.
⊞ Locations ProjectsUpdates the CompletionConfigs.
⊞ Locations ProjectsWrites a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Retail API JavaScript pixel and Google Tag Manager. Users should not call this method directly.
⊞ Locations ProjectsBulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. `Operation.response` is of type `ImportResponse`. Note that it is possible for a subset of the items to be successfully inserted. `Operation.metadata` is of type `ImportMetadata`.
⊞ Locations ProjectsDeletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first.
⊞ Locations ProjectsStarts a user-event rejoin operation with latest product catalog. Events are not annotated with detailed product information for products that are missing from the catalog when the user event is ingested. These events are stored as unjoined events with limited usage on training and serving. You can use this method to start a join operation on specified events with the latest version of product catalog. You can also use this method to correct events joined with the wrong product catalog. A rejoin operation can take hours or days to complete.
⊞ Locations ProjectsWrites a single user event.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Cloud Functions API v2
⊞ Locations ProjectsCreates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error.
⊞ Locations ProjectsDeletes a function with the given name from the specified project. If the given function is used by some trigger, the trigger will be updated to remove this function.
⊞ Locations ProjectsReturns a signed URL for downloading deployed function source code. The URL is only valid for a limited period and should be used within 30 minutes of generation. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls
⊞ Locations ProjectsReturns a signed URL for uploading a function source code. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls. Once the function source code upload is complete, the used signed URL should be provided in CreateFunction or UpdateFunction request as a reference to the function source code. When uploading source code to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, specify this header: * `content-type: application/zip` Do not specify this header: * `Authorization: Bearer YOUR_TOKEN`
⊞ Locations ProjectsReturns a function with the given name from the requested project.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns a list of functions that belong to the requested project.
⊞ Locations ProjectsUpdates existing function.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsReturns a list of runtimes that are supported for the requested project.
BigQuery Reservation API v1
⊞ Locations ProjectsCreates a new capacity commitment resource.
⊞ Locations ProjectsDeletes a capacity commitment. Attempting to delete capacity commitment before its commitment_end_time will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`.
⊞ Locations ProjectsReturns information about the capacity commitment.
⊞ Locations ProjectsLists all the capacity commitments for the admin project.
⊞ Locations ProjectsMerges capacity commitments of the same plan into a single commitment. The resulting capacity commitment has the greater commitment_end_time out of the to-be-merged capacity commitments. Attempting to merge capacity commitments of different plan will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`.
⊞ Locations ProjectsUpdates an existing capacity commitment. Only `plan` and `renewal_plan` fields can be updated. Plan can only be changed to a plan of a longer commitment period. Attempting to change to a plan with shorter commitment period will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`.
⊞ Locations ProjectsSplits capacity commitment to two commitments of the same plan and `commitment_end_time`. A common use case is to enable downgrading commitments. For example, in order to downgrade from 10000 slots to 8000, you might split a 10000 capacity commitment into commitments of 2000 and 8000. Then, you delete the first one after the commitment end time passes.
⊞ Locations ProjectsRetrieves a BI reservation.
⊞ Locations ProjectsCreates an assignment object which allows the given project to submit jobs of a certain type using slots from the specified reservation. Currently a resource (project, folder, organization) can only have one assignment per each (job_type, location) combination, and that reservation will be used for all jobs of the matching type. Different assignments can be created on different levels of the projects, folders or organization hierarchy. During query execution, the assignment is looked up at the project, folder and organization levels in that order. The first assignment found is applied to the query. When creating assignments, it does not matter if other assignments exist at higher levels. Example: * The organization `organizationA` contains two projects, `project1` and `project2`. * Assignments for all three entities (`organizationA`, `project1`, and `project2`) could all be created and mapped to the same or different reservations. "None" assignments represent an absence of the assignment. Projects assigned to None use on-demand pricing. To create a "None" assignment, use "none" as a reservation_id in the parent. Example parent: `projects/myproject/locations/US/reservations/none`. Returns `google.rpc.Code.PERMISSION_DENIED` if user does not have 'bigquery.admin' permissions on the project using the reservation and the project that owns this reservation. Returns `google.rpc.Code.INVALID_ARGUMENT` when location of the assignment does not match location of the reservation.
⊞ Locations ProjectsDeletes a assignment. No expansion will happen. Example: * Organization `organizationA` contains two projects, `project1` and `project2`. * Reservation `res1` exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: `` and `` In this example, deletion of the `` assignment won't affect the other assignment ``. After said deletion, queries from `project1` will still use `res1` while queries from `project2` will switch to use on-demand mode.
⊞ Locations ProjectsLists assignments. Only explicitly created assignments will be returned. Example: * Organization `organizationA` contains two projects, `project1` and `project2`. * Reservation `res1` exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: `` and `` In this example, ListAssignments will just return the above two assignments for reservation `res1`, and no expansion/merge will happen. The wildcard "-" can be used for reservations in the request. In that case all assignments belongs to the specified project and location will be listed. **Note** "-" cannot be used for projects nor locations.
⊞ Locations ProjectsMoves an assignment under a new reservation. This differs from removing an existing assignment and recreating a new one by providing a transactional change that ensures an assignee always has an associated reservation.
⊞ Locations ProjectsUpdates an existing assignment. Only the `priority` field can be updated.
⊞ Locations ProjectsCreates a new reservation resource.
⊞ Locations ProjectsDeletes a reservation. Returns `google.rpc.Code.FAILED_PRECONDITION` when reservation has assignments.
⊞ Locations ProjectsReturns information about the reservation.
⊞ Locations ProjectsLists all the reservations for the project in the specified location.
⊞ Locations ProjectsUpdates an existing reservation resource.
⊞ Locations ProjectsLooks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn't have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project->folder->organization) happens in this API. 3. Parent here is `projects/*/locations/*`, instead of `projects/*/locations/*reservations/*`.
⊞ Locations ProjectsDeprecated: Looks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn't have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project->folder->organization) happens in this API. 3. Parent here is `projects/*/locations/*`, instead of `projects/*/locations/*reservations/*`. **Note** "-" cannot be used for projects nor locations.
⊞ Locations ProjectsUpdates a BI reservation. Only fields specified in the `field_mask` are updated. A singleton BI reservation always exists with default size 0. In order to reserve BI capacity it needs to be updated to an amount greater than 0. In order to release BI capacity reservation size must be set to 0.
Cloud Dataproc API v1
⊞ Locations ProjectsCreates new autoscaling policy.
⊞ Locations ProjectsDeletes an autoscaling policy. It is an error to delete an autoscaling policy that is in use by one or more clusters.
⊞ Locations ProjectsRetrieves autoscaling policy.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists autoscaling policies in the project.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUpdates (replaces) autoscaling policy.Disabled check for update_mask, because all updates will be full replacements.
⊞ Locations ProjectsCreates a batch workload that executes asynchronously.
⊞ Locations ProjectsDeletes the batch workload resource. If the batch is not in a CANCELLED, SUCCEEDED or FAILED State, the delete operation fails and the response returns FAILED_PRECONDITION.
⊞ Locations ProjectsGets the batch workload resource representation.
⊞ Locations ProjectsLists batch workloads.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
⊞ Locations ProjectsCreate a session template synchronously.
⊞ Locations ProjectsDeletes a session template.
⊞ Locations ProjectsGets the resource representation for a session template.
⊞ Locations ProjectsLists session templates.
⊞ Locations ProjectsUpdates the session template synchronously.
⊞ Locations ProjectsCreate an interactive session asynchronously.
⊞ Locations ProjectsDeletes the interactive session resource. If the session is not in terminal state, it is terminated, and then deleted.
⊞ Locations ProjectsGets the resource representation for an interactive session.
⊞ Locations ProjectsLists interactive sessions.
⊞ Locations ProjectsTerminates the interactive session.
⊞ Locations ProjectsCreates new workflow template.
⊞ Locations ProjectsDeletes a workflow template. It does not cancel in-progress workflows.
⊞ Locations ProjectsRetrieves the latest workflow template.Can retrieve previously instantiated template by specifying optional version parameter.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsInstantiates a template and begins execution.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
⊞ Locations ProjectsInstantiates a template and begins execution.This method is equivalent to executing the sequence CreateWorkflowTemplate, InstantiateWorkflowTemplate, DeleteWorkflowTemplate.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
⊞ Locations ProjectsLists workflows that match the specified filter in the request.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUpdates (replaces) workflow template. The updated template must contain version that matches the current server version.
⊞ Regions ProjectsCreates new autoscaling policy.
⊞ Regions ProjectsDeletes an autoscaling policy. It is an error to delete an autoscaling policy that is in use by one or more clusters.
⊞ Regions ProjectsRetrieves autoscaling policy.
⊞ Regions ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Regions ProjectsLists autoscaling policies in the project.
⊞ Regions ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Regions ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Regions ProjectsUpdates (replaces) autoscaling policy.Disabled check for update_mask, because all updates will be full replacements.
⊞ Regions ProjectsCreates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
⊞ Regions ProjectsDeletes a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
⊞ Regions ProjectsGets cluster diagnostic information. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). After the operation completes, Operation.response contains DiagnoseClusterResults (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#diagnoseclusterresults).
⊞ Regions ProjectsGets the resource representation for a cluster in a project.
⊞ Regions ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Regions ProjectsInject encrypted credentials into all of the VMs in a cluster.The target cluster must be a personal auth cluster assigned to the user who is issuing the RPC.
⊞ Regions ProjectsLists all regions/{region}/clusters in a project alphabetically.
⊞ Regions ProjectsCreates a node group in a cluster. The returned Operation.metadata is NodeGroupOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata).
⊞ Regions ProjectsGets the resource representation for a node group in a cluster.
⊞ Regions ProjectsResizes a node group in a cluster. The returned Operation.metadata is NodeGroupOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata).
⊞ Regions ProjectsUpdates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). The cluster must be in a RUNNING state or an error is returned.
⊞ Regions ProjectsRepairs a cluster.
⊞ Regions ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Regions ProjectsStarts a cluster in a project.
⊞ Regions ProjectsStops a cluster in a project.
⊞ Regions ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Regions ProjectsStarts a job cancellation request. To access the job resource after cancellation, call regions/{region}/jobs.list (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/list) or regions/{region}/jobs.get (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/get).
⊞ Regions ProjectsDeletes the job from the project. If the job is active, the delete fails, and the response returns FAILED_PRECONDITION.
⊞ Regions ProjectsGets the resource representation for a job in a project.
⊞ Regions ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Regions ProjectsLists regions/{region}/jobs in a project.
⊞ Regions ProjectsUpdates a job in a project.
⊞ Regions ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Regions ProjectsSubmits a job to a cluster.
⊞ Regions ProjectsSubmits job to a cluster.
⊞ Regions ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Regions ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
⊞ Regions ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.
⊞ Regions ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Regions ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Regions ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
⊞ Regions ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Regions ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Regions ProjectsCreates new workflow template.
⊞ Regions ProjectsDeletes a workflow template. It does not cancel in-progress workflows.
⊞ Regions ProjectsRetrieves the latest workflow template.Can retrieve previously instantiated template by specifying optional version parameter.
⊞ Regions ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Regions ProjectsInstantiates a template and begins execution.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
⊞ Regions ProjectsInstantiates a template and begins execution.This method is equivalent to executing the sequence CreateWorkflowTemplate, InstantiateWorkflowTemplate, DeleteWorkflowTemplate.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
⊞ Regions ProjectsLists workflows that match the specified filter in the request.
⊞ Regions ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Regions ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Regions ProjectsUpdates (replaces) workflow template. The updated template must contain version that matches the current server version.
Transcoder API v1
⊞ Locations ProjectsCreates a job template in the specified region.
⊞ Locations ProjectsDeletes a job template.
⊞ Locations ProjectsReturns the job template data.
⊞ Locations ProjectsLists job templates in the specified region.
⊞ Locations ProjectsCreates a job in the specified region.
⊞ Locations ProjectsDeletes a job.
⊞ Locations ProjectsReturns the job data.
⊞ Locations ProjectsLists jobs in the specified region.
Firebase Hosting API v1
⊞ Sites ProjectsCancelOperation is a part of the google.longrunning.Operations interface, but is not implemented for CustomDomain resources.
⊞ Sites ProjectsDeleteOperation is a part of the google.longrunning.Operations interface, but is not implemented for CustomDomain resources.
VMware Engine API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsGrants the bind permission to the customer provided principal(user / service account) to bind their DNS zone with the intranet VPC associated with the project.
⊞ Locations ProjectsRevokes the bind permission from the customer provided principal(user / service account) on the intranet VPC associated with the consumer project.
⊞ Locations ProjectsGets all the principals having bind permission on the intranet VPC associated with the consumer project granted by the Grant API.
⊞ Locations ProjectsCreates a new network peering between the peer network and VMware Engine network provided in a `NetworkPeering` resource.
⊞ Locations ProjectsDeletes a `NetworkPeering` resource. When a network peering is deleted for a VMware Engine network, the peer network becomes inaccessible to that VMware Engine network.
⊞ Locations ProjectsRetrieves a `NetworkPeering` resource by its resource name. The resource contains details of the network peering, such as peered networks, import and export custom route configurations, and peering state.
⊞ Locations ProjectsLists `NetworkPeering` resources in a given project.
⊞ Locations ProjectsModifies a `NetworkPeering` resource. Only the `description` field can be updated. Only fields specified in `updateMask` are applied.
⊞ Locations ProjectsLists the network peering routes exchanged over a peering connection.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a new network policy in a given VMware Engine network of a project and location (region). A new network policy cannot be created if another network policy already exists in the same scope.
⊞ Locations ProjectsDeletes a `NetworkPolicy` resource. A network policy cannot be deleted when `NetworkService.state` is set to `RECONCILING` for either its external IP or internet access service.
⊞ Locations ProjectsCreates a new external access rule in a given network policy.
⊞ Locations ProjectsDeletes a single external access rule.
⊞ Locations ProjectsGets details of a single external access rule.
⊞ Locations ProjectsLists `ExternalAccessRule` resources in the specified network policy.
⊞ Locations ProjectsUpdates the parameters of a single external access rule. Only fields specified in `update_mask` are applied.
⊞ Locations ProjectsLists external IP addresses assigned to VMware workload VMs within the scope of the given network policy.
⊞ Locations ProjectsRetrieves a `NetworkPolicy` resource by its resource name.
⊞ Locations ProjectsLists `NetworkPolicy` resources in a specified project and location.
⊞ Locations ProjectsModifies a `NetworkPolicy` resource. Only the following fields can be updated: `internet_access`, `external_ip`, `edge_services_cidr`. Only fields specified in `updateMask` are applied. When updating a network policy, the external IP network service can only be disabled if there are no external IP addresses present in the scope of the policy. Also, a `NetworkService` cannot be updated when `NetworkService.state` is set to `RECONCILING`. During operation processing, the resource is temporarily in the `ACTIVE` state before the operation fully completes. For that period of time, you can't update the resource. Use the operation status to determine when the processing fully completes.
⊞ Locations ProjectsGets details of a single `NodeType`.
⊞ Locations ProjectsLists node types
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new cluster in a given private cloud. Creating a new cluster provides additional nodes for use in the parent private cloud and requires sufficient [node quota](https://cloud.google.com/vmware-engine/quotas).
⊞ Locations ProjectsDeletes a `Cluster` resource. To avoid unintended data loss, migrate or gracefully shut down any workloads running on the cluster before deletion. You cannot delete the management cluster of a private cloud using this method.
⊞ Locations ProjectsRetrieves a `Cluster` resource by its resource name.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists `Cluster` resources in a given private cloud.
⊞ Locations ProjectsGets details of a single node.
⊞ Locations ProjectsLists nodes in a given cluster.
⊞ Locations ProjectsModifies a `Cluster` resource. Only fields specified in `updateMask` are applied. During operation processing, the resource is temporarily in the `ACTIVE` state before the operation fully completes. For that period of time, you can't update the resource. Use the operation status to determine when the processing fully completes.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new `PrivateCloud` resource in a given project and location. Private clouds of type `STANDARD` and `TIME_LIMITED` are zonal resources, `STRETCHED` private clouds are regional. Creating a private cloud also creates a [management cluster](https://cloud.google.com/vmware-engine/docs/concepts-vmware-components) for that private cloud.
⊞ Locations ProjectsSchedules a `PrivateCloud` resource for deletion. A `PrivateCloud` resource scheduled for deletion has `PrivateCloud.state` set to `DELETED` and `expireTime` set to the time when deletion is final and can no longer be reversed. The delete operation is marked as done as soon as the `PrivateCloud` is successfully scheduled for deletion (this also applies when `delayHours` is set to zero), and the operation is not kept in pending state until `PrivateCloud` is purged. `PrivateCloud` can be restored using `UndeletePrivateCloud` method before the `expireTime` elapses. When `expireTime` is reached, deletion is final and all private cloud resources are irreversibly removed and billing stops. During the final removal process, `PrivateCloud.state` is set to `PURGING`. `PrivateCloud` can be polled using standard `GET` method for the whole period of deletion and purging. It will not be returned only when it is completely purged.
⊞ Locations ProjectsCreates a new `ExternalAddress` resource in a given private cloud. The network policy that corresponds to the private cloud must have the external IP address network service enabled (`NetworkPolicy.external_ip`).
⊞ Locations ProjectsDeletes a single external IP address. When you delete an external IP address, connectivity between the external IP address and the corresponding internal IP address is lost.
⊞ Locations ProjectsGets details of a single external IP address.
⊞ Locations ProjectsLists external IP addresses assigned to VMware workload VMs in a given private cloud.
⊞ Locations ProjectsUpdates the parameters of a single external IP address. Only fields specified in `update_mask` are applied. During operation processing, the resource is temporarily in the `ACTIVE` state before the operation fully completes. For that period of time, you can't update the resource. Use the operation status to determine when the processing fully completes.
⊞ Locations ProjectsRetrieves a `PrivateCloud` resource by its resource name.
⊞ Locations ProjectsGets details of the `DnsForwarding` config.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsCreates a new HCX activation key in a given private cloud.
⊞ Locations ProjectsRetrieves a `HcxActivationKey` resource by its resource name.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists `HcxActivationKey` resources in a given private cloud.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists `PrivateCloud` resources in a given project and location.
⊞ Locations ProjectsCreate a new logging server for a given private cloud.
⊞ Locations ProjectsDeletes a single logging server.
⊞ Locations ProjectsGets details of a logging server.
⊞ Locations ProjectsLists logging servers configured for a given private cloud.
⊞ Locations ProjectsUpdates the parameters of a single logging server. Only fields specified in `update_mask` are applied.
⊞ Locations ProjectsCreates a new `ManagementDnsZoneBinding` resource in a private cloud. This RPC creates the DNS binding and the resource that represents the DNS binding of the consumer VPC network to the management DNS zone. A management DNS zone is the Cloud DNS cross-project binding zone that VMware Engine creates for each private cloud. It contains FQDNs and corresponding IP addresses for the private cloud's ESXi hosts and management VM appliances like vCenter and NSX Manager.
⊞ Locations ProjectsDeletes a `ManagementDnsZoneBinding` resource. When a management DNS zone binding is deleted, the corresponding consumer VPC network is no longer bound to the management DNS zone.
⊞ Locations ProjectsRetrieves a 'ManagementDnsZoneBinding' resource by its resource name.
⊞ Locations ProjectsLists Consumer VPCs bound to Management DNS Zone of a given private cloud.
⊞ Locations ProjectsUpdates a `ManagementDnsZoneBinding` resource. Only fields specified in `update_mask` are applied.
⊞ Locations ProjectsRetries to create a `ManagementDnsZoneBinding` resource that is in failed state.
⊞ Locations ProjectsModifies a `PrivateCloud` resource. Only the following fields can be updated: `description`. Only fields specified in `updateMask` are applied. During operation processing, the resource is temporarily in the `ACTIVE` state before the operation fully completes. For that period of time, you can't update the resource. Use the operation status to determine when the processing fully completes.
⊞ Locations ProjectsResets credentials of the NSX appliance.
⊞ Locations ProjectsResets credentials of the Vcenter appliance.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsGets details of credentials for NSX appliance.
⊞ Locations ProjectsGets details of credentials for Vcenter appliance.
⊞ Locations ProjectsGets details of a single subnet.
⊞ Locations ProjectsLists subnets in a given private cloud.
⊞ Locations ProjectsUpdates the parameters of a single subnet. Only fields specified in `update_mask` are applied. *Note*: This API is synchronous and always returns a successful `google.longrunning.Operation` (LRO). The returned LRO will only have `done` and `response` fields.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsRestores a private cloud that was previously scheduled for deletion by `DeletePrivateCloud`. A `PrivateCloud` resource scheduled for deletion has `PrivateCloud.state` set to `DELETED` and `PrivateCloud.expireTime` set to the time when deletion can no longer be reversed.
⊞ Locations ProjectsUpdates the parameters of the `DnsForwarding` config, like associated domains. Only fields specified in `update_mask` are applied.
⊞ Locations ProjectsCreates a new private connection that can be used for accessing private Clouds.
⊞ Locations ProjectsDeletes a `PrivateConnection` resource. When a private connection is deleted for a VMware Engine network, the connected network becomes inaccessible to that VMware Engine network.
⊞ Locations ProjectsRetrieves a `PrivateConnection` resource by its resource name. The resource contains details of the private connection, such as connected network, routing mode and state.
⊞ Locations ProjectsLists `PrivateConnection` resources in a given project and location.
⊞ Locations ProjectsModifies a `PrivateConnection` resource. Only `description` and `routing_mode` fields can be updated. Only fields specified in `updateMask` are applied.
⊞ Locations ProjectsLists the private connection routes exchanged over a peering connection.
⊞ Locations ProjectsCreates a new VMware Engine network that can be used by a private cloud.
⊞ Locations ProjectsDeletes a `VmwareEngineNetwork` resource. You can only delete a VMware Engine network after all resources that refer to it are deleted. For example, a private cloud, a network peering, and a network policy can all refer to the same VMware Engine network.
⊞ Locations ProjectsRetrieves a `VmwareEngineNetwork` resource by its resource name. The resource contains details of the VMware Engine network, such as its VMware Engine network type, peered networks in a service project, and state (for example, `CREATING`, `ACTIVE`, `DELETING`).
⊞ Locations ProjectsLists `VmwareEngineNetwork` resources in a given project and location.
⊞ Locations ProjectsModifies a VMware Engine network resource. Only the following fields can be updated: `description`. Only fields specified in `updateMask` are applied.
Cloud Spanner API v1
⊞ InstanceConfigOperations ProjectsLists the user-managed instance config long-running operations in the given project. An instance config operation has a name of the form `projects//instanceConfigs//operations/`. The long-running operation metadata field type `metadata.type_url` describes the type of the metadata. Operations returned include those that have completed/failed/canceled within the last 7 days, and pending operations. Operations returned are ordered by `operation.metadata.value.start_time` in descending order starting from the most recently started operation.
⊞ InstanceConfigs ProjectsCreates an instance config and begins preparing it to be used. The returned long-running operation can be used to track the progress of preparing the new instance config. The instance config name is assigned by the caller. If the named instance config already exists, `CreateInstanceConfig` returns `ALREADY_EXISTS`. Immediately after the request returns: * The instance config is readable via the API, with all requested attributes. The instance config's reconciling field is set to true. Its state is `CREATING`. While the operation is pending: * Cancelling the operation renders the instance config immediately unreadable via the API. * Except for deleting the creating resource, all other attempts to modify the instance config are rejected. Upon completion of the returned operation: * Instances can be created using the instance configuration. * The instance config's reconciling field becomes false. Its state becomes `READY`. The returned long-running operation will have a name of the format `/operations/` and can be used to track creation of the instance config. The metadata field type is CreateInstanceConfigMetadata. The response field type is InstanceConfig, if successful. Authorization requires `spanner.instanceConfigs.create` permission on the resource parent.
⊞ InstanceConfigs ProjectsDeletes the instance config. Deletion is only allowed when no instances are using the configuration. If any instances are using the config, returns `FAILED_PRECONDITION`. Only user managed configurations can be deleted. Authorization requires `spanner.instanceConfigs.delete` permission on the resource name.
⊞ InstanceConfigs ProjectsGets information about a particular instance configuration.
⊞ InstanceConfigs ProjectsLists the supported instance configurations for a given project.
⊞ InstanceConfigs ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ InstanceConfigs ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ InstanceConfigs ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ InstanceConfigs ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ InstanceConfigs ProjectsUpdates an instance config. The returned long-running operation can be used to track the progress of updating the instance. If the named instance config does not exist, returns `NOT_FOUND`. Only user managed configurations can be updated. Immediately after the request returns: * The instance config's reconciling field is set to true. While the operation is pending: * Cancelling the operation sets its metadata's cancel_time. The operation is guaranteed to succeed at undoing all changes, after which point it terminates with a `CANCELLED` status. * All other attempts to modify the instance config are rejected. * Reading the instance config via the API continues to give the pre-request values. Upon completion of the returned operation: * Creating instances using the instance configuration uses the new values. * The instance config's new values are readable via the API. * The instance config's reconciling field becomes false. The returned long-running operation will have a name of the format `/operations/` and can be used to track the instance config modification. The metadata field type is UpdateInstanceConfigMetadata. The response field type is InstanceConfig, if successful. Authorization requires `spanner.instanceConfigs.update` permission on the resource name.
⊞ InstanceConfigs ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ InstanceConfigs ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ InstanceConfigs ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ InstanceConfigs ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Instances ProjectsLists the backup long-running operations in the given instance. A backup operation has a name of the form `projects//instances//backups//operations/`. The long-running operation metadata field type `metadata.type_url` describes the type of the metadata. Operations returned include those that have completed/failed/canceled within the last 7 days, and pending operations. Operations returned are ordered by `operation.metadata.value.progress.start_time` in descending order starting from the most recently started operation.
⊞ Instances ProjectsStarts copying a Cloud Spanner Backup. The returned backup long-running operation will have a name of the format `projects//instances//backups//operations/` and can be used to track copying of the backup. The operation is associated with the destination backup. The metadata field type is CopyBackupMetadata. The response field type is Backup, if successful. Cancelling the returned operation will stop the copying and delete the destination backup. Concurrent CopyBackup requests can run on the same source backup.
⊞ Instances ProjectsStarts creating a new Cloud Spanner Backup. The returned backup long-running operation will have a name of the format `projects//instances//backups//operations/` and can be used to track creation of the backup. The metadata field type is CreateBackupMetadata. The response field type is Backup, if successful. Cancelling the returned operation will stop the creation and delete the backup. There can be only one pending backup creation per database. Backup creation of different databases can run concurrently.
⊞ Instances ProjectsDeletes a pending or completed Backup.
⊞ Instances ProjectsGets metadata on a pending or completed Backup.
⊞ Instances ProjectsGets the access control policy for a database or backup resource. Returns an empty policy if a database or backup exists but does not have a policy set. Authorization requires `spanner.databases.getIamPolicy` permission on resource. For backups, authorization requires `spanner.backups.getIamPolicy` permission on resource.
⊞ Instances ProjectsLists completed and pending backups. Backups returned are ordered by `create_time` in descending order, starting from the most recent `create_time`.
⊞ Instances ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Instances ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Instances ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Instances ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Instances ProjectsUpdates a pending or completed Backup.
⊞ Instances ProjectsSets the access control policy on a database or backup resource. Replaces any existing policy. Authorization requires `spanner.databases.setIamPolicy` permission on resource. For backups, authorization requires `spanner.backups.setIamPolicy` permission on resource.
⊞ Instances ProjectsReturns permissions that the caller has on the specified database or backup resource. Attempting this RPC on a non-existent Cloud Spanner database will result in a NOT_FOUND error if the user has `spanner.databases.list` permission on the containing Cloud Spanner instance. Otherwise returns an empty set of permissions. Calling this method on a backup that does not exist will result in a NOT_FOUND error if the user has `spanner.backups.list` permission on the containing instance.
⊞ Instances ProjectsCreates an instance and begins preparing it to begin serving. The returned long-running operation can be used to track the progress of preparing the new instance. The instance name is assigned by the caller. If the named instance already exists, `CreateInstance` returns `ALREADY_EXISTS`. Immediately upon completion of this request: * The instance is readable via the API, with all requested attributes but no allocated resources. Its state is `CREATING`. Until completion of the returned operation: * Cancelling the operation renders the instance immediately unreadable via the API. * The instance can be deleted. * All other attempts to modify the instance are rejected. Upon completion of the returned operation: * Billing for all successfully-allocated resources begins (some types may have lower than the requested levels). * Databases can be created in the instance. * The instance's allocated resource levels are readable via the API. * The instance's state becomes `READY`. The returned long-running operation will have a name of the format `/operations/` and can be used to track creation of the instance. The metadata field type is CreateInstanceMetadata. The response field type is Instance, if successful.
⊞ Instances ProjectsLists database longrunning-operations. A database operation has a name of the form `projects//instances//databases//operations/`. The long-running operation metadata field type `metadata.type_url` describes the type of the metadata. Operations returned include those that have completed/failed/canceled within the last 7 days, and pending operations.
⊞ Instances ProjectsCreates a new Cloud Spanner database and starts to prepare it for serving. The returned long-running operation will have a name of the format `/operations/` and can be used to track preparation of the database. The metadata field type is CreateDatabaseMetadata. The response field type is Database, if successful.
⊞ Instances ProjectsLists Cloud Spanner database roles.
⊞ Instances ProjectsReturns permissions that the caller has on the specified database or backup resource. Attempting this RPC on a non-existent Cloud Spanner database will result in a NOT_FOUND error if the user has `spanner.databases.list` permission on the containing Cloud Spanner instance. Otherwise returns an empty set of permissions. Calling this method on a backup that does not exist will result in a NOT_FOUND error if the user has `spanner.backups.list` permission on the containing instance.
⊞ Instances ProjectsDrops (aka deletes) a Cloud Spanner database. Completed backups for the database will be retained according to their `expire_time`. Note: Cloud Spanner might continue to accept requests for a few seconds after the database has been deleted.
⊞ Instances ProjectsGets the state of a Cloud Spanner database.
⊞ Instances ProjectsReturns the schema of a Cloud Spanner database as a list of formatted DDL statements. This method does not show pending schema updates, those may be queried using the Operations API.
⊞ Instances ProjectsGets the access control policy for a database or backup resource. Returns an empty policy if a database or backup exists but does not have a policy set. Authorization requires `spanner.databases.getIamPolicy` permission on resource. For backups, authorization requires `spanner.backups.getIamPolicy` permission on resource.
⊞ Instances ProjectsRequest a specific scan with Database-specific data for Cloud Key Visualizer.
⊞ Instances ProjectsLists Cloud Spanner databases.
⊞ Instances ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Instances ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Instances ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Instances ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Instances ProjectsUpdates a Cloud Spanner database. The returned long-running operation can be used to track the progress of updating the database. If the named database does not exist, returns `NOT_FOUND`. While the operation is pending: * The database's reconciling field is set to true. * Cancelling the operation is best-effort. If the cancellation succeeds, the operation metadata's cancel_time is set, the updates are reverted, and the operation terminates with a `CANCELLED` status. * New UpdateDatabase requests will return a `FAILED_PRECONDITION` error until the pending operation is done (returns successfully or with error). * Reading the database via the API continues to give the pre-request values. Upon completion of the returned operation: * The new values are in effect and readable via the API. * The database's reconciling field becomes false. The returned long-running operation will have a name of the format `projects//instances//databases//operations/` and can be used to track the database modification. The metadata field type is UpdateDatabaseMetadata. The response field type is Database, if successful.
⊞ Instances ProjectsCreate a new database by restoring from a completed backup. The new database must be in the same project and in an instance with the same instance configuration as the instance containing the backup. The returned database long-running operation has a name of the format `projects//instances//databases//operations/`, and can be used to track the progress of the operation, and to cancel it. The metadata field type is RestoreDatabaseMetadata. The response type is Database, if successful. Cancelling the returned operation will stop the restore and delete the database. There can be only one database being restored into an instance at a time. Once the restore operation completes, a new restore operation can be initiated, without waiting for the optimize operation associated with the first restore to complete.
⊞ Instances ProjectsCreates multiple new sessions. This API can be used to initialize a session cache on the clients. See https://goo.gl/TgSFN2 for best practices on session cache management.
⊞ Instances ProjectsBatches the supplied mutation groups in a collection of efficient transactions. All mutations in a group are committed atomically. However, mutations across groups can be committed non-atomically in an unspecified order and thus, they must be independent of each other. Partial failure is possible, i.e., some groups may have been committed successfully, while some may have failed. The results of individual batches are streamed into the response as the batches are applied. BatchWrite requests are not replay protected, meaning that each mutation group may be applied more than once. Replays of non-idempotent mutations may have undesirable effects. For example, replays of an insert mutation may produce an already exists error or if you use generated or commit timestamp-based keys, it may result in additional rows being added to the mutation's table. We recommend structuring your mutation groups to be idempotent to avoid this issue.
⊞ Instances ProjectsBegins a new transaction. This step can often be skipped: Read, ExecuteSql and Commit can begin a new transaction as a side-effect.
⊞ Instances ProjectsCommits a transaction. The request includes the mutations to be applied to rows in the database. `Commit` might return an `ABORTED` error. This can occur at any time; commonly, the cause is conflicts with concurrent transactions. However, it can also happen for a variety of other reasons. If `Commit` returns `ABORTED`, the caller should re-attempt the transaction from the beginning, re-using the same session. On very rare occasions, `Commit` might return `UNKNOWN`. This can happen, for example, if the client job experiences a 1+ hour networking failure. At that point, Cloud Spanner has lost track of the transaction outcome and we recommend that you perform another read from the database to see the state of things as they are now.
⊞ Instances ProjectsCreates a new session. A session can be used to perform transactions that read and/or modify data in a Cloud Spanner database. Sessions are meant to be reused for many consecutive transactions. Sessions can only execute one transaction at a time. To execute multiple concurrent read-write/write-only transactions, create multiple sessions. Note that standalone reads and queries use a transaction internally, and count toward the one transaction limit. Active sessions use additional server resources, so it is a good idea to delete idle and unneeded sessions. Aside from explicit deletes, Cloud Spanner may delete sessions for which no operations are sent for more than an hour. If a session is deleted, requests to it return `NOT_FOUND`. Idle sessions can be kept alive by sending a trivial SQL query periodically, e.g., `"SELECT 1"`.
⊞ Instances ProjectsEnds a session, releasing server resources associated with it. This will asynchronously trigger cancellation of any operations that are running with this session.
⊞ Instances ProjectsExecutes a batch of SQL DML statements. This method allows many statements to be run with lower latency than submitting them sequentially with ExecuteSql. Statements are executed in sequential order. A request can succeed even if a statement fails. The ExecuteBatchDmlResponse.status field in the response provides information about the statement that failed. Clients must inspect this field to determine whether an error occurred. Execution stops after the first failed statement; the remaining statements are not executed.
⊞ Instances ProjectsExecutes an SQL statement, returning all results in a single reply. This method cannot be used to return a result set larger than 10 MiB; if the query yields more data than that, the query fails with a `FAILED_PRECONDITION` error. Operations inside read-write transactions might return `ABORTED`. If this occurs, the application should restart the transaction from the beginning. See Transaction for more details. Larger result sets can be fetched in streaming fashion by calling ExecuteStreamingSql instead.
⊞ Instances ProjectsLike ExecuteSql, except returns the result set as a stream. Unlike ExecuteSql, there is no limit on the size of the returned result set. However, no individual row in the result set can exceed 100 MiB, and no column value can exceed 10 MiB.
⊞ Instances ProjectsGets a session. Returns `NOT_FOUND` if the session does not exist. This is mainly useful for determining whether a session is still alive.
⊞ Instances ProjectsLists all sessions in a given database.
⊞ Instances ProjectsCreates a set of partition tokens that can be used to execute a query operation in parallel. Each of the returned partition tokens can be used by ExecuteStreamingSql to specify a subset of the query result to read. The same session and read-only transaction must be used by the PartitionQueryRequest used to create the partition tokens and the ExecuteSqlRequests that use the partition tokens. Partition tokens become invalid when the session used to create them is deleted, is idle for too long, begins a new transaction, or becomes too old. When any of these happen, it is not possible to resume the query, and the whole operation must be restarted from the beginning.
⊞ Instances ProjectsCreates a set of partition tokens that can be used to execute a read operation in parallel. Each of the returned partition tokens can be used by StreamingRead to specify a subset of the read result to read. The same session and read-only transaction must be used by the PartitionReadRequest used to create the partition tokens and the ReadRequests that use the partition tokens. There are no ordering guarantees on rows returned among the returned partition tokens, or even within each individual StreamingRead call issued with a partition_token. Partition tokens become invalid when the session used to create them is deleted, is idle for too long, begins a new transaction, or becomes too old. When any of these happen, it is not possible to resume the read, and the whole operation must be restarted from the beginning.
⊞ Instances ProjectsReads rows from the database using key lookups and scans, as a simple key/value style alternative to ExecuteSql. This method cannot be used to return a result set larger than 10 MiB; if the read matches more data than that, the read fails with a `FAILED_PRECONDITION` error. Reads inside read-write transactions might return `ABORTED`. If this occurs, the application should restart the transaction from the beginning. See Transaction for more details. Larger result sets can be yielded in streaming fashion by calling StreamingRead instead.
⊞ Instances ProjectsRolls back a transaction, releasing any locks it holds. It is a good idea to call this for any transaction that includes one or more Read or ExecuteSql requests and ultimately decides not to commit. `Rollback` returns `OK` if it successfully aborts the transaction, the transaction was already aborted, or the transaction is not found. `Rollback` never returns `ABORTED`.
⊞ Instances ProjectsLike Read, except returns the result set as a stream. Unlike Read, there is no limit on the size of the returned result set. However, no individual row in the result set can exceed 100 MiB, and no column value can exceed 10 MiB.
⊞ Instances ProjectsSets the access control policy on a database or backup resource. Replaces any existing policy. Authorization requires `spanner.databases.setIamPolicy` permission on resource. For backups, authorization requires `spanner.backups.setIamPolicy` permission on resource.
⊞ Instances ProjectsReturns permissions that the caller has on the specified database or backup resource. Attempting this RPC on a non-existent Cloud Spanner database will result in a NOT_FOUND error if the user has `spanner.databases.list` permission on the containing Cloud Spanner instance. Otherwise returns an empty set of permissions. Calling this method on a backup that does not exist will result in a NOT_FOUND error if the user has `spanner.backups.list` permission on the containing instance.
⊞ Instances ProjectsUpdates the schema of a Cloud Spanner database by creating/altering/dropping tables, columns, indexes, etc. The returned long-running operation will have a name of the format `/operations/` and can be used to track execution of the schema change(s). The metadata field type is UpdateDatabaseDdlMetadata. The operation has no response.
⊞ Instances ProjectsDeletes an instance. Immediately upon completion of the request: * Billing ceases for all of the instance's reserved resources. Soon afterward: * The instance and *all of its databases* immediately and irrevocably disappear from the API. All data in the databases is permanently deleted.
⊞ Instances ProjectsGets information about a particular instance.
⊞ Instances ProjectsGets the access control policy for an instance resource. Returns an empty policy if an instance exists but does not have a policy set. Authorization requires `spanner.instances.getIamPolicy` on resource.
⊞ Instances ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Instances ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Instances ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Instances ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Instances ProjectsLists all instances in the given project.
⊞ Instances ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Instances ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Instances ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Instances ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Instances ProjectsUpdates an instance, and begins allocating or releasing resources as requested. The returned long-running operation can be used to track the progress of updating the instance. If the named instance does not exist, returns `NOT_FOUND`. Immediately upon completion of this request: * For resource types for which a decrease in the instance's allocation has been requested, billing is based on the newly-requested level. Until completion of the returned operation: * Cancelling the operation sets its metadata's cancel_time, and begins restoring resources to their pre-request values. The operation is guaranteed to succeed at undoing all resource changes, after which point it terminates with a `CANCELLED` status. * All other attempts to modify the instance are rejected. * Reading the instance via the API continues to give the pre-request resource levels. Upon completion of the returned operation: * Billing begins for all successfully-allocated resources (some types may have lower than the requested levels). * All newly-reserved resources are available for serving the instance's tables. * The instance's new resource levels are readable via the API. The returned long-running operation will have a name of the format `/operations/` and can be used to track the instance modification. The metadata field type is UpdateInstanceMetadata. The response field type is Instance, if successful. Authorization requires `spanner.instances.update` permission on the resource name.
⊞ Instances ProjectsSets the access control policy on an instance resource. Replaces any existing policy. Authorization requires `spanner.instances.setIamPolicy` on resource.
⊞ Instances ProjectsReturns permissions that the caller has on the specified instance resource. Attempting this RPC on a non-existent Cloud Spanner instance resource will result in a NOT_FOUND error if the user has `spanner.instances.list` permission on the containing Google Cloud Project. Otherwise returns an empty set of permissions.
⊞ List ScansReturn available scans given a Database-specific resource name.
Recommender API v1
⊞ Locations BillingAccountsGets the requested InsightTypeConfig. There is only one instance of the config for each InsightType.
⊞ Locations BillingAccountsGets the requested insight. Requires the recommender.*.get IAM permission for the specified insight type.
⊞ Locations BillingAccountsLists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.
⊞ Locations BillingAccountsMarks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.
⊞ Locations BillingAccountsUpdates an InsightTypeConfig change. This will create a new revision of the config.
⊞ Locations BillingAccountsGets the requested Recommender Config. There is only one instance of the config for each Recommender.
⊞ Locations BillingAccountsGets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.
⊞ Locations BillingAccountsLists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.
⊞ Locations BillingAccountsMarks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED, SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations BillingAccountsMark the Recommendation State as Dismissed. Users can use this method to indicate to the Recommender API that an ACTIVE recommendation has to be marked back as DISMISSED. MarkRecommendationDismissed can be applied to recommendations in ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations BillingAccountsMarks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations BillingAccountsMarks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations BillingAccountsUpdates a Recommender Config. This will create a new revision of the config.
⊞ Locations FoldersGets the requested insight. Requires the recommender.*.get IAM permission for the specified insight type.
⊞ Locations FoldersLists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.
⊞ Locations FoldersMarks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.
⊞ Locations FoldersGets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.
⊞ Locations FoldersLists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.
⊞ Locations FoldersMarks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED, SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations FoldersMark the Recommendation State as Dismissed. Users can use this method to indicate to the Recommender API that an ACTIVE recommendation has to be marked back as DISMISSED. MarkRecommendationDismissed can be applied to recommendations in ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations FoldersMarks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations FoldersMarks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations OrganizationsGets the requested InsightTypeConfig. There is only one instance of the config for each InsightType.
⊞ Locations OrganizationsGets the requested insight. Requires the recommender.*.get IAM permission for the specified insight type.
⊞ Locations OrganizationsLists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.
⊞ Locations OrganizationsMarks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.
⊞ Locations OrganizationsUpdates an InsightTypeConfig change. This will create a new revision of the config.
⊞ Locations OrganizationsGets the requested Recommender Config. There is only one instance of the config for each Recommender.
⊞ Locations OrganizationsGets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.
⊞ Locations OrganizationsLists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.
⊞ Locations OrganizationsMarks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED, SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations OrganizationsMark the Recommendation State as Dismissed. Users can use this method to indicate to the Recommender API that an ACTIVE recommendation has to be marked back as DISMISSED. MarkRecommendationDismissed can be applied to recommendations in ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations OrganizationsMarks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations OrganizationsMarks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations OrganizationsUpdates a Recommender Config. This will create a new revision of the config.
⊞ Locations ProjectsGets the requested InsightTypeConfig. There is only one instance of the config for each InsightType.
⊞ Locations ProjectsGets the requested insight. Requires the recommender.*.get IAM permission for the specified insight type.
⊞ Locations ProjectsLists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.
⊞ Locations ProjectsMarks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.
⊞ Locations ProjectsUpdates an InsightTypeConfig change. This will create a new revision of the config.
⊞ Locations ProjectsGets the requested Recommender Config. There is only one instance of the config for each Recommender.
⊞ Locations ProjectsGets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.
⊞ Locations ProjectsLists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.
⊞ Locations ProjectsMarks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED, SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations ProjectsMark the Recommendation State as Dismissed. Users can use this method to indicate to the Recommender API that an ACTIVE recommendation has to be marked back as DISMISSED. MarkRecommendationDismissed can be applied to recommendations in ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations ProjectsMarks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations ProjectsMarks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
⊞ Locations ProjectsUpdates a Recommender Config. This will create a new revision of the config.
Data Lineage API v1
⊞ Locations ProjectsRetrieve information about LineageProcesses associated with specific links. LineageProcesses are transformation pipelines that result in data flowing from **source** to **target** assets. Links between assets represent this operation. If you have specific link names, you can use this method to verify which LineageProcesses contribute to creating those links. See the SearchLinks method for more information on how to retrieve link name. You can retrieve the LineageProcess information in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates new lineage events together with their parents: process and run. Updates the process and run if they already exist. Mapped from Open Lineage specification: https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.json.
⊞ Locations ProjectsCreates a new process.
⊞ Locations ProjectsDeletes the process with the specified name.
⊞ Locations ProjectsGets the details of the specified process.
⊞ Locations ProjectsList processes in the given project and location. List order is descending by insertion time.
⊞ Locations ProjectsUpdates a process.
⊞ Locations ProjectsCreates a new run.
⊞ Locations ProjectsDeletes the run with the specified name.
⊞ Locations ProjectsGets the details of the specified run.
⊞ Locations ProjectsCreates a new lineage event.
⊞ Locations ProjectsDeletes the lineage event with the specified name.
⊞ Locations ProjectsGets details of a specified lineage event.
⊞ Locations ProjectsLists lineage events in the given project and location. The list order is not defined.
⊞ Locations ProjectsLists runs in the given project and location. List order is descending by `start_time`.
⊞ Locations ProjectsUpdates a run.
⊞ Locations ProjectsRetrieve a list of links connected to a specific asset. Links represent the data flow between **source** (upstream) and **target** (downstream) assets in transformation pipelines. Links are stored in the same project as the Lineage Events that create them. You can retrieve links in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota.
Eventarc API v1
⊞ Locations ProjectsCreate a new ChannelConnection in a particular project and location.
⊞ Locations ProjectsDelete a single ChannelConnection.
⊞ Locations ProjectsGet a single ChannelConnection.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsList channel connections.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreate a new channel in a particular project and location.
⊞ Locations ProjectsDelete a single channel.
⊞ Locations ProjectsGet a single Channel.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsList channels.
⊞ Locations ProjectsUpdate a single channel.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsGet a GoogleChannelConfig
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsGet a single Provider.
⊞ Locations ProjectsList providers.
⊞ Locations ProjectsCreate a new trigger in a particular project and location.
⊞ Locations ProjectsDelete a single trigger.
⊞ Locations ProjectsGet a single trigger.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsList triggers.
⊞ Locations ProjectsUpdate a single trigger.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUpdate a single GoogleChannelConfig
Policy Analyzer API v1
⊞ Locations ProjectsQueries policy activities on Google Cloud resources.
Pub/Sub Lite API v1
⊞ Projects AdminStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Projects AdminDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Projects AdminGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Projects AdminLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Projects AdminCreates a new reservation.
⊞ Projects AdminDeletes the specified reservation.
⊞ Projects AdminReturns the reservation configuration.
⊞ Projects AdminReturns the list of reservations for the given project.
⊞ Projects AdminUpdates properties of the specified reservation.
⊞ Projects AdminLists the topics attached to the specified reservation.
⊞ Projects AdminCreates a new subscription.
⊞ Projects AdminDeletes the specified subscription.
⊞ Projects AdminReturns the subscription configuration.
⊞ Projects AdminReturns the list of subscriptions for the given project.
⊞ Projects AdminUpdates properties of the specified subscription.
⊞ Projects AdminPerforms an out-of-band seek for a subscription to a specified target, which may be timestamps or named positions within the message backlog. Seek translates these targets to cursors for each partition and orchestrates subscribers to start consuming messages from these seek cursors. If an operation is returned, the seek has been registered and subscribers will eventually receive messages from the seek cursors (i.e. eventual consistency), as long as they are using a minimum supported client library version and not a system that tracks cursors independently of Pub/Sub Lite (e.g. Apache Beam, Dataflow, Spark). The seek operation will fail for unsupported clients. If clients would like to know when subscribers react to the seek (or not), they can poll the operation. The seek operation will succeed and complete once subscribers are ready to receive messages from the seek cursors for all partitions of the topic. This means that the seek operation will not complete until all subscribers come online. If the previous seek operation has not yet completed, it will be aborted and the new invocation of seek will supersede it.
⊞ Projects AdminCreates a new topic.
⊞ Projects AdminDeletes the specified topic.
⊞ Projects AdminReturns the topic configuration.
⊞ Projects AdminReturns the partition information for the requested topic.
⊞ Projects AdminReturns the list of topics for the given project.
⊞ Projects AdminUpdates properties of the specified topic.
⊞ Projects AdminLists the subscriptions attached to the specified topic.
⊞ Projects CursorUpdates the committed cursor.
⊞ Projects CursorReturns all committed cursor information for a subscription.
⊞ Projects TopicStatsCompute the head cursor for the partition. The head cursor's offset is guaranteed to be less than or equal to all messages which have not yet been acknowledged as published, and greater than the offset of any message whose publish has already been acknowledged. It is zero if there have never been messages in the partition.
⊞ Projects TopicStatsCompute statistics about a range of messages in a given topic and partition.
⊞ Projects TopicStatsCompute the corresponding cursor for a publish or event time in a topic partition.
BeyondCorp API v1
⊞ Locations OrganizationsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations OrganizationsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations OrganizationsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations OrganizationsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations OrganizationsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations OrganizationsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations OrganizationsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations OrganizationsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations OrganizationsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations OrganizationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations OrganizationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations OrganizationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations OrganizationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new AppConnection in a given project and location.
⊞ Locations ProjectsDeletes a single AppConnection.
⊞ Locations ProjectsGets details of a single AppConnection.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists AppConnections in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single AppConnection.
⊞ Locations ProjectsResolves AppConnections details for a given AppConnector. An internal method called by a connector to find AppConnections to connect to.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new AppConnector in a given project and location.
⊞ Locations ProjectsDeletes a single AppConnector.
⊞ Locations ProjectsGets details of a single AppConnector.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists AppConnectors in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single AppConnector.
⊞ Locations ProjectsReport status for a given connector.
⊞ Locations ProjectsGets instance configuration for a given AppConnector. An internal method called by a AppConnector to get its container config.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new AppGateway in a given project and location.
⊞ Locations ProjectsDeletes a single AppGateway.
⊞ Locations ProjectsGets details of a single AppGateway.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists AppGateways in a given project and location.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
reCAPTCHA Enterprise API v1
⊞ Assessments ProjectsAnnotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent.
⊞ Assessments ProjectsCreates an Assessment of the likelihood an event is legitimate.
⊞ Firewallpolicies ProjectsCreates a new FirewallPolicy, specifying conditions at which reCAPTCHA Enterprise actions can be executed. A project may have a maximum of 1000 policies.
⊞ Firewallpolicies ProjectsDeletes the specified firewall policy.
⊞ Firewallpolicies ProjectsReturns the specified firewall policy.
⊞ Firewallpolicies ProjectsReturns the list of all firewall policies that belong to a project.
⊞ Firewallpolicies ProjectsUpdates the specified firewall policy.
⊞ Keys ProjectsCreates a new reCAPTCHA Enterprise key.
⊞ Keys ProjectsDeletes the specified key.
⊞ Keys ProjectsReturns the specified key.
⊞ Keys ProjectsGet some aggregated metrics for a Key. This data can be used to build dashboards.
⊞ Keys ProjectsReturns the list of all keys that belong to a project.
⊞ Keys ProjectsMigrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.
⊞ Keys ProjectsUpdates the specified key.
⊞ Keys ProjectsReturns the secret key related to the specified public key. You must use the legacy secret key only in a 3rd party integration with legacy reCAPTCHA.
⊞ Relatedaccountgroupmemberships ProjectsSearch group memberships related to a given account.
⊞ Relatedaccountgroups ProjectsList groups of related accounts.
⊞ Relatedaccountgroups ProjectsGet memberships in a group of related accounts.
GKE Hub API v1
⊞ Locations OrganizationsReturns all fleets within an organization or a project that the caller has access to.
⊞ Locations ProjectsAdds a new Feature.
⊞ Locations ProjectsRemoves a Feature.
⊞ Locations ProjectsGets details of a single Feature.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Features in a given project and location.
⊞ Locations ProjectsUpdates an existing Feature.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a fleet.
⊞ Locations ProjectsRemoves a Fleet. There must be no memberships remaining in the Fleet.
⊞ Locations ProjectsReturns the details of a fleet.
⊞ Locations ProjectsReturns all fleets within an organization or a project that the caller has access to.
⊞ Locations ProjectsUpdates a fleet.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a MembershipBinding.
⊞ Locations ProjectsDeletes a MembershipBinding.
⊞ Locations ProjectsReturns the details of a MembershipBinding.
⊞ Locations ProjectsLists MembershipBindings.
⊞ Locations ProjectsUpdates a MembershipBinding.
⊞ Locations ProjectsCreates a new Membership. **This is currently only supported for GKE clusters on Google Cloud**. To register other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
⊞ Locations ProjectsRemoves a Membership. **This is currently only supported for GKE clusters on Google Cloud**. To unregister other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
⊞ Locations ProjectsGenerates the manifest for deployment of the GKE connect agent. **This method is used internally by Google-provided libraries.** Most clients should not need to call this method directly.
⊞ Locations ProjectsGets the details of a Membership.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Memberships in a given project and location.
⊞ Locations ProjectsUpdates an existing Membership.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a Scope.
⊞ Locations ProjectsDeletes a Scope.
⊞ Locations ProjectsReturns the details of a Scope.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Scopes.
⊞ Locations ProjectsCreates a fleet namespace.
⊞ Locations ProjectsDeletes a fleet namespace.
⊞ Locations ProjectsReturns the details of a fleet namespace.
⊞ Locations ProjectsLists fleet namespaces.
⊞ Locations ProjectsUpdates a fleet namespace.
⊞ Locations ProjectsUpdates a scopes.
⊞ Locations ProjectsCreates a Scope RBACRoleBinding.
⊞ Locations ProjectsDeletes a Scope RBACRoleBinding.
⊞ Locations ProjectsReturns the details of a Scope RBACRoleBinding.
⊞ Locations ProjectsLists all Scope RBACRoleBindings.
⊞ Locations ProjectsUpdates a Scope RBACRoleBinding.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
Workflow Executions API v1
⊞ Locations ProjectsReturns a list of active callbacks that belong to the execution with the given name. The returned callbacks are ordered by callback ID.
⊞ Locations ProjectsCancels an execution of the given name.
⊞ Locations ProjectsCreates a new execution using the latest revision of the given workflow.
⊞ Locations ProjectsReturns all metadata stored about an execution, excluding most data that is already accessible using other API methods.
⊞ Locations ProjectsReturns an execution of the given name.
⊞ Locations ProjectsReturns a list of executions which belong to the workflow with the given name. The method returns executions of all workflow revisions. Returned executions are ordered by their start time (newest first).
⊞ Locations ProjectsGets a step entry.
⊞ Locations ProjectsLists step entries for the corresponding workflow execution. Returned entries are ordered by their create_time.
⊞ Locations ProjectsTriggers a new execution using the latest revision of the given workflow by a Pub/Sub push notification.
Workload Manager API v1
⊞ Locations ProjectsCreates a new Evaluation in a given project and location.
⊞ Locations ProjectsGets details of a single Execution.
⊞ Locations ProjectsLists Executions in a given project and location.
⊞ Locations ProjectsList the running result of a single Execution.
⊞ Locations ProjectsCreates a new Execution in a given project and location.
⊞ Locations ProjectsList all scanned resources for a single Execution.
⊞ Locations ProjectsGets details of a single Evaluation.
⊞ Locations ProjectsLists Evaluations in a given project and location.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsWrite the data insights to workload manager data warehouse.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsLists rules in a given project.
BigQuery Connection API v1beta1
⊞ Locations ProjectsCreates a new connection.
⊞ Locations ProjectsDeletes connection and associated credential.
⊞ Locations ProjectsReturns specified connection.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns a list of connections in the given project.
⊞ Locations ProjectsUpdates the specified connection. For security reasons, also resets credential if connection properties are in the update field mask.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsSets the credential for the specified connection.
Policy Simulator API v1
⊞ Locations FoldersCreates and starts a Replay using the given ReplayConfig.
⊞ Locations FoldersGets the specified Replay. Each `Replay` is available for at least 7 days.
⊞ Locations FoldersGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations FoldersLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations FoldersLists the results of running a Replay.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations OrganizationsCreates and starts a Replay using the given ReplayConfig.
⊞ Locations OrganizationsGets the specified Replay. Each `Replay` is available for at least 7 days.
⊞ Locations OrganizationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations OrganizationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations OrganizationsLists the results of running a Replay.
⊞ Locations ProjectsCreates and starts a Replay using the given ReplayConfig.
⊞ Locations ProjectsGets the specified Replay. Each `Replay` is available for at least 7 days.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsLists the results of running a Replay.
Library Agent API v1
⊞ Books ShelvesBorrow a book from the library. Returns the book if it is borrowed successfully. Returns NOT_FOUND if the book does not exist in the library. Returns quota exceeded error if the amount of books borrowed exceeds allocation quota in any dimensions.
⊞ Books ShelvesGets a book. Returns NOT_FOUND if the book does not exist.
⊞ Books ShelvesLists books in a shelf. The order is unspecified but deterministic. Newly created books will not necessarily be added to the end of this list. Returns NOT_FOUND if the shelf does not exist.
⊞ Books ShelvesReturn a book to the library. Returns the book if it is returned to the library successfully. Returns error if the book does not belong to the library or the users didn't borrow before.
⊞ Get ShelvesGets a shelf. Returns NOT_FOUND if the shelf does not exist.
⊞ List ShelvesLists shelves. The order is unspecified but deterministic. Newly created shelves will not necessarily be added to the end of this list.
Web Security Scanner API v1
⊞ ScanConfigs ProjectsCreates a new ScanConfig.
⊞ ScanConfigs ProjectsDeletes an existing ScanConfig and its child resources.
⊞ ScanConfigs ProjectsGets a ScanConfig.
⊞ ScanConfigs ProjectsLists ScanConfigs under a given project.
⊞ ScanConfigs ProjectsUpdates a ScanConfig. This method support partial update of a ScanConfig.
⊞ ScanConfigs ProjectsList CrawledUrls under a given ScanRun.
⊞ ScanConfigs ProjectsList all FindingTypeStats under a given ScanRun.
⊞ ScanConfigs ProjectsGets a Finding.
⊞ ScanConfigs ProjectsList Findings under a given ScanRun.
⊞ ScanConfigs ProjectsGets a ScanRun.
⊞ ScanConfigs ProjectsLists ScanRuns under a given ScanConfig, in descending order of ScanRun stop time.
⊞ ScanConfigs ProjectsStops a ScanRun. The stopped ScanRun is returned.
⊞ ScanConfigs ProjectsStart a ScanRun according to the given ScanConfig.
Cloud Key Management Service (KMS) API v1
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new EkmConnection in a given Project and Location.
⊞ Locations ProjectsReturns metadata for a given EkmConnection.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists EkmConnections.
⊞ Locations ProjectsUpdates an EkmConnection's metadata.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsVerifies that Cloud KMS can successfully connect to the external key manager specified by an EkmConnection. If there is an error connecting to the EKM, this method returns a FAILED_PRECONDITION status containing structured information as described at https://cloud.google.com/kms/docs/reference/ekm_errors.
⊞ Locations ProjectsGenerate random bytes using the Cloud KMS randomness source in the provided location.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsReturns the EkmConfig singleton resource for a given project and location.
⊞ Locations ProjectsCreate a new KeyRing in a given Project and Location.
⊞ Locations ProjectsCreate a new CryptoKey within a KeyRing. CryptoKey.purpose and CryptoKey.version_template.algorithm are required.
⊞ Locations ProjectsDecrypts data that was encrypted with a public key retrieved from GetPublicKey corresponding to a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_DECRYPT.
⊞ Locations ProjectsSigns data using a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_SIGN, producing a signature that can be verified with the public key retrieved from GetPublicKey.
⊞ Locations ProjectsCreate a new CryptoKeyVersion in a CryptoKey. The server will assign the next sequential id. If unset, state will be set to ENABLED.
⊞ Locations ProjectsSchedule a CryptoKeyVersion for destruction. Upon calling this method, CryptoKeyVersion.state will be set to DESTROY_SCHEDULED, and destroy_time will be set to the time destroy_scheduled_duration in the future. At that time, the state will automatically change to DESTROYED, and the key material will be irrevocably destroyed. Before the destroy_time is reached, RestoreCryptoKeyVersion may be called to reverse the process.
⊞ Locations ProjectsReturns metadata for a given CryptoKeyVersion.
⊞ Locations ProjectsReturns the public key for the given CryptoKeyVersion. The CryptoKey.purpose must be ASYMMETRIC_SIGN or ASYMMETRIC_DECRYPT.
⊞ Locations ProjectsImport wrapped key material into a CryptoKeyVersion. All requests must specify a CryptoKey. If a CryptoKeyVersion is additionally specified in the request, key material will be reimported into that version. Otherwise, a new version will be created, and will be assigned the next sequential id within the CryptoKey.
⊞ Locations ProjectsLists CryptoKeyVersions.
⊞ Locations ProjectsSigns data using a CryptoKeyVersion with CryptoKey.purpose MAC, producing a tag that can be verified by another source with the same key.
⊞ Locations ProjectsVerifies MAC tag using a CryptoKeyVersion with CryptoKey.purpose MAC, and returns a response that indicates whether or not the verification was successful.
⊞ Locations ProjectsUpdate a CryptoKeyVersion's metadata. state may be changed between ENABLED and DISABLED using this method. See DestroyCryptoKeyVersion and RestoreCryptoKeyVersion to move between other states.
⊞ Locations ProjectsDecrypts data that was originally encrypted using a raw cryptographic mechanism. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT.
⊞ Locations ProjectsEncrypts data using portable cryptographic primitives. Most users should choose Encrypt and Decrypt rather than their raw counterparts. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT.
⊞ Locations ProjectsRestore a CryptoKeyVersion in the DESTROY_SCHEDULED state. Upon restoration of the CryptoKeyVersion, state will be set to DISABLED, and destroy_time will be cleared.
⊞ Locations ProjectsDecrypts data that was protected by Encrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.
⊞ Locations ProjectsEncrypts data, so that it can only be recovered by a call to Decrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.
⊞ Locations ProjectsReturns metadata for a given CryptoKey, as well as its primary CryptoKeyVersion.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists CryptoKeys.
⊞ Locations ProjectsUpdate a CryptoKey.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUpdate the version of a CryptoKey that will be used in Encrypt. Returns an error if called on a key whose purpose is not ENCRYPT_DECRYPT.
⊞ Locations ProjectsReturns metadata for a given KeyRing.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsCreate a new ImportJob within a KeyRing. ImportJob.import_method is required.
⊞ Locations ProjectsReturns metadata for a given ImportJob.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists ImportJobs.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists KeyRings.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsUpdates the EkmConfig singleton resource for a given project and location.
VM Migration API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsAdds a MigratingVm to a Group.
⊞ Locations ProjectsCreates a new Group in a given project and location.
⊞ Locations ProjectsDeletes a single Group.
⊞ Locations ProjectsGets details of a single Group.
⊞ Locations ProjectsLists Groups in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Group.
⊞ Locations ProjectsRemoves a MigratingVm from a Group.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new Source in a given project and location.
⊞ Locations ProjectsCreates a new DatacenterConnector in a given Source.
⊞ Locations ProjectsDeletes a single DatacenterConnector.
⊞ Locations ProjectsGets details of a single DatacenterConnector.
⊞ Locations ProjectsLists DatacenterConnectors in a given Source.
⊞ Locations ProjectsUpgrades the appliance relate to this DatacenterConnector to the in-place updateable version.
⊞ Locations ProjectsDeletes a single Source.
⊞ Locations ProjectsList remote source's inventory of VMs. The remote source is the onprem vCenter (remote in the sense it's not in Compute Engine). The inventory describes the list of existing VMs in that source. Note that this operation lists the VMs on the remote source, as opposed to listing the MigratingVms resources in the vmmigration service.
⊞ Locations ProjectsGets details of a single Source.
⊞ Locations ProjectsLists Sources in a given project and location.
⊞ Locations ProjectsInitiates the cancellation of a running clone job.
⊞ Locations ProjectsInitiates a Clone of a specific migrating VM.
⊞ Locations ProjectsGets details of a single CloneJob.
⊞ Locations ProjectsLists CloneJobs of a given migrating VM.
⊞ Locations ProjectsCreates a new MigratingVm in a given Source.
⊞ Locations ProjectsInitiates the cancellation of a running cutover job.
⊞ Locations ProjectsInitiates a Cutover of a specific migrating VM. The returned LRO is completed when the cutover job resource is created and the job is initiated.
⊞ Locations ProjectsGets details of a single CutoverJob.
⊞ Locations ProjectsLists CutoverJobs of a given migrating VM.
⊞ Locations ProjectsDeletes a single MigratingVm.
⊞ Locations ProjectsMarks a migration as completed, deleting migration resources that are no longer being used. Only applicable after cutover is done.
⊞ Locations ProjectsGets details of a single MigratingVm.
⊞ Locations ProjectsLists MigratingVms in a given Source.
⊞ Locations ProjectsUpdates the parameters of a single MigratingVm.
⊞ Locations ProjectsPauses a migration for a VM. If cycle tasks are running they will be cancelled, preserving source task data. Further replication cycles will not be triggered while the VM is paused.
⊞ Locations ProjectsGets details of a single ReplicationCycle.
⊞ Locations ProjectsLists ReplicationCycles in a given MigratingVM.
⊞ Locations ProjectsResumes a migration for a VM. When called on a paused migration, will start the process of uploading data and creating snapshots; when called on a completed cut-over migration, will update the migration to active state and start the process of uploading data and creating snapshots.
⊞ Locations ProjectsStarts migration for a VM. Starts the process of uploading data and creating snapshots, in replication cycles scheduled by the policy.
⊞ Locations ProjectsUpdates the parameters of a single Source.
⊞ Locations ProjectsCreates a new UtilizationReport.
⊞ Locations ProjectsDeletes a single Utilization Report.
⊞ Locations ProjectsGets a single Utilization Report.
⊞ Locations ProjectsLists Utilization Reports of the given Source.
⊞ Locations ProjectsCreates a new TargetProject in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsDeletes a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsGets details of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsLists TargetProjects in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
⊞ Locations ProjectsUpdates the parameters of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
SAS Portal API v1alpha1
⊞ CheckHasProvisionedDeployment CustomersChecks whether a SAS deployment for the authentication context exists.
⊞ Deployments CustomersCreates a new deployment.
⊞ Deployments CustomersDeletes a deployment.
⊞ Deployments CustomersCreates a device under a node or customer.
⊞ Deployments CustomersCreates a signed device under a node or customer.
⊞ Deployments CustomersLists devices under a node or customer.
⊞ Deployments CustomersReturns a requested deployment.
⊞ Deployments CustomersLists deployments.
⊞ Deployments CustomersMoves a deployment under another node or customer.
⊞ Deployments CustomersUpdates an existing deployment.
⊞ Devices CustomersCreates a device under a node or customer.
⊞ Devices CustomersCreates a signed device under a node or customer.
⊞ Devices CustomersDeletes a device.
⊞ Devices CustomersGets details about a device.
⊞ Devices CustomersLists devices under a node or customer.
⊞ Devices CustomersMoves a device under another node or customer.
⊞ Devices CustomersUpdates a device.
⊞ Devices CustomersSigns a device.
⊞ Devices CustomersUpdates a signed device.
⊞ Get CustomersReturns a requested customer.
⊞ List CustomersReturns a list of requested customers.
⊞ MigrateOrganization CustomersMigrates a SAS organization to the cloud. This will create GCP projects for each deployment and associate them. The SAS Organization is linked to the gcp project that called the command. go/sas-legacy-customer-migration
⊞ Nodes CustomersCreates a new node.
⊞ Nodes CustomersDeletes a node.
⊞ Nodes CustomersCreates a new deployment.
⊞ Nodes CustomersLists deployments.
⊞ Nodes CustomersCreates a device under a node or customer.
⊞ Nodes CustomersCreates a signed device under a node or customer.
⊞ Nodes CustomersLists devices under a node or customer.
⊞ Nodes CustomersReturns a requested node.
⊞ Nodes CustomersLists nodes.
⊞ Nodes CustomersMoves a node under another node or customer.
⊞ Nodes CustomersCreates a new node.
⊞ Nodes CustomersLists nodes.
⊞ Nodes CustomersUpdates an existing node.
⊞ Patch CustomersUpdates an existing customer.
⊞ ProvisionDeployment CustomersCreates a new SAS deployment through the GCP workflow. Creates a SAS organization if an organization match is not found.
⊞ SetupSasAnalytics CustomersSetups the a GCP Project to receive SAS Analytics messages via GCP Pub/Sub with a subscription to BigQuery. All the Pub/Sub topics and BigQuery tables are created automatically as part of this service.
⊞ Devices DeploymentsDeletes a device.
⊞ Devices DeploymentsGets details about a device.
⊞ Devices DeploymentsMoves a device under another node or customer.
⊞ Devices DeploymentsUpdates a device.
⊞ Devices DeploymentsSigns a device.
⊞ Devices DeploymentsUpdates a signed device.
⊞ Get DeploymentsReturns a requested deployment.
⊞ GenerateSecret InstallerGenerates a secret to be used with the ValidateInstaller.
⊞ Validate InstallerValidates the identity of a Certified Professional Installer (CPI).
⊞ Deployments NodesDeletes a deployment.
⊞ Deployments NodesCreates a device under a node or customer.
⊞ Deployments NodesCreates a signed device under a node or customer.
⊞ Deployments NodesLists devices under a node or customer.
⊞ Deployments NodesReturns a requested deployment.
⊞ Deployments NodesLists deployments.
⊞ Deployments NodesMoves a deployment under another node or customer.
⊞ Deployments NodesUpdates an existing deployment.
⊞ Devices NodesCreates a device under a node or customer.
⊞ Devices NodesCreates a signed device under a node or customer.
⊞ Devices NodesDeletes a device.
⊞ Devices NodesGets details about a device.
⊞ Devices NodesLists devices under a node or customer.
⊞ Devices NodesMoves a device under another node or customer.
⊞ Devices NodesUpdates a device.
⊞ Devices NodesSigns a device.
⊞ Devices NodesUpdates a signed device.
⊞ Get NodesReturns a requested node.
⊞ Nodes NodesCreates a new node.
⊞ Nodes NodesDeletes a node.
⊞ Nodes NodesCreates a new deployment.
⊞ Nodes NodesLists deployments.
⊞ Nodes NodesCreates a device under a node or customer.
⊞ Nodes NodesCreates a signed device under a node or customer.
⊞ Nodes NodesLists devices under a node or customer.
⊞ Nodes NodesReturns a requested node.
⊞ Nodes NodesLists nodes.
⊞ Nodes NodesMoves a node under another node or customer.
⊞ Nodes NodesCreates a new node.
⊞ Nodes NodesLists nodes.
⊞ Nodes NodesUpdates an existing node.
⊞ Get PoliciesGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Set PoliciesSets the access control policy on the specified resource. Replaces any existing policy.
⊞ Test PoliciesReturns permissions that a caller has on the specified resource.
Cloud Vision API v1
⊞ Annotate FilesService that performs image detection and annotation for a batch of files. Now only "application/pdf", "image/tiff" and "image/gif" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.
⊞ AsyncBatchAnnotate FilesRun asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
⊞ Annotate ImagesRun image detection and annotation for a batch of images.
⊞ AsyncBatchAnnotate ImagesRun asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
⊞ Operations LocationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Files ProjectsService that performs image detection and annotation for a batch of files. Now only "application/pdf", "image/tiff" and "image/gif" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.
⊞ Files ProjectsRun asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
⊞ Images ProjectsRun image detection and annotation for a batch of images.
⊞ Images ProjectsRun asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
⊞ Locations ProjectsService that performs image detection and annotation for a batch of files. Now only "application/pdf", "image/tiff" and "image/gif" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.
⊞ Locations ProjectsRun asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
⊞ Locations ProjectsRun image detection and annotation for a batch of images.
⊞ Locations ProjectsRun asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsAdds a Product to the specified ProductSet. If the Product is already present, no change is made. One Product can be added to at most 100 ProductSets. Possible errors: * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.
⊞ Locations ProjectsCreates and returns a new ProductSet resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing, or is longer than 4096 characters.
⊞ Locations ProjectsPermanently deletes a ProductSet. Products and ReferenceImages in the ProductSet are not deleted. The actual image files are not deleted from Google Cloud Storage.
⊞ Locations ProjectsGets information associated with a ProductSet. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist.
⊞ Locations ProjectsAsynchronous API that imports a list of reference images to specified product sets based on a list of image information. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress) `Operation.response` contains `ImportProductSetsResponse`. (results) The input source of this method is a csv file on Google Cloud Storage. For the format of the csv file please see ImportProductSetsGcsSource.csv_file_uri.
⊞ Locations ProjectsLists ProductSets in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100, or less than 1.
⊞ Locations ProjectsMakes changes to a ProductSet resource. Only display_name can be updated currently. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but missing from the request or longer than 4096 characters.
⊞ Locations ProjectsLists the Products in a ProductSet, in an unspecified order. If the ProductSet does not exist, the products field of the response will be empty. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
⊞ Locations ProjectsRemoves a Product from the specified ProductSet.
⊞ Locations ProjectsCreates and returns a new product resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is missing or invalid.
⊞ Locations ProjectsPermanently deletes a product and its reference images. Metadata of the product and all its images will be deleted right away, but search queries against ProductSets containing the product may still work until all related caches are refreshed.
⊞ Locations ProjectsGets information associated with a Product. Possible errors: * Returns NOT_FOUND if the Product does not exist.
⊞ Locations ProjectsLists products in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
⊞ Locations ProjectsMakes changes to a Product resource. Only the `display_name`, `description`, and `labels` fields can be updated right now. If labels are updated, the change will not be reflected in queries until the next index time. Possible errors: * Returns NOT_FOUND if the Product does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but is missing from the request or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is present in update_mask but is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is present in update_mask.
⊞ Locations ProjectsAsynchronous API to delete all Products in a ProductSet or all Products that are in no ProductSet. If a Product is a member of the specified ProductSet in addition to other ProductSets, the Product will still be deleted. It is recommended to not delete the specified ProductSet until after this operation has completed. It is also recommended to not add any of the Products involved in the batch delete to a new ProductSet while this operation is running because those Products may still end up deleted. It's not possible to undo the PurgeProducts operation. Therefore, it is recommended to keep the csv files used in ImportProductSets (if that was how you originally built the Product Set) before starting PurgeProducts, in case you need to re-import the data after deletion. If the plan is to purge all of the Products from a ProductSet and then re-use the empty ProductSet to re-import new Products into the empty ProductSet, you must wait until the PurgeProducts operation has finished for that ProductSet. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress)
⊞ Locations ProjectsCreates and returns a new ReferenceImage resource. The `bounding_poly` field is optional. If `bounding_poly` is not specified, the system will try to detect regions of interest in the image that are compatible with the product_category on the parent product. If it is specified, detection is ALWAYS skipped. The system converts polygons into non-rotated rectangles. Note that the pipeline will resize the image if the image resolution is too large to process (above 50MP). Possible errors: * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if the product does not exist. * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing compatible with the parent product's product_category is detected. * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.
⊞ Locations ProjectsPermanently deletes a reference image. The image metadata will be deleted right away, but search queries against ProductSets containing the image may still work until all related caches are refreshed. The actual image files are not deleted from Google Cloud Storage.
⊞ Locations ProjectsGets information associated with a ReferenceImage. Possible errors: * Returns NOT_FOUND if the specified image does not exist.
⊞ Locations ProjectsLists reference images. Possible errors: * Returns NOT_FOUND if the parent product does not exist. * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less than 1.
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
Places API (New) v1
⊞ Get PlacesGet place details with a place id (in a name) string.
⊞ Photos PlacesGet a photo media with a photo reference string.
⊞ SearchNearby PlacesSearch for places near locations.
⊞ SearchText PlacesText query based place search.
Security Command Center API v1
⊞ Assets FoldersFilters an organization's assets and groups them by their specified properties.
⊞ Assets FoldersLists an organization's assets.
⊞ Assets FoldersUpdates security marks.
⊞ BigQueryExports FoldersCreates a BigQuery export.
⊞ BigQueryExports FoldersDeletes an existing BigQuery export.
⊞ BigQueryExports FoldersGets a BigQuery export.
⊞ BigQueryExports FoldersLists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder, then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned.
⊞ BigQueryExports FoldersUpdates a BigQuery export.
⊞ Findings FoldersKicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done.
⊞ Locations FoldersDeletes an existing mute config.
⊞ Locations FoldersGets a mute config.
⊞ Locations FoldersUpdates a mute config.
⊞ MuteConfigs FoldersCreates a mute config.
⊞ MuteConfigs FoldersDeletes an existing mute config.
⊞ MuteConfigs FoldersGets a mute config.
⊞ MuteConfigs FoldersLists mute configs.
⊞ MuteConfigs FoldersUpdates a mute config.
⊞ NotificationConfigs FoldersCreates a notification config.
⊞ NotificationConfigs FoldersDeletes a notification config.
⊞ NotificationConfigs FoldersGets a notification config.
⊞ NotificationConfigs FoldersLists notification configs.
⊞ NotificationConfigs Folders Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter
⊞ SecurityHealthAnalyticsSettings FoldersCreates a resident SecurityHealthAnalyticsCustomModule at the scope of the given CRM parent, and also creates inherited SecurityHealthAnalyticsCustomModules for all CRM descendants of the given parent. These modules are enabled by default.
⊞ SecurityHealthAnalyticsSettings FoldersDeletes the specified SecurityHealthAnalyticsCustomModule and all of its descendants in the CRM hierarchy. This method is only supported for resident custom modules.
⊞ SecurityHealthAnalyticsSettings FoldersRetrieves a SecurityHealthAnalyticsCustomModule.
⊞ SecurityHealthAnalyticsSettings FoldersReturns a list of all SecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors.
⊞ SecurityHealthAnalyticsSettings FoldersReturns a list of all resident SecurityHealthAnalyticsCustomModules under the given CRM parent and all of the parent’s CRM descendants.
⊞ SecurityHealthAnalyticsSettings FoldersUpdates the SecurityHealthAnalyticsCustomModule under the given name based on the given update mask. Updating the enablement state is supported on both resident and inherited modules (though resident modules cannot have an enablement state of "inherited"). Updating the display name and custom config of a module is supported on resident modules only.
⊞ SecurityHealthAnalyticsSettings FoldersSimulates a given SecurityHealthAnalyticsCustomModule and Resource.
⊞ SecurityHealthAnalyticsSettings FoldersRetrieves an EffectiveSecurityHealthAnalyticsCustomModule.
⊞ SecurityHealthAnalyticsSettings FoldersReturns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors.
⊞ Sources FoldersUpdates external system. This is for a given finding.
⊞ Sources FoldersFilters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
⊞ Sources FoldersLists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings
⊞ Sources FoldersCreates or updates a finding. The corresponding source must exist for a finding creation to succeed.
⊞ Sources FoldersUpdates the mute state of a finding.
⊞ Sources FoldersUpdates the state of a finding.
⊞ Sources FoldersUpdates security marks.
⊞ Sources FoldersLists all sources belonging to an organization.
⊞ Assets OrganizationsFilters an organization's assets and groups them by their specified properties.
⊞ Assets OrganizationsLists an organization's assets.
⊞ Assets OrganizationsRuns asset discovery. The discovery is tracked with a long-running operation. This API can only be called with limited frequency for an organization. If it is called too frequently the caller will receive a TOO_MANY_REQUESTS error.
⊞ Assets OrganizationsUpdates security marks.
⊞ BigQueryExports OrganizationsCreates a BigQuery export.
⊞ BigQueryExports OrganizationsDeletes an existing BigQuery export.
⊞ BigQueryExports OrganizationsGets a BigQuery export.
⊞ BigQueryExports OrganizationsLists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder, then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned.
⊞ BigQueryExports OrganizationsUpdates a BigQuery export.
⊞ EventThreatDetectionSettings OrganizationsCreates an Event Threat Detection custom module.
⊞ EventThreatDetectionSettings OrganizationsDeletes an Event Threat Detection custom module.
⊞ EventThreatDetectionSettings OrganizationsGets an Event Threat Detection custom module.
⊞ EventThreatDetectionSettings OrganizationsLists Event Threat Detection custom modules.
⊞ EventThreatDetectionSettings OrganizationsUpdates an Event Threat Detection custom module.
⊞ EventThreatDetectionSettings OrganizationsValidates the given Event Threat Detection custom module.
⊞ Findings OrganizationsKicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done.
⊞ GetOrganizationSettings OrganizationsGets the settings for an organization.
⊞ Locations OrganizationsDeletes an existing mute config.
⊞ Locations OrganizationsGets a mute config.
⊞ Locations OrganizationsUpdates a mute config.
⊞ MuteConfigs OrganizationsCreates a mute config.
⊞ MuteConfigs OrganizationsDeletes an existing mute config.
⊞ MuteConfigs OrganizationsGets a mute config.
⊞ MuteConfigs OrganizationsLists mute configs.
⊞ MuteConfigs OrganizationsUpdates a mute config.
⊞ NotificationConfigs OrganizationsCreates a notification config.
⊞ NotificationConfigs OrganizationsDeletes a notification config.
⊞ NotificationConfigs OrganizationsGets a notification config.
⊞ NotificationConfigs OrganizationsLists notification configs.
⊞ NotificationConfigs Organizations Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter
⊞ Operations OrganizationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Operations OrganizationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Operations OrganizationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations OrganizationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ ResourceValueConfigs OrganizationsCreates a ResourceValueConfig for an organization. Maps user's tags to difference resource values for use by the attack path simulation.
⊞ ResourceValueConfigs OrganizationsDeletes a ResourceValueConfig.
⊞ ResourceValueConfigs OrganizationsGets a ResourceValueConfig.
⊞ ResourceValueConfigs OrganizationsLists all ResourceValueConfigs.
⊞ ResourceValueConfigs OrganizationsUpdates an existing ResourceValueConfigs with new rules.
⊞ SecurityHealthAnalyticsSettings OrganizationsCreates a resident SecurityHealthAnalyticsCustomModule at the scope of the given CRM parent, and also creates inherited SecurityHealthAnalyticsCustomModules for all CRM descendants of the given parent. These modules are enabled by default.
⊞ SecurityHealthAnalyticsSettings OrganizationsDeletes the specified SecurityHealthAnalyticsCustomModule and all of its descendants in the CRM hierarchy. This method is only supported for resident custom modules.
⊞ SecurityHealthAnalyticsSettings OrganizationsRetrieves a SecurityHealthAnalyticsCustomModule.
⊞ SecurityHealthAnalyticsSettings OrganizationsReturns a list of all SecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors.
⊞ SecurityHealthAnalyticsSettings OrganizationsReturns a list of all resident SecurityHealthAnalyticsCustomModules under the given CRM parent and all of the parent’s CRM descendants.
⊞ SecurityHealthAnalyticsSettings OrganizationsUpdates the SecurityHealthAnalyticsCustomModule under the given name based on the given update mask. Updating the enablement state is supported on both resident and inherited modules (though resident modules cannot have an enablement state of "inherited"). Updating the display name and custom config of a module is supported on resident modules only.
⊞ SecurityHealthAnalyticsSettings OrganizationsSimulates a given SecurityHealthAnalyticsCustomModule and Resource.
⊞ SecurityHealthAnalyticsSettings OrganizationsRetrieves an EffectiveSecurityHealthAnalyticsCustomModule.
⊞ SecurityHealthAnalyticsSettings OrganizationsReturns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors.
⊞ Simulations OrganizationsLists the attack paths for a set of simulation results or valued resources and filter.
⊞ Simulations OrganizationsLists the valued resources for a set of simulation results and filter.
⊞ Simulations OrganizationsLists the attack paths for a set of simulation results or valued resources and filter.
⊞ Simulations OrganizationsGet the simulation by name or the latest simulation for the given organization.
⊞ Simulations OrganizationsLists the attack paths for a set of simulation results or valued resources and filter.
⊞ Simulations OrganizationsLists the valued resources for a set of simulation results and filter.
⊞ Sources OrganizationsCreates a source.
⊞ Sources OrganizationsCreates a finding. The corresponding source must exist for finding creation to succeed.
⊞ Sources OrganizationsUpdates external system. This is for a given finding.
⊞ Sources OrganizationsFilters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
⊞ Sources OrganizationsLists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings
⊞ Sources OrganizationsCreates or updates a finding. The corresponding source must exist for a finding creation to succeed.
⊞ Sources OrganizationsUpdates the mute state of a finding.
⊞ Sources OrganizationsUpdates the state of a finding.
⊞ Sources OrganizationsUpdates security marks.
⊞ Sources OrganizationsGets a source.
⊞ Sources OrganizationsGets the access control policy on the specified Source.
⊞ Sources OrganizationsLists all sources belonging to an organization.
⊞ Sources OrganizationsUpdates a source.
⊞ Sources OrganizationsSets the access control policy on the specified Source.
⊞ Sources OrganizationsReturns the permissions that a caller has on the specified source.
⊞ UpdateOrganizationSettings OrganizationsUpdates an organization's settings.
⊞ Assets ProjectsFilters an organization's assets and groups them by their specified properties.
⊞ Assets ProjectsLists an organization's assets.
⊞ Assets ProjectsUpdates security marks.
⊞ BigQueryExports ProjectsCreates a BigQuery export.
⊞ BigQueryExports ProjectsDeletes an existing BigQuery export.
⊞ BigQueryExports ProjectsGets a BigQuery export.
⊞ BigQueryExports ProjectsLists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder, then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned.
⊞ BigQueryExports ProjectsUpdates a BigQuery export.
⊞ Findings ProjectsKicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done.
⊞ Locations ProjectsDeletes an existing mute config.
⊞ Locations ProjectsGets a mute config.
⊞ Locations ProjectsUpdates a mute config.
⊞ MuteConfigs ProjectsCreates a mute config.
⊞ MuteConfigs ProjectsDeletes an existing mute config.
⊞ MuteConfigs ProjectsGets a mute config.
⊞ MuteConfigs ProjectsLists mute configs.
⊞ MuteConfigs ProjectsUpdates a mute config.
⊞ NotificationConfigs ProjectsCreates a notification config.
⊞ NotificationConfigs ProjectsDeletes a notification config.
⊞ NotificationConfigs ProjectsGets a notification config.
⊞ NotificationConfigs ProjectsLists notification configs.
⊞ NotificationConfigs Projects Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter
⊞ SecurityHealthAnalyticsSettings ProjectsCreates a resident SecurityHealthAnalyticsCustomModule at the scope of the given CRM parent, and also creates inherited SecurityHealthAnalyticsCustomModules for all CRM descendants of the given parent. These modules are enabled by default.
⊞ SecurityHealthAnalyticsSettings ProjectsDeletes the specified SecurityHealthAnalyticsCustomModule and all of its descendants in the CRM hierarchy. This method is only supported for resident custom modules.
⊞ SecurityHealthAnalyticsSettings ProjectsRetrieves a SecurityHealthAnalyticsCustomModule.
⊞ SecurityHealthAnalyticsSettings ProjectsReturns a list of all SecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors.
⊞ SecurityHealthAnalyticsSettings ProjectsReturns a list of all resident SecurityHealthAnalyticsCustomModules under the given CRM parent and all of the parent’s CRM descendants.
⊞ SecurityHealthAnalyticsSettings ProjectsUpdates the SecurityHealthAnalyticsCustomModule under the given name based on the given update mask. Updating the enablement state is supported on both resident and inherited modules (though resident modules cannot have an enablement state of "inherited"). Updating the display name and custom config of a module is supported on resident modules only.
⊞ SecurityHealthAnalyticsSettings ProjectsSimulates a given SecurityHealthAnalyticsCustomModule and Resource.
⊞ SecurityHealthAnalyticsSettings ProjectsRetrieves an EffectiveSecurityHealthAnalyticsCustomModule.
⊞ SecurityHealthAnalyticsSettings ProjectsReturns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors.
⊞ Sources ProjectsUpdates external system. This is for a given finding.
⊞ Sources ProjectsFilters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
⊞ Sources ProjectsLists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings
⊞ Sources ProjectsCreates or updates a finding. The corresponding source must exist for a finding creation to succeed.
⊞ Sources ProjectsUpdates the mute state of a finding.
⊞ Sources ProjectsUpdates the state of a finding.
⊞ Sources ProjectsUpdates security marks.
⊞ Sources ProjectsLists all sources belonging to an organization.
On-Demand Scanning API v1
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsInitiates an analysis of the provided packages.
⊞ Locations ProjectsLists vulnerabilities resulting from a successfully completed scan.
Cloud Identity API v1
⊞ Create GroupsCreates a Group.
⊞ Delete GroupsDeletes a `Group`.
⊞ Get GroupsRetrieves a `Group`.
⊞ GetSecuritySettings GroupsGet Security Settings
⊞ List GroupsLists the `Group` resources under a customer or namespace.
⊞ Lookup GroupsLooks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Group` by its `EntityKey`.
⊞ Memberships GroupsCheck a potential member for membership in a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A member has membership to a group as long as there is a single viewable transitive membership between the group and the member. The actor must have view permissions to at least one transitive membership between the member and group.
⊞ Memberships GroupsCreates a `Membership`.
⊞ Memberships GroupsDeletes a `Membership`.
⊞ Memberships GroupsRetrieves a `Membership`.
⊞ Memberships GroupsGet a membership graph of just a member or both a member and a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. Given a member, the response will contain all membership paths from the member. Given both a group and a member, the response will contain all membership paths between the group and the member.
⊞ Memberships GroupsLists the `Membership`s within a `Group`.
⊞ Memberships GroupsLooks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Membership` by its `EntityKey`.
⊞ Memberships GroupsModifies the `MembershipRole`s of a `Membership`.
⊞ Memberships GroupsSearches direct groups of a member.
⊞ Memberships GroupsSearch transitive groups of a member. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A transitive group is any group that has a direct or indirect membership to the member. Actor must have view permissions all transitive groups.
⊞ Memberships GroupsSearch transitive memberships of a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the group is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A transitive membership is any direct or indirect membership of a group. Actor must have view permissions to all transitive memberships.
⊞ Patch GroupsUpdates a `Group`.
⊞ Search GroupsSearches for `Group` resources matching a specified query.
⊞ UpdateSecuritySettings GroupsUpdate Security Settings
⊞ Create InboundSamlSsoProfilesCreates an InboundSamlSsoProfile for a customer.
⊞ Delete InboundSamlSsoProfilesDeletes an InboundSamlSsoProfile.
⊞ Get InboundSamlSsoProfilesGets an InboundSamlSsoProfile.
⊞ IdpCredentials InboundSamlSsoProfilesAdds an IdpCredential. Up to 2 credentials are allowed.
⊞ IdpCredentials InboundSamlSsoProfilesDeletes an IdpCredential.
⊞ IdpCredentials InboundSamlSsoProfilesGets an IdpCredential.
⊞ IdpCredentials InboundSamlSsoProfilesReturns a list of IdpCredentials in an InboundSamlSsoProfile.
⊞ List InboundSamlSsoProfilesLists InboundSamlSsoProfiles for a customer.
⊞ Patch InboundSamlSsoProfilesUpdates an InboundSamlSsoProfile.
⊞ Create InboundSsoAssignmentsCreates an InboundSsoAssignment for users and devices in a `Customer` under a given `Group` or `OrgUnit`.
⊞ Delete InboundSsoAssignmentsDeletes an InboundSsoAssignment. To disable SSO, Create (or Update) an assignment that has `sso_mode` == `SSO_OFF`.
⊞ Get InboundSsoAssignmentsGets an InboundSsoAssignment.
⊞ List InboundSsoAssignmentsLists the InboundSsoAssignments for a `Customer`.
⊞ Patch InboundSsoAssignmentsUpdates an InboundSsoAssignment. The body of this request is the `inbound_sso_assignment` field and the `update_mask` is relative to that. For example: a PATCH to `/v1/inboundSsoAssignments/0abcdefg1234567&update_mask=rank` with a body of `{ "rank": 1 }` moves that (presumably group-targeted) SSO assignment to the highest priority and shifts any other group-targeted assignments down in priority.
Cloud Dataplex API v1
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreate a DataAttributeBinding resource.
⊞ Locations ProjectsDeletes a DataAttributeBinding resource. All attributes within the DataAttributeBinding must be deleted before the DataAttributeBinding can be deleted.
⊞ Locations ProjectsRetrieves a DataAttributeBinding resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists DataAttributeBinding resources in a project and location.
⊞ Locations ProjectsUpdates a DataAttributeBinding resource.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a DataScan resource.
⊞ Locations ProjectsDeletes a DataScan resource.
⊞ Locations ProjectsGets a DataScan resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsGets a DataScanJob resource.
⊞ Locations ProjectsLists DataScanJobs under the given DataScan.
⊞ Locations ProjectsLists DataScans.
⊞ Locations ProjectsUpdates a DataScan resource.
⊞ Locations ProjectsRuns an on-demand execution of a DataScan
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreate a DataAttribute resource.
⊞ Locations ProjectsDeletes a Data Attribute resource.
⊞ Locations ProjectsRetrieves a Data Attribute resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Data Attribute resources in a DataTaxonomy.
⊞ Locations ProjectsUpdates a DataAttribute resource.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreate a DataTaxonomy resource.
⊞ Locations ProjectsDeletes a DataTaxonomy resource. All attributes within the DataTaxonomy must be deleted before the DataTaxonomy can be deleted.
⊞ Locations ProjectsRetrieves a DataTaxonomy resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists DataTaxonomy resources in a project and location.
⊞ Locations ProjectsUpdates a DataTaxonomy resource.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists action resources in a lake.
⊞ Locations ProjectsCreate a content.
⊞ Locations ProjectsDelete a content.
⊞ Locations ProjectsGet a content resource.
⊞ Locations ProjectsGets the access control policy for a contentitem resource. A NOT_FOUND error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it.Caller must have Google IAM dataplex.content.getIamPolicy permission on the resource.
⊞ Locations ProjectsList content.
⊞ Locations ProjectsUpdate a content. Only supports full resource update.
⊞ Locations ProjectsSets the access control policy on the specified contentitem resource. Replaces any existing policy.Caller must have Google IAM dataplex.content.setIamPolicy permission on the resource.
⊞ Locations ProjectsReturns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (a NOT_FOUND error is not returned).A caller is not required to have Google IAM permission to make this request.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreate a content.
⊞ Locations ProjectsDelete a content.
⊞ Locations ProjectsGet a content resource.
⊞ Locations ProjectsGets the access control policy for a contentitem resource. A NOT_FOUND error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it.Caller must have Google IAM dataplex.content.getIamPolicy permission on the resource.
⊞ Locations ProjectsList content.
⊞ Locations ProjectsUpdate a content. Only supports full resource update.
⊞ Locations ProjectsSets the access control policy on the specified contentitem resource. Replaces any existing policy.Caller must have Google IAM dataplex.content.setIamPolicy permission on the resource.
⊞ Locations ProjectsReturns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (a NOT_FOUND error is not returned).A caller is not required to have Google IAM permission to make this request.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a lake resource.
⊞ Locations ProjectsDeletes a lake resource. All zones within the lake must be deleted before the lake can be deleted.
⊞ Locations ProjectsCreate an environment resource.
⊞ Locations ProjectsDelete the environment resource. All the child resources must have been deleted before environment deletion can be initiated.
⊞ Locations ProjectsGet environment resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists environments under the given lake.
⊞ Locations ProjectsUpdate the environment resource.
⊞ Locations ProjectsLists session resources in an environment.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsRetrieves a lake resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists lake resources in a project and location.
⊞ Locations ProjectsUpdates a lake resource.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsCreates a task resource within a lake.
⊞ Locations ProjectsDelete the task resource.
⊞ Locations ProjectsGet task resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsCancel jobs running for the task resource.
⊞ Locations ProjectsGet job resource.
⊞ Locations ProjectsLists Jobs under the given task.
⊞ Locations ProjectsLists tasks under the given lake.
⊞ Locations ProjectsUpdate the task resource.
⊞ Locations ProjectsRun an on demand execution of a Task.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists action resources in a zone.
⊞ Locations ProjectsLists action resources in an asset.
⊞ Locations ProjectsCreates an asset resource.
⊞ Locations ProjectsDeletes an asset resource. The referenced storage resource is detached (default) or deleted based on the associated Lifecycle policy.
⊞ Locations ProjectsRetrieves an asset resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists asset resources in a zone.
⊞ Locations ProjectsUpdates an asset resource.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a zone resource within a lake.
⊞ Locations ProjectsDeletes a zone resource. All assets within a zone must be deleted before the zone can be deleted.
⊞ Locations ProjectsCreate a metadata entity.
⊞ Locations ProjectsDelete a metadata entity.
⊞ Locations ProjectsGet a metadata entity.
⊞ Locations ProjectsList metadata entities in a zone.
⊞ Locations ProjectsCreate a metadata partition.
⊞ Locations ProjectsDelete a metadata partition.
⊞ Locations ProjectsGet a metadata partition of an entity.
⊞ Locations ProjectsList metadata partitions of an entity.
⊞ Locations ProjectsUpdate a metadata entity. Only supports full resource update.
⊞ Locations ProjectsRetrieves a zone resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists zone resources in a lake.
⊞ Locations ProjectsUpdates a zone resource.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
Contact Center AI Platform API v1alpha1
⊞ Locations ProjectsCreates a new ContactCenter in a given project and location.
⊞ Locations ProjectsDeletes a single ContactCenter.
⊞ Locations ProjectsGets details of a single ContactCenter.
⊞ Locations ProjectsLists ContactCenters in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single ContactCenter.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsQueries the contact center quota, an aggregation over all the projects, that belongs to the billing account, which the input project belongs to.
Cloud Data Loss Prevention (DLP) v2
⊞ List InfoTypesReturns a list of the sensitive information types that DLP API supports. See https://cloud.google.com/dlp/docs/infotypes-reference to learn more.
⊞ InfoTypes LocationsReturns a list of the sensitive information types that DLP API supports. See https://cloud.google.com/dlp/docs/infotypes-reference to learn more.
⊞ DeidentifyTemplates OrganizationsCreates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ DeidentifyTemplates OrganizationsDeletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ DeidentifyTemplates OrganizationsGets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ DeidentifyTemplates OrganizationsLists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ DeidentifyTemplates OrganizationsUpdates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ InspectTemplates OrganizationsCreates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ InspectTemplates OrganizationsDeletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ InspectTemplates OrganizationsGets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ InspectTemplates OrganizationsLists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ InspectTemplates OrganizationsUpdates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations OrganizationsCreates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations OrganizationsDeletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations OrganizationsGets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations OrganizationsLists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations OrganizationsUpdates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations OrganizationsCreates a config for discovery to scan and profile storage.
⊞ Locations OrganizationsDeletes a discovery configuration.
⊞ Locations OrganizationsGets a discovery configuration.
⊞ Locations OrganizationsLists discovery configurations.
⊞ Locations OrganizationsUpdates a discovery configuration.
⊞ Locations OrganizationsLists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
⊞ Locations OrganizationsCreates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations OrganizationsDeletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations OrganizationsGets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations OrganizationsLists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations OrganizationsUpdates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations OrganizationsCreates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations OrganizationsDeletes a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations OrganizationsGets a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations OrganizationsLists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations OrganizationsUpdates a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations OrganizationsCreates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ Locations OrganizationsDeletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ Locations OrganizationsGets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ Locations OrganizationsLists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ Locations OrganizationsUpdates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes OrganizationsCreates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes OrganizationsDeletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes OrganizationsGets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes OrganizationsLists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes OrganizationsUpdates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ Content ProjectsDe-identifies potentially sensitive info from a ContentItem. This method has limits on input size and output size. See https://cloud.google.com/dlp/docs/deidentify-sensitive-data to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
⊞ Content ProjectsFinds potentially sensitive info in content. This method has limits on input size, processing time, and output size. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. For how to guides, see https://cloud.google.com/dlp/docs/inspecting-images and https://cloud.google.com/dlp/docs/inspecting-text,
⊞ Content ProjectsRe-identifies content that has been de-identified. See https://cloud.google.com/dlp/docs/pseudonymization#re-identification_in_free_text_code_example to learn more.
⊞ DeidentifyTemplates ProjectsCreates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ DeidentifyTemplates ProjectsDeletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ DeidentifyTemplates ProjectsGets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ DeidentifyTemplates ProjectsLists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ DeidentifyTemplates ProjectsUpdates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ DlpJobs ProjectsStarts asynchronous cancellation on a long-running DlpJob. The server makes a best effort to cancel the DlpJob, but success is not guaranteed. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
⊞ DlpJobs ProjectsCreates a new job to inspect storage or calculate risk metrics. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more. When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
⊞ DlpJobs ProjectsDeletes a long-running DlpJob. This method indicates that the client is no longer interested in the DlpJob result. The job will be canceled if possible. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
⊞ DlpJobs ProjectsGets the latest state of a long-running DlpJob. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
⊞ DlpJobs ProjectsLists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
⊞ Image ProjectsRedacts potentially sensitive info from an image. This method has limits on input size, processing time, and output size. See https://cloud.google.com/dlp/docs/redacting-sensitive-data-images to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
⊞ InspectTemplates ProjectsCreates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ InspectTemplates ProjectsDeletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ InspectTemplates ProjectsGets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ InspectTemplates ProjectsLists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ InspectTemplates ProjectsUpdates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ JobTriggers ProjectsActivate a job trigger. Causes the immediate execute of a trigger instead of waiting on the trigger event to occur.
⊞ JobTriggers ProjectsCreates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ JobTriggers ProjectsDeletes a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ JobTriggers ProjectsGets a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ JobTriggers ProjectsLists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ JobTriggers ProjectsUpdates a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations ProjectsDe-identifies potentially sensitive info from a ContentItem. This method has limits on input size and output size. See https://cloud.google.com/dlp/docs/deidentify-sensitive-data to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
⊞ Locations ProjectsFinds potentially sensitive info in content. This method has limits on input size, processing time, and output size. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. For how to guides, see https://cloud.google.com/dlp/docs/inspecting-images and https://cloud.google.com/dlp/docs/inspecting-text,
⊞ Locations ProjectsRe-identifies content that has been de-identified. See https://cloud.google.com/dlp/docs/pseudonymization#re-identification_in_free_text_code_example to learn more.
⊞ Locations ProjectsCreates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations ProjectsDeletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations ProjectsGets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations ProjectsLists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations ProjectsUpdates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
⊞ Locations ProjectsCreates a config for discovery to scan and profile storage.
⊞ Locations ProjectsDeletes a discovery configuration.
⊞ Locations ProjectsGets a discovery configuration.
⊞ Locations ProjectsLists discovery configurations.
⊞ Locations ProjectsUpdates a discovery configuration.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running DlpJob. The server makes a best effort to cancel the DlpJob, but success is not guaranteed. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
⊞ Locations ProjectsCreates a new job to inspect storage or calculate risk metrics. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more. When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
⊞ Locations ProjectsDeletes a long-running DlpJob. This method indicates that the client is no longer interested in the DlpJob result. The job will be canceled if possible. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
⊞ Locations ProjectsFinish a running hybrid DlpJob. Triggers the finalization steps and running of any enabled actions that have not yet run.
⊞ Locations ProjectsGets the latest state of a long-running DlpJob. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
⊞ Locations ProjectsInspect hybrid content and store findings to a job. To review the findings, inspect the job. Inspection will occur asynchronously.
⊞ Locations ProjectsLists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
⊞ Locations ProjectsRedacts potentially sensitive info from an image. This method has limits on input size, processing time, and output size. See https://cloud.google.com/dlp/docs/redacting-sensitive-data-images to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
⊞ Locations ProjectsCreates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations ProjectsDeletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations ProjectsGets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations ProjectsLists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations ProjectsUpdates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
⊞ Locations ProjectsActivate a job trigger. Causes the immediate execute of a trigger instead of waiting on the trigger event to occur.
⊞ Locations ProjectsCreates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations ProjectsDeletes a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations ProjectsGets a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations ProjectsInspect hybrid content and store findings to a trigger. The inspection will be processed asynchronously. To review the findings monitor the jobs within the trigger.
⊞ Locations ProjectsLists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations ProjectsUpdates a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
⊞ Locations ProjectsCreates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ Locations ProjectsDeletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ Locations ProjectsGets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ Locations ProjectsLists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ Locations ProjectsUpdates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes ProjectsCreates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes ProjectsDeletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes ProjectsGets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes ProjectsLists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
⊞ StoredInfoTypes ProjectsUpdates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
Kubernetes Engine API v1
⊞ Aggregated ProjectsLists subnetworks that are usable for creating clusters in a project.
⊞ Locations ProjectsChecks the cluster compatibility with Autopilot mode, and returns a list of compatibility issues.
⊞ Locations ProjectsCompletes master IP rotation.
⊞ Locations ProjectsCreates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.
⊞ Locations ProjectsDeletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.
⊞ Locations ProjectsGets the details of a specific cluster.
⊞ Locations ProjectsLists all clusters owned by a project in either the specified zone or all zones.
⊞ Locations ProjectsCompleteNodePoolUpgrade will signal an on-going node pool upgrade to complete.
⊞ Locations ProjectsCreates a node pool for a cluster.
⊞ Locations ProjectsDeletes a node pool from a cluster.
⊞ Locations ProjectsRetrieves the requested node pool.
⊞ Locations ProjectsLists the node pools for a cluster.
⊞ Locations ProjectsRolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
⊞ Locations ProjectsSets the autoscaling settings for the specified node pool.
⊞ Locations ProjectsSets the NodeManagement options for a node pool.
⊞ Locations ProjectsSets the size for a specific node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
⊞ Locations ProjectsUpdates the version and/or image type for the specified node pool.
⊞ Locations ProjectsSets the addons for a specific cluster.
⊞ Locations ProjectsEnables or disables the ABAC authorization mechanism on a cluster.
⊞ Locations ProjectsSets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update) instead.
⊞ Locations ProjectsSets the logging service for a specific cluster.
⊞ Locations ProjectsSets the maintenance policy for a cluster.
⊞ Locations ProjectsSets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
⊞ Locations ProjectsSets the monitoring service for a specific cluster.
⊞ Locations ProjectsEnables or disables Network Policy for a cluster.
⊞ Locations ProjectsSets labels on a cluster.
⊞ Locations ProjectsStarts master IP rotation.
⊞ Locations ProjectsUpdates the settings of a specific cluster.
⊞ Locations ProjectsUpdates the master for a specific cluster.
⊞ Locations ProjectsReturns configuration info about the Google Kubernetes Engine service.
⊞ Locations ProjectsCancels the specified operation.
⊞ Locations ProjectsGets the specified operation.
⊞ Locations ProjectsLists all operations in a project in a specific zone or all zones.
⊞ Zones ProjectsSets the addons for a specific cluster.
⊞ Zones ProjectsCompletes master IP rotation.
⊞ Zones ProjectsCreates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.
⊞ Zones ProjectsDeletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.
⊞ Zones ProjectsGets the details of a specific cluster.
⊞ Zones ProjectsEnables or disables the ABAC authorization mechanism on a cluster.
⊞ Zones ProjectsLists all clusters owned by a project in either the specified zone or all zones.
⊞ Zones ProjectsSets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update) instead.
⊞ Zones ProjectsSets the logging service for a specific cluster.
⊞ Zones ProjectsUpdates the master for a specific cluster.
⊞ Zones ProjectsSets the monitoring service for a specific cluster.
⊞ Zones ProjectsSets the autoscaling settings for the specified node pool.
⊞ Zones ProjectsCreates a node pool for a cluster.
⊞ Zones ProjectsDeletes a node pool from a cluster.
⊞ Zones ProjectsRetrieves the requested node pool.
⊞ Zones ProjectsLists the node pools for a cluster.
⊞ Zones ProjectsRolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
⊞ Zones ProjectsSets the NodeManagement options for a node pool.
⊞ Zones ProjectsSets the size for a specific node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
⊞ Zones ProjectsUpdates the version and/or image type for the specified node pool.
⊞ Zones ProjectsSets labels on a cluster.
⊞ Zones ProjectsSets the maintenance policy for a cluster.
⊞ Zones ProjectsSets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
⊞ Zones ProjectsEnables or disables Network Policy for a cluster.
⊞ Zones ProjectsStarts master IP rotation.
⊞ Zones ProjectsUpdates the settings of a specific cluster.
⊞ Zones ProjectsReturns configuration info about the Google Kubernetes Engine service.
⊞ Zones ProjectsCancels the specified operation.
⊞ Zones ProjectsGets the specified operation.
⊞ Zones ProjectsLists all operations in a project in a specific zone or all zones.
Policy Troubleshooter API v1
⊞ Troubleshoot IamChecks whether a principal has a specific permission for a specific resource, and explains why the principal does or does not have that permission.
Rapid Migration Assessment API v1
⊞ Locations ProjectsCreates an Annotation
⊞ Locations ProjectsGets details of a single Annotation.
⊞ Locations ProjectsCreate a Collector to manage the on-prem appliance which collects information about Customer assets.
⊞ Locations ProjectsDeletes a single Collector - changes state of collector to "Deleting". Background jobs does final deletion thorugh producer api.
⊞ Locations ProjectsGets details of a single Collector.
⊞ Locations ProjectsLists Collectors in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Collector.
⊞ Locations ProjectsPauses the given collector.
⊞ Locations ProjectsRegisters the given collector.
⊞ Locations ProjectsResumes the given collector.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
BigQuery Data Transfer API v1
⊞ DataSources ProjectsReturns true if valid credentials exist for the given data source and requesting user.
⊞ DataSources ProjectsRetrieves a supported data source and returns its settings.
⊞ DataSources ProjectsLists supported data sources and returns their settings.
⊞ EnrollDataSources ProjectsEnroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents can be found in the public guide for [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
⊞ Locations ProjectsReturns true if valid credentials exist for the given data source and requesting user.
⊞ Locations ProjectsRetrieves a supported data source and returns its settings.
⊞ Locations ProjectsLists supported data sources and returns their settings.
⊞ Locations ProjectsEnroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents can be found in the public guide for [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a new data transfer configuration.
⊞ Locations ProjectsDeletes a data transfer configuration, including any associated transfer runs and logs.
⊞ Locations ProjectsReturns information about a data transfer config.
⊞ Locations ProjectsReturns information about all transfer configs owned by a project in the specified location.
⊞ Locations ProjectsUpdates a data transfer configuration. All fields must be set, even if they are not updated.
⊞ Locations ProjectsDeletes the specified transfer run.
⊞ Locations ProjectsReturns information about the particular transfer run.
⊞ Locations ProjectsReturns information about running and completed transfer runs.
⊞ Locations ProjectsReturns log messages for the transfer run.
⊞ Locations ProjectsCreates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead.
⊞ Locations ProjectsStart manual transfer runs to be executed now with schedule_time equal to current time. The transfer runs can be created for a time range where the run_time is between start_time (inclusive) and end_time (exclusive), or for a specific run_time.
⊞ TransferConfigs ProjectsCreates a new data transfer configuration.
⊞ TransferConfigs ProjectsDeletes a data transfer configuration, including any associated transfer runs and logs.
⊞ TransferConfigs ProjectsReturns information about a data transfer config.
⊞ TransferConfigs ProjectsReturns information about all transfer configs owned by a project in the specified location.
⊞ TransferConfigs ProjectsUpdates a data transfer configuration. All fields must be set, even if they are not updated.
⊞ TransferConfigs ProjectsDeletes the specified transfer run.
⊞ TransferConfigs ProjectsReturns information about the particular transfer run.
⊞ TransferConfigs ProjectsReturns information about running and completed transfer runs.
⊞ TransferConfigs ProjectsReturns log messages for the transfer run.
⊞ TransferConfigs ProjectsCreates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead.
⊞ TransferConfigs ProjectsStart manual transfer runs to be executed now with schedule_time equal to current time. The transfer runs can be created for a time range where the run_time is between start_time (inclusive) and end_time (exclusive), or for a specific run_time.
Notebooks API v2
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsChecks whether a notebook instance is upgradable.
⊞ Locations ProjectsCreates a new Instance in a given project and location.
⊞ Locations ProjectsDeletes a single Instance.
⊞ Locations ProjectsCreates a Diagnostic File and runs Diagnostic Tool given an Instance.
⊞ Locations ProjectsGets details of a single Instance.
⊞ Locations ProjectsGets general backend configurations that might also affect the frontend. Location is required by CCFE. Although we could bypass it to send location- less request directly to the backend job, we would need CPE (go/cloud-cpe). Having the location might also be useful depending on the query.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists instances in a given project and location.
⊞ Locations ProjectsUpdateInstance updates an Instance.
⊞ Locations ProjectsAllows notebook instances to report their latest instance information to the Notebooks API server. The server will merge the reported information to the instance metadata store. Do not use this method directly.
⊞ Locations ProjectsResets a notebook instance.
⊞ Locations ProjectsRollbacks a notebook instance to the previous version.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsStarts a notebook instance.
⊞ Locations ProjectsStops a notebook instance.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUpgrades a notebook instance to the latest version.
⊞ Locations ProjectsAllows notebook instances to upgrade themselves. Do not use this method directly.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Cloud Memorystore for Memcached API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations Projects`ApplyParameters` restarts the set of specified nodes in order to update them to the current set of parameters for the Memcached Instance.
⊞ Locations ProjectsCreates a new Instance in a given location.
⊞ Locations ProjectsDeletes a single Instance.
⊞ Locations ProjectsGets details of a single Instance.
⊞ Locations ProjectsLists Instances in a given location.
⊞ Locations ProjectsUpdates an existing Instance in a given project and location.
⊞ Locations ProjectsReschedules upcoming maintenance event.
⊞ Locations ProjectsUpdates the defined Memcached parameters for an existing instance. This method only stages the parameters, it must be followed by `ApplyParameters` to apply the parameters to nodes of the Memcached instance.
⊞ Locations ProjectsUpgrades the Memcache instance to a newer memcached engine version specified in the request.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Secret Manager API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Secrets ProjectsCreates a new SecretVersion containing secret data and attaches it to an existing Secret.
⊞ Secrets ProjectsCreates a new Secret containing no SecretVersions.
⊞ Secrets ProjectsDeletes a Secret.
⊞ Secrets ProjectsGets metadata for a given Secret.
⊞ Secrets ProjectsGets the access control policy for a secret. Returns empty policy if the secret exists and does not have a policy set.
⊞ Secrets ProjectsLists Secrets.
⊞ Secrets ProjectsUpdates metadata of an existing Secret.
⊞ Secrets ProjectsSets the access control policy on the specified secret. Replaces any existing policy. Permissions on SecretVersions are enforced according to the policy set on the associated Secret.
⊞ Secrets ProjectsReturns permissions that a caller has for the specified secret. If the secret does not exist, this call returns an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Secrets ProjectsAccesses a SecretVersion. This call returns the secret data. `projects/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.
⊞ Secrets ProjectsDestroys a SecretVersion. Sets the state of the SecretVersion to DESTROYED and irrevocably destroys the secret data.
⊞ Secrets ProjectsDisables a SecretVersion. Sets the state of the SecretVersion to DISABLED.
⊞ Secrets ProjectsEnables a SecretVersion. Sets the state of the SecretVersion to ENABLED.
⊞ Secrets ProjectsGets metadata for a SecretVersion. `projects/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.
⊞ Secrets ProjectsLists SecretVersions. This call does not return secret data.
Essential Contacts API v1
⊞ Contacts FoldersLists all contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources.
⊞ Contacts FoldersAdds a new contact for a resource.
⊞ Contacts FoldersDeletes a contact.
⊞ Contacts FoldersGets a single contact.
⊞ Contacts FoldersLists the contacts that have been set on a resource.
⊞ Contacts FoldersUpdates a contact. Note: A contact's email address cannot be changed.
⊞ Contacts FoldersAllows a contact admin to send a test message to contact to verify that it has been configured correctly.
⊞ Contacts OrganizationsLists all contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources.
⊞ Contacts OrganizationsAdds a new contact for a resource.
⊞ Contacts OrganizationsDeletes a contact.
⊞ Contacts OrganizationsGets a single contact.
⊞ Contacts OrganizationsLists the contacts that have been set on a resource.
⊞ Contacts OrganizationsUpdates a contact. Note: A contact's email address cannot be changed.
⊞ Contacts OrganizationsAllows a contact admin to send a test message to contact to verify that it has been configured correctly.
⊞ Contacts ProjectsLists all contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources.
⊞ Contacts ProjectsAdds a new contact for a resource.
⊞ Contacts ProjectsDeletes a contact.
⊞ Contacts ProjectsGets a single contact.
⊞ Contacts ProjectsLists the contacts that have been set on a resource.
⊞ Contacts ProjectsUpdates a contact. Note: A contact's email address cannot be changed.
⊞ Contacts ProjectsAllows a contact admin to send a test message to contact to verify that it has been configured correctly.
Firebase App Check API v1
⊞ Get JwksReturns a public JWK set as specified by [RFC 7517](https://tools.ietf.org/html/rfc7517) that can be used to verify App Check tokens. Exactly one of the public keys in the returned set will successfully validate any App Check token that is currently valid.
⊞ Apps ProjectsAtomically gets the AppAttestConfigs for the specified list of apps.
⊞ Apps ProjectsGets the AppAttestConfig for the specified app.
⊞ Apps ProjectsUpdates the AppAttestConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange AppAttest tokens for App Check tokens.
⊞ Apps ProjectsCreates a new DebugToken for the specified app. For security reasons, after the creation operation completes, the `token` field cannot be updated or retrieved, but you can revoke the debug token using DeleteDebugToken. Each app can have a maximum of 20 debug tokens.
⊞ Apps ProjectsDeletes the specified DebugToken. A deleted debug token cannot be used to exchange for an App Check token. Use this method when you suspect the secret `token` has been compromised or when you no longer need the debug token.
⊞ Apps ProjectsGets the specified DebugToken. For security reasons, the `token` field is never populated in the response.
⊞ Apps ProjectsLists all DebugTokens for the specified app. For security reasons, the `token` field is never populated in the response.
⊞ Apps ProjectsUpdates the specified DebugToken. For security reasons, the `token` field cannot be updated, nor will it be populated in the response, but you can revoke the debug token using DeleteDebugToken.
⊞ Apps ProjectsAtomically gets the DeviceCheckConfigs for the specified list of apps. For security reasons, the `private_key` field is never populated in the response.
⊞ Apps ProjectsGets the DeviceCheckConfig for the specified app. For security reasons, the `private_key` field is never populated in the response.
⊞ Apps ProjectsUpdates the DeviceCheckConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange DeviceCheck tokens for App Check tokens. For security reasons, the `private_key` field is never populated in the response.
⊞ Apps ProjectsAccepts an App Attest assertion and an artifact previously obtained from ExchangeAppAttestAttestation and verifies those with Apple. If valid, returns an AppCheckToken.
⊞ Apps ProjectsAccepts an App Attest CBOR attestation and verifies it with Apple using your preconfigured team and bundle IDs. If valid, returns an attestation artifact that can later be exchanged for an AppCheckToken using ExchangeAppAttestAssertion. For convenience and performance, this method's response object will also contain an AppCheckToken (if the verification is successful).
⊞ Apps ProjectsValidates a custom token signed using your project's Admin SDK service account credentials. If valid, returns an AppCheckToken.
⊞ Apps ProjectsValidates a debug token secret that you have previously created using CreateDebugToken. If valid, returns an AppCheckToken. Note that a restrictive quota is enforced on this method to prevent accidental exposure of the app to abuse.
⊞ Apps ProjectsAccepts a [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice) issued by DeviceCheck, and attempts to validate it with Apple. If valid, returns an AppCheckToken.
⊞ Apps ProjectsValidates an [integrity verdict response token from Play Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify). If valid, returns an AppCheckToken.
⊞ Apps ProjectsValidates a [reCAPTCHA Enterprise response token](https://cloud.google.com/recaptcha-enterprise/docs/create-assessment#retrieve_token). If valid, returns an AppCheckToken.
⊞ Apps ProjectsValidates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an AppCheckToken.
⊞ Apps ProjectsValidates a [SafetyNet token](https://developer.android.com/training/safetynet/attestation#request-attestation-step). If valid, returns an AppCheckToken.
⊞ Apps ProjectsGenerates a challenge that protects the integrity of an immediately following call to ExchangeAppAttestAttestation or ExchangeAppAttestAssertion. A challenge should not be reused for multiple calls.
⊞ Apps ProjectsGenerates a challenge that protects the integrity of an immediately following integrity verdict request to the Play Integrity API. The next call to ExchangePlayIntegrityToken using the resulting integrity token will verify the presence and validity of the challenge. A challenge should not be reused for multiple calls.
⊞ Apps ProjectsAtomically gets the PlayIntegrityConfigs for the specified list of apps.
⊞ Apps ProjectsGets the PlayIntegrityConfig for the specified app.
⊞ Apps ProjectsUpdates the PlayIntegrityConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange Play Integrity tokens for App Check tokens.
⊞ Apps ProjectsAtomically gets the RecaptchaEnterpriseConfigs for the specified list of apps.
⊞ Apps ProjectsGets the RecaptchaEnterpriseConfig for the specified app.
⊞ Apps ProjectsUpdates the RecaptchaEnterpriseConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange reCAPTCHA Enterprise tokens for App Check tokens.
⊞ Apps ProjectsAtomically gets the RecaptchaV3Configs for the specified list of apps. For security reasons, the `site_secret` field is never populated in the response.
⊞ Apps ProjectsGets the RecaptchaV3Config for the specified app. For security reasons, the `site_secret` field is never populated in the response.
⊞ Apps ProjectsUpdates the RecaptchaV3Config for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange reCAPTCHA tokens for App Check tokens. For security reasons, the `site_secret` field is never populated in the response.
⊞ Apps ProjectsAtomically gets the SafetyNetConfigs for the specified list of apps.
⊞ Apps ProjectsGets the SafetyNetConfig for the specified app.
⊞ Apps ProjectsUpdates the SafetyNetConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange SafetyNet tokens for App Check tokens.
⊞ Services ProjectsAtomically updates the specified Service configurations.
⊞ Services ProjectsGets the Service configuration for the specified service name.
⊞ Services ProjectsLists all Service configurations for the specified project. Only Services which were explicitly configured using UpdateService or BatchUpdateServices will be returned.
⊞ Services ProjectsUpdates the specified Service configuration.
Storage Transfer API v1
⊞ Get GoogleServiceAccountsReturns the Google service account that is used by Storage Transfer Service to access buckets in the project where transfers run or in other projects. Each Google service account is associated with one Google Cloud project. Users should add this service account to the Google Cloud Storage bucket ACLs to grant access to Storage Transfer Service. This service account is created and owned by Storage Transfer Service and can only be used by Storage Transfer Service.
⊞ AgentPools ProjectsCreates an agent pool resource.
⊞ AgentPools ProjectsDeletes an agent pool.
⊞ AgentPools ProjectsGets an agent pool.
⊞ AgentPools ProjectsLists agent pools.
⊞ AgentPools ProjectsUpdates an existing agent pool resource.
⊞ Create TransferJobsCreates a transfer job that runs periodically.
⊞ Delete TransferJobsDeletes a transfer job. Deleting a transfer job sets its status to DELETED.
⊞ Get TransferJobsGets a transfer job.
⊞ List TransferJobsLists transfer jobs.
⊞ Patch TransferJobsUpdates a transfer job. Updating a job's transfer spec does not affect transfer operations that are running already. **Note:** The job's status field can be modified using this RPC (for example, to set a job's status to DELETED, DISABLED, or ENABLED).
⊞ Run TransferJobsStarts a new operation for the specified transfer job. A `TransferJob` has a maximum of one active `TransferOperation`. If this method is called while a `TransferOperation` is active, an error is returned.
⊞ Cancel TransferOperationsCancels a transfer. Use the transferOperations.get method to check if the cancellation succeeded or if the operation completed despite the `cancel` request. When you cancel an operation, the currently running transfer is interrupted. For recurring transfer jobs, the next instance of the transfer job will still run. For example, if your job is configured to run every day at 1pm and you cancel Monday's operation at 1:05pm, Monday's transfer will stop. However, a transfer job will still be attempted on Tuesday. This applies only to currently running operations. If an operation is not currently running, `cancel` does nothing. *Caution:* Canceling a transfer job can leave your data in an unknown state. We recommend that you restore the state at both the destination and the source after the `cancel` request completes so that your data is in a consistent state. When you cancel a job, the next job computes a delta of files and may repair any inconsistent state. For instance, if you run a job every day, and today's job found 10 new files and transferred five files before you canceled the job, tomorrow's transfer operation will compute a new delta with the five files that were not copied today plus any new files discovered tomorrow.
⊞ Get TransferOperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List TransferOperationsLists transfer operations. Operations are ordered by their creation time in reverse chronological order.
⊞ Pause TransferOperationsPauses a transfer operation.
⊞ Resume TransferOperationsResumes a transfer operation that is paused.
Firebase Rules API v1
⊞ Releases ProjectsCreate a `Release`. Release names should reflect the developer's deployment practices. For example, the release name may include the environment name, application name, application version, or any other name meaningful to the developer. Once a `Release` refers to a `Ruleset`, the rules can be enforced by Firebase Rules-enabled services. More than one `Release` may be 'live' concurrently. Consider the following three `Release` names for `projects/foo` and the `Ruleset` to which they refer. Release Name -> Ruleset Name * projects/foo/releases/prod -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/beta -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/v23 -> projects/foo/rulesets/uuid456 The relationships reflect a `Ruleset` rollout in progress. The `prod` and `prod/beta` releases refer to the same `Ruleset`. However, `prod/v23` refers to a new `Ruleset`. The `Ruleset` reference for a `Release` may be updated using the UpdateRelease method.
⊞ Releases ProjectsDelete a `Release` by resource name.
⊞ Releases ProjectsGet a `Release` by name.
⊞ Releases ProjectsGet the `Release` executable to use when enforcing rules.
⊞ Releases ProjectsList the `Release` values for a project. This list may optionally be filtered by `Release` name, `Ruleset` name, `TestSuite` name, or any combination thereof.
⊞ Releases ProjectsUpdate a `Release` via PATCH. Only updates to `ruleset_name` will be honored. `Release` rename is not supported. To create a `Release` use the CreateRelease method.
⊞ Rulesets ProjectsCreate a `Ruleset` from `Source`. The `Ruleset` is given a unique generated name which is returned to the caller. `Source` containing syntactic or semantics errors will result in an error response indicating the first error encountered. For a detailed view of `Source` issues, use TestRuleset.
⊞ Rulesets ProjectsDelete a `Ruleset` by resource name. If the `Ruleset` is referenced by a `Release` the operation will fail.
⊞ Rulesets ProjectsGet a `Ruleset` by name including the full `Source` contents.
⊞ Rulesets ProjectsList `Ruleset` metadata only and optionally filter the results by `Ruleset` name. The full `Source` contents of a `Ruleset` may be retrieved with GetRuleset.
⊞ Test ProjectsTest `Source` for syntactic and semantic correctness. Issues present, if any, will be returned to the caller with a description, severity, and source location. The test method may be executed with `Source` or a `Ruleset` name. Passing `Source` is useful for unit testing new rules. Passing a `Ruleset` name is useful for regression testing an existing rule. The following is an example of `Source` that permits users to upload images to a bucket bearing their user id and matching the correct metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe to the blog. service firebase.storage { match /users/{userId}/images/{imageName} { allow write: if userId == request.auth.uid && (imageName.matches('*.png$') || imageName.matches('*.jpg$')) && resource.mimeType.matches('^image/') } }
Cloud Monitoring API v3
⊞ TimeSeries FoldersLists time series that match a filter.
⊞ TimeSeries OrganizationsLists time series that match a filter.
⊞ AlertPolicies ProjectsCreates a new alerting policy.Design your application to single-thread API calls that modify the state of alerting policies in a single project. This includes calls to CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
⊞ AlertPolicies ProjectsDeletes an alerting policy.Design your application to single-thread API calls that modify the state of alerting policies in a single project. This includes calls to CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
⊞ AlertPolicies ProjectsGets a single alerting policy.
⊞ AlertPolicies ProjectsLists the existing alerting policies for the workspace.
⊞ AlertPolicies ProjectsUpdates an alerting policy. You can either replace the entire policy with a new one or replace only certain fields in the current alerting policy by specifying the fields to be updated via updateMask. Returns the updated alerting policy.Design your application to single-thread API calls that modify the state of alerting policies in a single project. This includes calls to CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
⊞ CollectdTimeSeries ProjectsCloud Monitoring Agent only: Creates a new time series.This method is only for use by the Cloud Monitoring Agent. Use projects.timeSeries.create instead.
⊞ Groups ProjectsCreates a new group.
⊞ Groups ProjectsDeletes an existing group.
⊞ Groups ProjectsGets a single group.
⊞ Groups ProjectsLists the existing groups.
⊞ Groups ProjectsLists the monitored resources that are members of a group.
⊞ Groups ProjectsUpdates an existing group. You can change any group attributes except name.
⊞ MetricDescriptors ProjectsCreates a new metric descriptor. The creation is executed asynchronously. User-created metric descriptors define custom metrics (https://cloud.google.com/monitoring/custom-metrics). The metric descriptor is updated if it already exists, except that metric labels are never removed.
⊞ MetricDescriptors ProjectsDeletes a metric descriptor. Only user-created custom metrics (https://cloud.google.com/monitoring/custom-metrics) can be deleted.
⊞ MetricDescriptors ProjectsGets a single metric descriptor.
⊞ MetricDescriptors ProjectsLists metric descriptors that match a filter.
⊞ MonitoredResourceDescriptors ProjectsGets a single monitored resource descriptor.
⊞ MonitoredResourceDescriptors ProjectsLists monitored resource descriptors that match a filter.
⊞ NotificationChannelDescriptors ProjectsGets a single channel descriptor. The descriptor indicates which fields are expected / permitted for a notification channel of the given type.
⊞ NotificationChannelDescriptors ProjectsLists the descriptors for supported channel types. The use of descriptors makes it possible for new channel types to be dynamically added.
⊞ NotificationChannels ProjectsCreates a new notification channel, representing a single notification endpoint such as an email address, SMS number, or PagerDuty service.Design your application to single-thread API calls that modify the state of notification channels in a single project. This includes calls to CreateNotificationChannel, DeleteNotificationChannel and UpdateNotificationChannel.
⊞ NotificationChannels ProjectsDeletes a notification channel.Design your application to single-thread API calls that modify the state of notification channels in a single project. This includes calls to CreateNotificationChannel, DeleteNotificationChannel and UpdateNotificationChannel.
⊞ NotificationChannels ProjectsGets a single notification channel. The channel includes the relevant configuration details with which the channel was created. However, the response may truncate or omit passwords, API keys, or other private key matter and thus the response may not be 100% identical to the information that was supplied in the call to the create method.
⊞ NotificationChannels ProjectsRequests a verification code for an already verified channel that can then be used in a call to VerifyNotificationChannel() on a different channel with an equivalent identity in the same or in a different project. This makes it possible to copy a channel between projects without requiring manual reverification of the channel. If the channel is not in the verified state, this method will fail (in other words, this may only be used if the SendNotificationChannelVerificationCode and VerifyNotificationChannel paths have already been used to put the given channel into the verified state).There is no guarantee that the verification codes returned by this method will be of a similar structure or form as the ones that are delivered to the channel via SendNotificationChannelVerificationCode; while VerifyNotificationChannel() will recognize both the codes delivered via SendNotificationChannelVerificationCode() and returned from GetNotificationChannelVerificationCode(), it is typically the case that the verification codes delivered via SendNotificationChannelVerificationCode() will be shorter and also have a shorter expiration (e.g. codes such as "G-123456") whereas GetVerificationCode() will typically return a much longer, websafe base 64 encoded string that has a longer expiration time.
⊞ NotificationChannels ProjectsLists the notification channels that have been created for the project. To list the types of notification channels that are supported, use the ListNotificationChannelDescriptors method.
⊞ NotificationChannels ProjectsUpdates a notification channel. Fields not specified in the field mask remain unchanged.Design your application to single-thread API calls that modify the state of notification channels in a single project. This includes calls to CreateNotificationChannel, DeleteNotificationChannel and UpdateNotificationChannel.
⊞ NotificationChannels ProjectsCauses a verification code to be delivered to the channel. The code can then be supplied in VerifyNotificationChannel to verify the channel.
⊞ NotificationChannels ProjectsVerifies a NotificationChannel by proving receipt of the code delivered to the channel as a result of calling SendNotificationChannelVerificationCode.
⊞ Snoozes ProjectsCreates a Snooze that will prevent alerts, which match the provided criteria, from being opened. The Snooze applies for a specific time interval.
⊞ Snoozes ProjectsRetrieves a Snooze by name.
⊞ Snoozes ProjectsLists the Snoozes associated with a project. Can optionally pass in filter, which specifies predicates to match Snoozes.
⊞ Snoozes ProjectsUpdates a Snooze, identified by its name, with the parameters in the given Snooze object.
⊞ TimeSeries ProjectsCreates or adds data to one or more time series. The response is empty if all time series in the request were written. If any time series could not be written, a corresponding failure message is included in the error response. This method does not support resource locations constraint of an organization policy (https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations#setting_the_organization_policy).
⊞ TimeSeries ProjectsCreates or adds data to one or more service time series. A service time series is a time series for a metric from a Google Cloud service. The response is empty if all time series in the request were written. If any time series could not be written, a corresponding failure message is included in the error response. This endpoint rejects writes to user-defined metrics. This method is only for use by Google Cloud services. Use projects.timeSeries.create instead.
⊞ TimeSeries ProjectsLists time series that match a filter.
⊞ TimeSeries ProjectsQueries time series using Monitoring Query Language.
⊞ UptimeCheckConfigs ProjectsCreates a new Uptime check configuration.
⊞ UptimeCheckConfigs ProjectsDeletes an Uptime check configuration. Note that this method will fail if the Uptime check configuration is referenced by an alert policy or other dependent configs that would be rendered invalid by the deletion.
⊞ UptimeCheckConfigs ProjectsGets a single Uptime check configuration.
⊞ UptimeCheckConfigs ProjectsLists the existing valid Uptime check configurations for the project (leaving out any invalid configurations).
⊞ UptimeCheckConfigs ProjectsUpdates an Uptime check configuration. You can either replace the entire configuration with a new one or replace only certain fields in the current configuration by specifying the fields to be updated via updateMask. Returns the updated configuration.
⊞ Create ServicesCreate a Service.
⊞ Delete ServicesSoft delete this Service.
⊞ Get ServicesGet the named Service.
⊞ List ServicesList Services for this Metrics Scope.
⊞ Patch ServicesUpdate this Service.
⊞ ServiceLevelObjectives ServicesCreate a ServiceLevelObjective for the given Service.
⊞ ServiceLevelObjectives ServicesDelete the given ServiceLevelObjective.
⊞ ServiceLevelObjectives ServicesGet a ServiceLevelObjective by name.
⊞ ServiceLevelObjectives ServicesList the ServiceLevelObjectives for the given Service.
⊞ ServiceLevelObjectives ServicesUpdate the given ServiceLevelObjective.
⊞ List UptimeCheckIpsReturns the list of IP addresses that checkers run from
Firebase Cloud Messaging Data API v1beta1
⊞ AndroidApps ProjectsList aggregate delivery data for the given Android application.
Google Cloud Memorystore for Redis API v1
⊞ Locations ProjectsCreates a Redis cluster based on the specified properties. The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis cluster will be fully functional. The completed longrunning.Operation will contain the new cluster object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
⊞ Locations ProjectsDeletes a specific Redis cluster. Cluster stops serving and data is deleted.
⊞ Locations ProjectsGets the details of a specific Redis cluster.
⊞ Locations ProjectsGets the details of certificate authority information for Redis cluster.
⊞ Locations ProjectsLists all Redis clusters owned by a project in either the specified location (region) or all locations. The location should have the following format: * `projects/{project_id}/locations/{location_id}` If `location_id` is specified as `-` (wildcard), then all regions available to the project are queried, and the results are aggregated.
⊞ Locations ProjectsUpdates the metadata and configuration of a specific Redis cluster. Completed longrunning.Operation will contain the new cluster object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsCreates a Redis instance based on the specified tier and memory size. By default, the instance is accessible from the project's [default network](https://cloud.google.com/vpc/docs/vpc). The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis instance will be fully functional. Completed longrunning.Operation will contain the new instance object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
⊞ Locations ProjectsDeletes a specific Redis instance. Instance stops serving and data is deleted.
⊞ Locations ProjectsExport Redis instance data into a Redis RDB format file in Cloud Storage. Redis will continue serving during this operation. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
⊞ Locations ProjectsInitiates a failover of the primary node to current replica node for a specific STANDARD tier Cloud Memorystore for Redis instance.
⊞ Locations ProjectsGets the details of a specific Redis instance.
⊞ Locations ProjectsGets the AUTH string for a Redis instance. If AUTH is not enabled for the instance the response will be empty. This information is not included in the details returned to GetInstance.
⊞ Locations ProjectsImport a Redis RDB snapshot file from Cloud Storage into a Redis instance. Redis may stop serving during this operation. Instance state will be IMPORTING for entire operation. When complete, the instance will contain only data from the imported file. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
⊞ Locations ProjectsLists all Redis instances owned by a project in either the specified location (region) or all locations. The location should have the following format: * `projects/{project_id}/locations/{location_id}` If `location_id` is specified as `-` (wildcard), then all regions available to the project are queried, and the results are aggregated.
⊞ Locations ProjectsUpdates the metadata and configuration of a specific Redis instance. Completed longrunning.Operation will contain the new instance object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
⊞ Locations ProjectsReschedule maintenance for a given instance in a given project and location.
⊞ Locations ProjectsUpgrades Redis instance to the newer Redis version specified in the request.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Container Analysis API v1
⊞ Notes ProjectsCreates new notes in batch.
⊞ Notes ProjectsCreates a new note.
⊞ Notes ProjectsDeletes the specified note.
⊞ Notes ProjectsGets the specified note.
⊞ Notes ProjectsGets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
⊞ Notes ProjectsLists notes for the specified project.
⊞ Notes ProjectsLists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note.
⊞ Notes ProjectsUpdates the specified note.
⊞ Notes ProjectsSets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
⊞ Notes ProjectsReturns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
⊞ Occurrences ProjectsCreates new occurrences in batch.
⊞ Occurrences ProjectsCreates a new occurrence.
⊞ Occurrences ProjectsDeletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource.
⊞ Occurrences ProjectsGets the specified occurrence.
⊞ Occurrences ProjectsGets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
⊞ Occurrences ProjectsGets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.
⊞ Occurrences ProjectsGets a summary of the number and severity of occurrences.
⊞ Occurrences ProjectsLists occurrences for the specified project.
⊞ Occurrences ProjectsUpdates the specified occurrence.
⊞ Occurrences ProjectsSets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
⊞ Occurrences ProjectsReturns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
Assured Workloads API v1
⊞ Locations OrganizationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations OrganizationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations OrganizationsAnalyzes a hypothetical move of a source resource to a target workload to surface compliance risks. The analysis is best effort and is not guaranteed to be exhaustive.
⊞ Locations OrganizationsCreates Assured Workload.
⊞ Locations OrganizationsDeletes the workload. Make sure that workload's direct children are already in a deleted state, otherwise the request will fail with a FAILED_PRECONDITION error. In addition to assuredworkloads.workload.delete permission, the user should also have orgpolicy.policy.set permission on the deleted folder to remove Assured Workloads OrgPolicies.
⊞ Locations OrganizationsGets Assured Workload associated with a CRM Node
⊞ Locations OrganizationsLists Assured Workloads under a CRM Node.
⊞ Locations OrganizationsUpdate the permissions settings for an existing partner workload. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress.
⊞ Locations OrganizationsUpdates an existing workload. Currently allows updating of workload display_name and labels. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress.
⊞ Locations OrganizationsRestrict the list of resources allowed in the Workload environment. The current list of allowed products can be found at https://cloud.google.com/assured-workloads/docs/supported-products In addition to assuredworkloads.workload.update permission, the user should also have orgpolicy.policy.set permission on the folder resource to use this functionality.
⊞ Locations OrganizationsAcknowledges an existing violation. By acknowledging a violation, users acknowledge the existence of a compliance violation in their workload and decide to ignore it due to a valid business justification. Acknowledgement is a permanent operation and it cannot be reverted.
⊞ Locations OrganizationsRetrieves Assured Workload Violation based on ID.
⊞ Locations OrganizationsLists the Violations in the AssuredWorkload Environment. Callers may also choose to read across multiple Workloads as per [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash character) as a wildcard character instead of workload-id in the parent. Format `organizations/{org_id}/locations/{location}/workloads/-`
Error Reporting API v1beta1
⊞ DeleteEvents ProjectsDeletes all error events of a given project.
⊞ Events ProjectsLists the specified events.
⊞ Events ProjectsReport an individual error event and record the event to a log. This endpoint accepts **either** an OAuth token, **or** an [API key](https://support.google.com/cloud/answer/6158862) for authentication. To use an API key, append it to the URL as the value of a `key` parameter. For example: `POST https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/events:report?key=123ABC456` **Note:** [Error Reporting] (https://cloud.google.com/error-reporting) is a global service built on Cloud Logging and doesn't analyze logs stored in regional log buckets or logs routed to other Google Cloud projects.
⊞ GroupStats ProjectsLists the specified groups.
⊞ Groups ProjectsGet the specified group.
⊞ Groups ProjectsReplace the data for the specified group. Fails if the group does not exist.
AI Platform Training & Prediction API v1
⊞ Explain ProjectsPerforms explanation on the data in the request. {% dynamic include "/ai-platform/includes/___explain-request" %}
⊞ GetConfig ProjectsGet the service account information associated with your project. You need this information in order to grant the service account permissions for the Google Cloud Storage location where you put your model training code for training the model with Google Cloud Machine Learning.
⊞ Jobs ProjectsCancels a running job.
⊞ Jobs ProjectsCreates a training or a batch prediction job.
⊞ Jobs ProjectsDescribes a job.
⊞ Jobs ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Jobs ProjectsLists the jobs in the project. If there are no jobs that match the request parameters, the list request returns an empty response body: {}.
⊞ Jobs ProjectsUpdates a specific job resource. Currently the only supported fields to update are `labels`.
⊞ Jobs ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Jobs ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGet the complete list of CMLE capabilities in a location, along with their location-specific properties.
⊞ Locations ProjectsList all locations that provides at least one type of CMLE capability.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsCreates a study.
⊞ Locations ProjectsDeletes a study.
⊞ Locations ProjectsGets a study.
⊞ Locations ProjectsLists all the studies in a region for an associated project.
⊞ Locations ProjectsAdds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete.
⊞ Locations ProjectsChecks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse.
⊞ Locations ProjectsMarks a trial as complete.
⊞ Locations ProjectsAdds a user provided trial to a study.
⊞ Locations ProjectsDeletes a trial.
⊞ Locations ProjectsGets a trial.
⊞ Locations ProjectsLists the trials associated with a study.
⊞ Locations ProjectsLists the pareto-optimal trials for multi-objective study or the optimal trials for single-objective study. The definition of pareto-optimal can be checked in wiki page. https://en.wikipedia.org/wiki/Pareto_efficiency
⊞ Locations ProjectsStops a trial.
⊞ Locations ProjectsAdds one or more trials to a study, with parameter values suggested by AI Platform Vizier. Returns a long-running operation associated with the generation of trial suggestions. When this long-running operation succeeds, it will contain a SuggestTrialsResponse.
⊞ Models ProjectsCreates a model which will later contain one or more versions. You must add at least one version before you can request predictions from the model. Add versions by calling projects.models.versions.create.
⊞ Models ProjectsDeletes a model. You can only delete a model if there are no versions in it. You can delete versions by calling projects.models.versions.delete.
⊞ Models ProjectsGets information about a model, including its name, the description (if set), and the default version (if at least one version of the model has been deployed).
⊞ Models ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Models ProjectsLists the models in a project. Each project can contain multiple models, and each model can have multiple versions. If there are no models that match the request parameters, the list request returns an empty response body: {}.
⊞ Models ProjectsUpdates a specific model resource. Currently the only supported fields to update are `description` and `default_version.name`.
⊞ Models ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Models ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Models ProjectsCreates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version to be the default, you must call projects.models.versions.setDefault.
⊞ Models ProjectsDeletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version that is set as the default version of the model unless it is the only remaining version.
⊞ Models ProjectsGets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the versions of a model.
⊞ Models ProjectsGets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
⊞ Models ProjectsUpdates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`.
⊞ Models ProjectsDesignates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
⊞ Operations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Predict ProjectsPerforms online prediction on the data in the request. {% dynamic include "/ai-platform/includes/___predict-request" %}
Cloud DNS API v1
⊞ Create ChangesAtomically updates the ResourceRecordSet collection.
⊞ Get ChangesFetches the representation of an existing Change.
⊞ List ChangesEnumerates Changes to a ResourceRecordSet collection.
⊞ Get DnsKeysFetches the representation of an existing DnsKey.
⊞ List DnsKeysEnumerates DnsKeys to a ResourceRecordSet collection.
⊞ Get ManagedZoneOperationsFetches the representation of an existing Operation.
⊞ List ManagedZoneOperationsEnumerates Operations for the given ManagedZone.
⊞ Create ManagedZonesCreates a new ManagedZone.
⊞ Delete ManagedZonesDeletes a previously created ManagedZone.
⊞ Get ManagedZonesFetches the representation of an existing ManagedZone.
⊞ GetIamPolicy ManagedZonesGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ List ManagedZonesEnumerates ManagedZones that have been created but not yet deleted.
⊞ Patch ManagedZonesApplies a partial update to an existing ManagedZone.
⊞ SetIamPolicy ManagedZonesSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ TestIamPermissions ManagedZonesReturns permissions that a caller has on the specified resource. If the resource does not exist, this returns an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Update ManagedZonesUpdates an existing ManagedZone.
⊞ Create PoliciesCreates a new Policy.
⊞ Delete PoliciesDeletes a previously created Policy. Fails if the policy is still being referenced by a network.
⊞ Get PoliciesFetches the representation of an existing Policy.
⊞ List PoliciesEnumerates all Policies associated with a project.
⊞ Patch PoliciesApplies a partial update to an existing Policy.
⊞ Update PoliciesUpdates an existing Policy.
⊞ Get ProjectsFetches the representation of an existing Project.
⊞ Create ResourceRecordSetsCreates a new ResourceRecordSet.
⊞ Delete ResourceRecordSetsDeletes a previously created ResourceRecordSet.
⊞ Get ResourceRecordSetsFetches the representation of an existing ResourceRecordSet.
⊞ List ResourceRecordSetsEnumerates ResourceRecordSets that you have created but not yet deleted.
⊞ Patch ResourceRecordSetsApplies a partial update to an existing ResourceRecordSet.
⊞ Create ResponsePoliciesCreates a new Response Policy
⊞ Delete ResponsePoliciesDeletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network.
⊞ Get ResponsePoliciesFetches the representation of an existing Response Policy.
⊞ List ResponsePoliciesEnumerates all Response Policies associated with a project.
⊞ Patch ResponsePoliciesApplies a partial update to an existing Response Policy.
⊞ Update ResponsePoliciesUpdates an existing Response Policy.
⊞ Create ResponsePolicyRulesCreates a new Response Policy Rule.
⊞ Delete ResponsePolicyRulesDeletes a previously created Response Policy Rule.
⊞ Get ResponsePolicyRulesFetches the representation of an existing Response Policy Rule.
⊞ List ResponsePolicyRulesEnumerates all Response Policy Rules associated with a project.
⊞ Patch ResponsePolicyRulesApplies a partial update to an existing Response Policy Rule.
⊞ Update ResponsePolicyRulesUpdates an existing Response Policy Rule.
Cloud Logging API v2
⊞ Exclusions BillingAccountsCreates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
⊞ Exclusions BillingAccountsDeletes an exclusion in the _Default sink.
⊞ Exclusions BillingAccountsGets the description of an exclusion in the _Default sink.
⊞ Exclusions BillingAccountsLists all the exclusions on the _Default sink in a parent resource.
⊞ Exclusions BillingAccountsChanges one or more properties of an existing exclusion in the _Default sink.
⊞ GetCmekSettings BillingAccountsGets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ GetSettings BillingAccountsGets the Log Router settings for the given resource.Note: Settings for the Log Router can be get for Google Cloud projects, folders, organizations and billing accounts. Currently it can only be configured for organizations. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ Locations BillingAccountsCreates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations BillingAccountsCreates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations BillingAccountsDeletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.
⊞ Locations BillingAccountsGets a log bucket.
⊞ Locations BillingAccountsAsynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link.
⊞ Locations BillingAccountsDeletes a link. This will also delete the corresponding BigQuery linked dataset.
⊞ Locations BillingAccountsGets a link.
⊞ Locations BillingAccountsLists links.
⊞ Locations BillingAccountsLists log buckets.
⊞ Locations BillingAccountsUpdates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations BillingAccountsUndeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.
⊞ Locations BillingAccountsUpdates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations BillingAccountsCreates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.
⊞ Locations BillingAccountsDeletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.
⊞ Locations BillingAccountsGets a view on a log bucket.
⊞ Locations BillingAccountsLists views on a log bucket.
⊞ Locations BillingAccountsLists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
⊞ Locations BillingAccountsUpdates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.
⊞ Locations BillingAccountsGets information about a location.
⊞ Locations BillingAccountsLists information about the supported locations for this service.
⊞ Locations BillingAccountsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
⊞ Locations BillingAccountsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations BillingAccountsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
⊞ Locations BillingAccountsLists the RecentQueries that were created by the user making the request.
⊞ Locations BillingAccountsCreates a new SavedQuery for the user making the request.
⊞ Locations BillingAccountsDeletes an existing SavedQuery that was created by the user making the request.
⊞ Locations BillingAccountsLists the SavedQueries that were created by the user making the request.
⊞ Logs BillingAccountsDeletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.
⊞ Logs BillingAccountsLists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
⊞ Sinks BillingAccountsCreates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
⊞ Sinks BillingAccountsDeletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
⊞ Sinks BillingAccountsGets a sink.
⊞ Sinks BillingAccountsLists sinks.
⊞ Sinks BillingAccountsUpdates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
⊞ Sinks BillingAccountsUpdates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
⊞ Copy EntriesCopies a set of log entries from a log bucket to a Cloud Storage bucket.
⊞ List EntriesLists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs (https://cloud.google.com/logging/docs/export).
⊞ Tail EntriesStreaming read of log entries as they are received. Until the stream is terminated, it will continue reading logs.
⊞ Write EntriesWrites log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resource names (projects, organizations, billing accounts or folders), where the resource name for a log entry is determined from its logName field.
⊞ Create ExclusionsCreates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
⊞ Delete ExclusionsDeletes an exclusion in the _Default sink.
⊞ Get ExclusionsGets the description of an exclusion in the _Default sink.
⊞ List ExclusionsLists all the exclusions on the _Default sink in a parent resource.
⊞ Patch ExclusionsChanges one or more properties of an existing exclusion in the _Default sink.
⊞ Exclusions FoldersCreates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
⊞ Exclusions FoldersDeletes an exclusion in the _Default sink.
⊞ Exclusions FoldersGets the description of an exclusion in the _Default sink.
⊞ Exclusions FoldersLists all the exclusions on the _Default sink in a parent resource.
⊞ Exclusions FoldersChanges one or more properties of an existing exclusion in the _Default sink.
⊞ GetCmekSettings FoldersGets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ GetSettings FoldersGets the Log Router settings for the given resource.Note: Settings for the Log Router can be get for Google Cloud projects, folders, organizations and billing accounts. Currently it can only be configured for organizations. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ Locations FoldersCreates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations FoldersCreates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations FoldersDeletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.
⊞ Locations FoldersGets a log bucket.
⊞ Locations FoldersAsynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link.
⊞ Locations FoldersDeletes a link. This will also delete the corresponding BigQuery linked dataset.
⊞ Locations FoldersGets a link.
⊞ Locations FoldersLists links.
⊞ Locations FoldersLists log buckets.
⊞ Locations FoldersUpdates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations FoldersUndeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.
⊞ Locations FoldersUpdates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations FoldersCreates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.
⊞ Locations FoldersDeletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.
⊞ Locations FoldersGets a view on a log bucket.
⊞ Locations FoldersLists views on a log bucket.
⊞ Locations FoldersLists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
⊞ Locations FoldersUpdates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.
⊞ Locations FoldersGets information about a location.
⊞ Locations FoldersLists information about the supported locations for this service.
⊞ Locations FoldersStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
⊞ Locations FoldersGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations FoldersLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
⊞ Locations FoldersLists the RecentQueries that were created by the user making the request.
⊞ Locations FoldersCreates a new SavedQuery for the user making the request.
⊞ Locations FoldersDeletes an existing SavedQuery that was created by the user making the request.
⊞ Locations FoldersLists the SavedQueries that were created by the user making the request.
⊞ Logs FoldersDeletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.
⊞ Logs FoldersLists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
⊞ Sinks FoldersCreates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
⊞ Sinks FoldersDeletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
⊞ Sinks FoldersGets a sink.
⊞ Sinks FoldersLists sinks.
⊞ Sinks FoldersUpdates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
⊞ Sinks FoldersUpdates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
⊞ UpdateSettings FoldersUpdates the Log Router settings for the given resource.Note: Settings for the Log Router can currently only be configured for Google Cloud organizations. Once configured, it applies to all projects and folders in the Google Cloud organization.UpdateSettings will fail if 1) kms_key_name is invalid, or 2) the associated service account does not have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3) access to the key is disabled. 4) location_id is not supported by Logging. 5) location_id violate OrgPolicy.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ Undefined GetCmekSettingsGets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ Undefined GetSettingsGets the Log Router settings for the given resource.Note: Settings for the Log Router can be get for Google Cloud projects, folders, organizations and billing accounts. Currently it can only be configured for organizations. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ Buckets LocationsCreates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.
⊞ Buckets LocationsCreates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed.
⊞ Buckets LocationsDeletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.
⊞ Buckets LocationsGets a log bucket.
⊞ Buckets LocationsAsynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link.
⊞ Buckets LocationsDeletes a link. This will also delete the corresponding BigQuery linked dataset.
⊞ Buckets LocationsGets a link.
⊞ Buckets LocationsLists links.
⊞ Buckets LocationsLists log buckets.
⊞ Buckets LocationsUpdates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Buckets LocationsUndeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.
⊞ Buckets LocationsUpdates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Buckets LocationsCreates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.
⊞ Buckets LocationsDeletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.
⊞ Buckets LocationsGets a view on a log bucket.
⊞ Buckets LocationsLists views on a log bucket.
⊞ Buckets LocationsUpdates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.
⊞ Get LocationsGets information about a location.
⊞ List LocationsLists information about the supported locations for this service.
⊞ Operations LocationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
⊞ Operations LocationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations LocationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
⊞ Delete LogsDeletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.
⊞ List LogsLists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
⊞ List MonitoredResourceDescriptorsLists the descriptors for monitored resource types used by Logging.
⊞ Exclusions OrganizationsCreates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
⊞ Exclusions OrganizationsDeletes an exclusion in the _Default sink.
⊞ Exclusions OrganizationsGets the description of an exclusion in the _Default sink.
⊞ Exclusions OrganizationsLists all the exclusions on the _Default sink in a parent resource.
⊞ Exclusions OrganizationsChanges one or more properties of an existing exclusion in the _Default sink.
⊞ GetCmekSettings OrganizationsGets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ GetSettings OrganizationsGets the Log Router settings for the given resource.Note: Settings for the Log Router can be get for Google Cloud projects, folders, organizations and billing accounts. Currently it can only be configured for organizations. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ Locations OrganizationsCreates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations OrganizationsCreates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations OrganizationsDeletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.
⊞ Locations OrganizationsGets a log bucket.
⊞ Locations OrganizationsAsynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link.
⊞ Locations OrganizationsDeletes a link. This will also delete the corresponding BigQuery linked dataset.
⊞ Locations OrganizationsGets a link.
⊞ Locations OrganizationsLists links.
⊞ Locations OrganizationsLists log buckets.
⊞ Locations OrganizationsUpdates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations OrganizationsUndeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.
⊞ Locations OrganizationsUpdates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations OrganizationsCreates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.
⊞ Locations OrganizationsDeletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.
⊞ Locations OrganizationsGets a view on a log bucket.
⊞ Locations OrganizationsLists views on a log bucket.
⊞ Locations OrganizationsLists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
⊞ Locations OrganizationsUpdates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.
⊞ Locations OrganizationsGets information about a location.
⊞ Locations OrganizationsLists information about the supported locations for this service.
⊞ Locations OrganizationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
⊞ Locations OrganizationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations OrganizationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
⊞ Locations OrganizationsLists the RecentQueries that were created by the user making the request.
⊞ Locations OrganizationsCreates a new SavedQuery for the user making the request.
⊞ Locations OrganizationsDeletes an existing SavedQuery that was created by the user making the request.
⊞ Locations OrganizationsLists the SavedQueries that were created by the user making the request.
⊞ Logs OrganizationsDeletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.
⊞ Logs OrganizationsLists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
⊞ Sinks OrganizationsCreates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
⊞ Sinks OrganizationsDeletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
⊞ Sinks OrganizationsGets a sink.
⊞ Sinks OrganizationsLists sinks.
⊞ Sinks OrganizationsUpdates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
⊞ Sinks OrganizationsUpdates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
⊞ UpdateCmekSettings OrganizationsUpdates the Log Router CMEK settings for the given resource.Note: CMEK for the Log Router can currently only be configured for Google Cloud organizations. Once configured, it applies to all projects and folders in the Google Cloud organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or 2) the associated service account does not have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3) access to the key is disabled.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ UpdateSettings OrganizationsUpdates the Log Router settings for the given resource.Note: Settings for the Log Router can currently only be configured for Google Cloud organizations. Once configured, it applies to all projects and folders in the Google Cloud organization.UpdateSettings will fail if 1) kms_key_name is invalid, or 2) the associated service account does not have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3) access to the key is disabled. 4) location_id is not supported by Logging. 5) location_id violate OrgPolicy.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ Exclusions ProjectsCreates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.
⊞ Exclusions ProjectsDeletes an exclusion in the _Default sink.
⊞ Exclusions ProjectsGets the description of an exclusion in the _Default sink.
⊞ Exclusions ProjectsLists all the exclusions on the _Default sink in a parent resource.
⊞ Exclusions ProjectsChanges one or more properties of an existing exclusion in the _Default sink.
⊞ GetCmekSettings ProjectsGets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ GetSettings ProjectsGets the Log Router settings for the given resource.Note: Settings for the Log Router can be get for Google Cloud projects, folders, organizations and billing accounts. Currently it can only be configured for organizations. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ Locations ProjectsCreates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations ProjectsCreates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations ProjectsDeletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.
⊞ Locations ProjectsGets a log bucket.
⊞ Locations ProjectsAsynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link.
⊞ Locations ProjectsDeletes a link. This will also delete the corresponding BigQuery linked dataset.
⊞ Locations ProjectsGets a link.
⊞ Locations ProjectsLists links.
⊞ Locations ProjectsLists log buckets.
⊞ Locations ProjectsUpdates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations ProjectsUndeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.
⊞ Locations ProjectsUpdates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.
⊞ Locations ProjectsCreates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.
⊞ Locations ProjectsDeletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.
⊞ Locations ProjectsGets a view on a log bucket.
⊞ Locations ProjectsLists views on a log bucket.
⊞ Locations ProjectsLists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
⊞ Locations ProjectsUpdates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
⊞ Locations ProjectsLists the RecentQueries that were created by the user making the request.
⊞ Locations ProjectsCreates a new SavedQuery for the user making the request.
⊞ Locations ProjectsDeletes an existing SavedQuery that was created by the user making the request.
⊞ Locations ProjectsLists the SavedQueries that were created by the user making the request.
⊞ Logs ProjectsDeletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.
⊞ Logs ProjectsLists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.
⊞ Metrics ProjectsCreates a logs-based metric.
⊞ Metrics ProjectsDeletes a logs-based metric.
⊞ Metrics ProjectsGets a logs-based metric.
⊞ Metrics ProjectsLists logs-based metrics.
⊞ Metrics ProjectsCreates or updates a logs-based metric.
⊞ Sinks ProjectsCreates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
⊞ Sinks ProjectsDeletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
⊞ Sinks ProjectsGets a sink.
⊞ Sinks ProjectsLists sinks.
⊞ Sinks ProjectsUpdates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
⊞ Sinks ProjectsUpdates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
⊞ Create SinksCreates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
⊞ Delete SinksDeletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
⊞ Get SinksGets a sink.
⊞ List SinksLists sinks.
⊞ Update SinksUpdates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
⊞ Undefined UpdateCmekSettingsUpdates the Log Router CMEK settings for the given resource.Note: CMEK for the Log Router can currently only be configured for Google Cloud organizations. Once configured, it applies to all projects and folders in the Google Cloud organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or 2) the associated service account does not have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3) access to the key is disabled.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
⊞ Undefined UpdateSettingsUpdates the Log Router settings for the given resource.Note: Settings for the Log Router can currently only be configured for Google Cloud organizations. Once configured, it applies to all projects and folders in the Google Cloud organization.UpdateSettings will fail if 1) kms_key_name is invalid, or 2) the associated service account does not have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3) access to the key is disabled. 4) location_id is not supported by Logging. 5) location_id violate OrgPolicy.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
Cloud Source Repositories API v1
⊞ GetConfig ProjectsReturns the Cloud Source Repositories configuration of the project.
⊞ Repos ProjectsCreates a repo in the given project with the given name. If the named repository already exists, `CreateRepo` returns `ALREADY_EXISTS`.
⊞ Repos ProjectsDeletes a repo.
⊞ Repos ProjectsReturns information about a repo.
⊞ Repos ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Repos ProjectsReturns all repos belonging to a project. The sizes of the repos are not set by ListRepos. To get the size of a repo, use GetRepo.
⊞ Repos ProjectsUpdates information about a repo.
⊞ Repos ProjectsSets the access control policy on the specified resource. Replaces any existing policy.
⊞ Repos ProjectsSynchronize a connected repo. The response contains SyncRepoMetadata in the metadata field.
⊞ Repos ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.
⊞ UpdateConfig ProjectsUpdates the Cloud Source Repositories configuration of the project.
Cloud Talent Solution API v4
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Tenants ProjectsReport events issued when end user interacts with customer's application that uses Cloud Talent Solution. You may inspect the created events in [self service tools](https://console.cloud.google.com/talent-solution/overview). [Learn more](https://cloud.google.com/talent-solution/docs/management-tools) about self service tools.
⊞ Tenants ProjectsCreates a new company entity.
⊞ Tenants ProjectsDeletes specified company. Prerequisite: The company has no jobs associated with it.
⊞ Tenants ProjectsRetrieves specified company.
⊞ Tenants ProjectsLists all companies associated with the project.
⊞ Tenants ProjectsUpdates specified company.
⊞ Tenants ProjectsCompletes the specified prefix with keyword suggestions. Intended for use by a job search auto-complete search box.
⊞ Tenants ProjectsCreates a new tenant entity.
⊞ Tenants ProjectsDeletes specified tenant.
⊞ Tenants ProjectsRetrieves specified tenant.
⊞ Tenants ProjectsBegins executing a batch create jobs operation.
⊞ Tenants ProjectsBegins executing a batch delete jobs operation.
⊞ Tenants ProjectsBegins executing a batch update jobs operation.
⊞ Tenants ProjectsCreates a new job. Typically, the job becomes searchable within 10 seconds, but it may take up to 5 minutes.
⊞ Tenants ProjectsDeletes the specified job. Typically, the job becomes unsearchable within 10 seconds, but it may take up to 5 minutes.
⊞ Tenants ProjectsRetrieves the specified job, whose status is OPEN or recently EXPIRED within the last 90 days.
⊞ Tenants ProjectsLists jobs by filter.
⊞ Tenants ProjectsUpdates specified job. Typically, updated contents become visible in search results within 10 seconds, but it may take up to 5 minutes.
⊞ Tenants ProjectsSearches for jobs using the provided SearchJobsRequest. This call constrains the visibility of jobs present in the database, and only returns jobs that the caller has permission to search against.
⊞ Tenants ProjectsSearches for jobs using the provided SearchJobsRequest. This API call is intended for the use case of targeting passive job seekers (for example, job seekers who have signed up to receive email alerts about potential job opportunities), it has different algorithmic adjustments that are designed to specifically target passive job seekers. This call constrains the visibility of jobs present in the database, and only returns jobs the caller has permission to search against.
⊞ Tenants ProjectsLists all tenants associated with the project.
⊞ Tenants ProjectsUpdates specified tenant.
Service Usage API v1
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ BatchEnable ServicesEnable multiple services on a project. The operation is atomic: if enabling any service fails, then the entire batch fails, and no state changes occur. To enable a single service, use the `EnableService` method instead.
⊞ BatchGet ServicesReturns the service configurations and enabled states for a given list of services.
⊞ Disable ServicesDisable a service so that it can no longer be used with a project. This prevents unintended usage that may cause unexpected billing charges or security leaks. It is not valid to call the disable method on a service that is not currently enabled. Callers will receive a `FAILED_PRECONDITION` status if the target service is not currently enabled.
⊞ Enable ServicesEnable a service so that it can be used with a project.
⊞ Get ServicesReturns the service configuration and enabled state for a given service.
⊞ List ServicesList all services available to the specified project, and the current state of those services with respect to the project. The list includes all public services, all services for which the calling user has the `servicemanagement.services.bind` permission, and all services that have already been enabled on the project. The list can be filtered to only include services in a specific state, for example to only include services enabled on the project. WARNING: If you need to query enabled services frequently or across an organization, you should use [Cloud Asset Inventory API](https://cloud.google.com/asset-inventory/docs/apis), which provides higher throughput and richer filtering capability.
Firebase Cloud Messaging API v1
⊞ Messages ProjectsSend a message to specified target (a registration token, topic or condition).
Datastream API v1
⊞ Locations ProjectsUse this method to create a connection profile in a project and location.
⊞ Locations ProjectsUse this method to delete a connection profile.
⊞ Locations ProjectsUse this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects of a parent data object that's optionally supplied in the request.
⊞ Locations ProjectsUse this method to get details about a connection profile.
⊞ Locations ProjectsUse this method to list connection profiles created in a project and location.
⊞ Locations ProjectsUse this method to update the parameters of a connection profile.
⊞ Locations ProjectsThe FetchStaticIps API call exposes the static IP addresses used by Datastream.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUse this method to create a private connectivity configuration.
⊞ Locations ProjectsUse this method to delete a private connectivity configuration.
⊞ Locations ProjectsUse this method to get details about a private connectivity configuration.
⊞ Locations ProjectsUse this method to list private connectivity configurations in a project and location.
⊞ Locations ProjectsUse this method to create a route for a private connectivity configuration in a project and location.
⊞ Locations ProjectsUse this method to delete a route.
⊞ Locations ProjectsUse this method to get details about a route.
⊞ Locations ProjectsUse this method to list routes created for a private connectivity configuration in a project and location.
⊞ Locations ProjectsUse this method to create a stream.
⊞ Locations ProjectsUse this method to delete a stream.
⊞ Locations ProjectsUse this method to get details about a stream.
⊞ Locations ProjectsUse this method to list streams in a project and location.
⊞ Locations ProjectsUse this method to get details about a stream object.
⊞ Locations ProjectsUse this method to list the objects of a specific stream.
⊞ Locations ProjectsUse this method to look up a stream object by its source object identifier.
⊞ Locations ProjectsUse this method to start a backfill job for the specified stream object.
⊞ Locations ProjectsUse this method to stop a backfill job for the specified stream object.
⊞ Locations ProjectsUse this method to update the configuration of a stream.
⊞ Locations ProjectsUse this method to start, resume or recover a stream with a non default CDC strategy. NOTE: This feature is currently experimental.
Anthos On-Prem API v1
⊞ Locations ProjectsCreates a new bare metal admin cluster in a given project and location. The API needs to be combined with creating a bootstrap cluster to work. See: https://cloud.google.com/anthos/clusters/docs/bare-metal/latest/installing/creating-clusters/create-admin-cluster-api#prepare_bootstrap_environment
⊞ Locations ProjectsEnrolls an existing bare metal admin cluster to the Anthos On-Prem API within a given project and location. Through enrollment, an existing admin cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster will be expected to be performed through the API.
⊞ Locations ProjectsGets details of a single bare metal admin cluster.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists bare metal admin clusters in a given project and location.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates the parameters of a single bare metal admin cluster.
⊞ Locations ProjectsQueries the bare metal admin cluster version config.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUnenrolls an existing bare metal admin cluster from the Anthos On-Prem API within a given project and location. Unenrollment removes the Cloud reference to the cluster without modifying the underlying OnPrem Resources. Clusters will continue to run; however, they will no longer be accessible through the Anthos On-Prem API or its clients.
⊞ Locations ProjectsCreates a new bare metal node pool in a given project, location and Bare Metal cluster.
⊞ Locations ProjectsDeletes a single bare metal node pool.
⊞ Locations ProjectsEnrolls an existing bare metal node pool to the Anthos On-Prem API within a given project and location. Through enrollment, an existing node pool will become Anthos On-Prem API managed. The corresponding GCP resources will be created.
⊞ Locations ProjectsGets details of a single bare metal node pool.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists bare metal node pools in a given project, location and bare metal cluster.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates the parameters of a single bare metal node pool.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUnenrolls a bare metal node pool from Anthos On-Prem API.
⊞ Locations ProjectsCreates a new bare metal cluster in a given project and location.
⊞ Locations ProjectsDeletes a single bare metal Cluster.
⊞ Locations ProjectsEnrolls an existing bare metal user cluster and its node pools to the Anthos On-Prem API within a given project and location. Through enrollment, an existing cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster and/or its node pools will be expected to be performed through the API.
⊞ Locations ProjectsGets details of a single bare metal Cluster.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists bare metal clusters in a given project and location.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates the parameters of a single bare metal Cluster.
⊞ Locations ProjectsQueries the bare metal user cluster version config.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUnenrolls an existing bare metal user cluster and its node pools from the Anthos On-Prem API within a given project and location. Unenrollment removes the Cloud reference to the cluster without modifying the underlying OnPrem Resources. Clusters and node pools will continue to run; however, they will no longer be accessible through the Anthos On-Prem API or its clients.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsEnrolls an existing VMware admin cluster to the Anthos On-Prem API within a given project and location. Through enrollment, an existing admin cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster will be expected to be performed through the API.
⊞ Locations ProjectsGets details of a single VMware admin cluster.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists VMware admin clusters in a given project and location.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates the parameters of a single VMware admin cluster.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUnenrolls an existing VMware admin cluster from the Anthos On-Prem API within a given project and location. Unenrollment removes the Cloud reference to the cluster without modifying the underlying OnPrem Resources. Clusters will continue to run; however, they will no longer be accessible through the Anthos On-Prem API or its clients.
⊞ Locations ProjectsCreates a new VMware user cluster in a given project and location.
⊞ Locations ProjectsDeletes a single VMware Cluster.
⊞ Locations ProjectsEnrolls an existing VMware user cluster and its node pools to the Anthos On-Prem API within a given project and location. Through enrollment, an existing cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster and/or its node pools will be expected to be performed through the API.
⊞ Locations ProjectsGets details of a single VMware Cluster.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists VMware Clusters in a given project and location.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates the parameters of a single VMware cluster.
⊞ Locations ProjectsQueries the VMware user cluster version config.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUnenrolls an existing VMware user cluster and its node pools from the Anthos On-Prem API within a given project and location. Unenrollment removes the Cloud reference to the cluster without modifying the underlying OnPrem Resources. Clusters and node pools will continue to run; however, they will no longer be accessible through the Anthos On-Prem API or UI.
⊞ Locations ProjectsCreates a new VMware node pool in a given project, location and VMWare cluster.
⊞ Locations ProjectsDeletes a single VMware node pool.
⊞ Locations ProjectsEnrolls a VMware node pool to Anthos On-Prem API
⊞ Locations ProjectsGets details of a single VMware node pool.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists VMware node pools in a given project, location and VMWare cluster.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates the parameters of a single VMware node pool.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsUnenrolls a VMware node pool to Anthos On-Prem API
Discovery Engine API v1beta
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a Document.
⊞ Locations ProjectsDeletes a Document.
⊞ Locations ProjectsGets a Document.
⊞ Locations ProjectsBulk import of multiple Documents. Request processing may be synchronous. Non-existing items will be created. Note: It is possible for a subset of the Documents to be successfully updated.
⊞ Locations ProjectsGets a list of Documents.
⊞ Locations ProjectsUpdates a Document.
⊞ Locations ProjectsPermanently deletes all selected Documents in a branch. This process is asynchronous. Depending on the number of Documents to be deleted, this operation can take hours to complete. Before the delete operation completes, some Documents might still be returned by DocumentService.GetDocument or DocumentService.ListDocuments. To get a list of the Documents to be deleted, set PurgeDocumentsRequest.force to false.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCompletes the specified user input with keyword suggestions.
⊞ Locations ProjectsConverses a conversation.
⊞ Locations ProjectsCreates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned.
⊞ Locations ProjectsDeletes a Conversation. If the Conversation to delete does not exist, a NOT_FOUND error is returned.
⊞ Locations ProjectsGets a Conversation.
⊞ Locations ProjectsLists all Conversations by their parent DataStore.
⊞ Locations ProjectsUpdates a Conversation. Conversation action type cannot be changed. If the Conversation to update does not exist, a NOT_FOUND error is returned.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a Schema.
⊞ Locations ProjectsDeletes a Schema.
⊞ Locations ProjectsGets a Schema.
⊞ Locations ProjectsGets a list of Schemas.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates a Schema.
⊞ Locations ProjectsMakes a recommendation, which requires a contextual user event.
⊞ Locations ProjectsPerforms a search.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWrites a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a third-party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly.
⊞ Locations ProjectsBulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.
⊞ Locations ProjectsWrites a single user event.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsMakes a recommendation, which requires a contextual user event.
⊞ Locations ProjectsPerforms a search.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a Document.
⊞ Locations ProjectsDeletes a Document.
⊞ Locations ProjectsGets a Document.
⊞ Locations ProjectsBulk import of multiple Documents. Request processing may be synchronous. Non-existing items will be created. Note: It is possible for a subset of the Documents to be successfully updated.
⊞ Locations ProjectsGets a list of Documents.
⊞ Locations ProjectsUpdates a Document.
⊞ Locations ProjectsPermanently deletes all selected Documents in a branch. This process is asynchronous. Depending on the number of Documents to be deleted, this operation can take hours to complete. Before the delete operation completes, some Documents might still be returned by DocumentService.GetDocument or DocumentService.ListDocuments. To get a list of the Documents to be deleted, set PurgeDocumentsRequest.force to false.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCompletes the specified user input with keyword suggestions.
⊞ Locations ProjectsConverses a conversation.
⊞ Locations ProjectsCreates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned.
⊞ Locations ProjectsDeletes a Conversation. If the Conversation to delete does not exist, a NOT_FOUND error is returned.
⊞ Locations ProjectsGets a Conversation.
⊞ Locations ProjectsLists all Conversations by their parent DataStore.
⊞ Locations ProjectsUpdates a Conversation. Conversation action type cannot be changed. If the Conversation to update does not exist, a NOT_FOUND error is returned.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a Schema.
⊞ Locations ProjectsDeletes a Schema.
⊞ Locations ProjectsGets a Schema.
⊞ Locations ProjectsGets a list of Schemas.
⊞ Locations ProjectsUpdates a Schema.
⊞ Locations ProjectsMakes a recommendation, which requires a contextual user event.
⊞ Locations ProjectsPerforms a search.
⊞ Locations ProjectsWrites a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a third-party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly.
⊞ Locations ProjectsBulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.
⊞ Locations ProjectsWrites a single user event.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Binary Authorization API v1
⊞ Attestors ProjectsCreates an attestor, and returns a copy of the new attestor. Returns `NOT_FOUND` if the project does not exist, `INVALID_ARGUMENT` if the request is malformed, `ALREADY_EXISTS` if the attestor already exists.
⊞ Attestors ProjectsDeletes an attestor. Returns `NOT_FOUND` if the attestor does not exist.
⊞ Attestors ProjectsGets an attestor. Returns `NOT_FOUND` if the attestor does not exist.
⊞ Attestors ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Attestors ProjectsLists attestors. Returns `INVALID_ARGUMENT` if the project does not exist.
⊞ Attestors ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Attestors ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Attestors ProjectsUpdates an attestor. Returns `NOT_FOUND` if the attestor does not exist.
⊞ Attestors ProjectsReturns whether the given `Attestation` for the given image URI was signed by the given `Attestor`
⊞ GetPolicy ProjectsA policy specifies the attestors that must attest to a container image, before the project is allowed to deploy that image. There is at most one policy per project. All image admission requests are permitted if a project has no policy. Gets the policy for this project. Returns a default policy if the project does not have one.
⊞ Platforms ProjectsCreates a platform policy, and returns a copy of it. Returns `NOT_FOUND` if the project or platform doesn't exist, `INVALID_ARGUMENT` if the request is malformed, `ALREADY_EXISTS` if the policy already exists, and `INVALID_ARGUMENT` if the policy contains a platform-specific policy that does not match the platform value specified in the URL.
⊞ Platforms ProjectsDeletes a platform policy. Returns `NOT_FOUND` if the policy doesn't exist.
⊞ Platforms ProjectsGets a platform policy. Returns `NOT_FOUND` if the policy doesn't exist.
⊞ Platforms ProjectsLists platform policies owned by a project in the specified platform. Returns `INVALID_ARGUMENT` if the project or the platform doesn't exist.
⊞ Platforms ProjectsReplaces a platform policy. Returns `NOT_FOUND` if the policy doesn't exist.
⊞ Policy ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Policy ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Policy ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ UpdatePolicy ProjectsCreates or updates a project's policy, and returns a copy of the new policy. A policy is always updated as a whole, to avoid race conditions with concurrent policy enforcement (or management!) requests. Returns `NOT_FOUND` if the project does not exist, `INVALID_ARGUMENT` if the request is malformed.
⊞ GetPolicy SystempolicyGets the current system policy in the specified location.
Google Cloud Data Catalog API v1
⊞ Search CatalogSearches Data Catalog for multiple resources like entries and tags that match a query. This is a [Custom Method] (https://cloud.google.com/apis/design/custom_methods) that doesn't return all information on a resource, only its ID and high level fields. To get more information, you can subsequently call specific get methods. Note: Data Catalog search queries don't guarantee full recall. Results that match your query might not be returned, even in subsequent result pages. Additionally, returned (and not returned) results can vary if you repeat search queries. For more information, see [Data Catalog search syntax] (https://cloud.google.com/data-catalog/docs/how-to/search-reference).
⊞ Lookup EntriesGets an entry by its target resource name. The resource name comes from the source Google Cloud Platform service.
⊞ Locations ProjectsCreates an entry group. An entry group contains logically related entries together with [Cloud Identity and Access Management](/data-catalog/docs/concepts/iam) policies. These policies specify users who can create, edit, and view entries within entry groups. Data Catalog automatically creates entry groups with names that start with the `@` symbol for the following resources: * BigQuery entries (`@bigquery`) * Pub/Sub topics (`@pubsub`) * Dataproc Metastore services (`@dataproc_metastore_{SERVICE_NAME_HASH}`) You can create your own entry groups for Cloud Storage fileset entries and custom entries together with the corresponding IAM policies. User-created entry groups can't contain the `@` symbol, it is reserved for automatically created groups. Entry groups, like entries, can be searched. A maximum of 10,000 entry groups may be created per organization across all locations. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsDeletes an entry group. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsCreates an entry. You can create entries only with 'FILESET', 'CLUSTER', 'DATA_STREAM', or custom types. Data Catalog automatically creates entries with other types during metadata ingestion from integrated systems. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). An entry group can have a maximum of 100,000 entries.
⊞ Locations ProjectsDeletes an existing entry. You can delete only the entries created by the CreateEntry method. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsGets an entry.
⊞ Locations ProjectsGets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn't exist or you don't have the permission to view it. * An empty policy if the resource exists but doesn't have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn't get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
⊞ Locations ProjectsImports entries from a source, such as data previously dumped into a Cloud Storage bucket, into Data Catalog. Import of entries is a sync operation that reconciles the state of the third-party system with the Data Catalog. `ImportEntries` accepts source data snapshots of a third-party system. Snapshot should be delivered as a .wire or base65-encoded .txt file containing a sequence of Protocol Buffer messages of DumpItem type. `ImportEntries` returns a long-running operation resource that can be queried with Operations.GetOperation to return ImportEntriesMetadata and an ImportEntriesResponse message.
⊞ Locations ProjectsLists entries. Note: Currently, this method can list only custom entries. To get a list of both custom and automatically created entries, use SearchCatalog.
⊞ Locations ProjectsModifies contacts, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateContacts` IAM permission on the corresponding project.
⊞ Locations ProjectsModifies entry overview, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateOverview` IAM permission on the corresponding project.
⊞ Locations ProjectsUpdates an existing entry. You must enable the Data Catalog API in the project identified by the `entry.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsMarks an Entry as starred by the current user. Starring information is private to each user.
⊞ Locations ProjectsCreates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization.
⊞ Locations ProjectsDeletes a tag.
⊞ Locations ProjectsLists tags assigned to an Entry. The columns in the response are lowercased.
⊞ Locations ProjectsUpdates an existing tag.
⊞ Locations Projects`ReconcileTags` creates or updates a list of tags on the entry. If the ReconcileTagsRequest.force_delete_missing parameter is set, the operation deletes tags not included in the input tag list. `ReconcileTags` returns a long-running operation resource that can be queried with Operations.GetOperation to return ReconcileTagsMetadata and a ReconcileTagsResponse message.
⊞ Locations ProjectsGets your permissions on a resource. Returns an empty set of permissions if the resource doesn't exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can't be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method.
⊞ Locations ProjectsMarks an Entry as NOT starred by the current user. Starring information is private to each user.
⊞ Locations ProjectsGets an entry group.
⊞ Locations ProjectsGets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn't exist or you don't have the permission to view it. * An empty policy if the resource exists but doesn't have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn't get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
⊞ Locations ProjectsLists entry groups.
⊞ Locations ProjectsUpdates an entry group. You must enable the Data Catalog API in the project identified by the `entry_group.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsSets an access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates - Entry groups Note: This method sets policies only within Data Catalog and can't be used to manage policies in BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources synced with the Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.
⊞ Locations ProjectsCreates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization.
⊞ Locations ProjectsDeletes a tag.
⊞ Locations ProjectsLists tags assigned to an Entry. The columns in the response are lowercased.
⊞ Locations ProjectsUpdates an existing tag.
⊞ Locations ProjectsGets your permissions on a resource. Returns an empty set of permissions if the resource doesn't exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can't be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsDeletes a tag template and all tags that use it. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsCreates a field in a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsDeletes a field in a tag template and all uses of this field from the tags based on this template. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsRenames an enum value in a tag template. Within a single enum field, enum values must be unique.
⊞ Locations ProjectsUpdates a field in a tag template. You can't update the field type with this method. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsRenames a field in a tag template. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsGets a tag template.
⊞ Locations ProjectsGets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn't exist or you don't have the permission to view it. * An empty policy if the resource exists but doesn't have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn't get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
⊞ Locations ProjectsUpdates a tag template. You can't update template fields with this method. These fields are separate resources with their own create, update, and delete methods. You must enable the Data Catalog API in the project identified by the `tag_template.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
⊞ Locations ProjectsSets an access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates - Entry groups Note: This method sets policies only within Data Catalog and can't be used to manage policies in BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources synced with the Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.
⊞ Locations ProjectsGets your permissions on a resource. Returns an empty set of permissions if the resource doesn't exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can't be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method.
⊞ Locations ProjectsCreates a taxonomy in a specified project. The taxonomy is initially empty, that is, it doesn't contain policy tags.
⊞ Locations ProjectsDeletes a taxonomy, including all policy tags in this taxonomy, their associated policies, and the policy tags references from BigQuery columns.
⊞ Locations ProjectsExports taxonomies in the requested type and returns them, including their policy tags. The requested taxonomies must belong to the same project. This method generates `SerializedTaxonomy` protocol buffers with nested policy tags that can be used as input for `ImportTaxonomies` calls.
⊞ Locations ProjectsGets a taxonomy.
⊞ Locations ProjectsGets the IAM policy for a policy tag or a taxonomy.
⊞ Locations ProjectsCreates new taxonomies (including their policy tags) in a given project by importing from inlined or cross-regional sources. For a cross-regional source, new taxonomies are created by copying from a source in another region. For an inlined source, taxonomies and policy tags are created in bulk using nested protocol buffer structures.
⊞ Locations ProjectsLists all taxonomies in a project in a particular location that you have a permission to view.
⊞ Locations ProjectsUpdates a taxonomy, including its display name, description, and activated policy types.
⊞ Locations ProjectsCreates a policy tag in a taxonomy.
⊞ Locations ProjectsDeletes a policy tag together with the following: * All of its descendant policy tags, if any * Policies associated with the policy tag and its descendants * References from BigQuery table schema of the policy tag and its descendants
⊞ Locations ProjectsGets a policy tag.
⊞ Locations ProjectsGets the IAM policy for a policy tag or a taxonomy.
⊞ Locations ProjectsLists all policy tags in a taxonomy.
⊞ Locations ProjectsUpdates a policy tag, including its display name, description, and parent policy tag.
⊞ Locations ProjectsSets the IAM policy for a policy tag or a taxonomy.
⊞ Locations ProjectsReturns your permissions on a specified policy tag or taxonomy.
⊞ Locations ProjectsReplaces (updates) a taxonomy and all its policy tags. The taxonomy and its entire hierarchy of policy tags must be represented literally by `SerializedTaxonomy` and the nested `SerializedPolicyTag` messages. This operation automatically does the following: - Deletes the existing policy tags that are missing from the `SerializedPolicyTag`. - Creates policy tags that don't have resource names. They are considered new. - Updates policy tags with valid resources names accordingly.
⊞ Locations ProjectsSets the IAM policy for a policy tag or a taxonomy.
⊞ Locations ProjectsReturns your permissions on a specified policy tag or taxonomy.
Data pipelines API v1
⊞ Locations ProjectsCreates a pipeline. For a batch pipeline, you can pass scheduler information. Data Pipelines uses the scheduler information to create an internal scheduler that runs jobs periodically. If the internal scheduler is not configured, you can use RunPipeline to run jobs.
⊞ Locations ProjectsDeletes a pipeline. If a scheduler job is attached to the pipeline, it will be deleted.
⊞ Locations ProjectsLooks up a single pipeline. Returns a "NOT_FOUND" error if no such pipeline exists. Returns a "FORBIDDEN" error if the caller doesn't have permission to access it.
⊞ Locations ProjectsLists jobs for a given pipeline. Throws a "FORBIDDEN" error if the caller doesn't have permission to access it.
⊞ Locations ProjectsLists pipelines. Returns a "FORBIDDEN" error if the caller doesn't have permission to access it.
⊞ Locations ProjectsUpdates a pipeline. If successful, the updated Pipeline is returned. Returns `NOT_FOUND` if the pipeline doesn't exist. If UpdatePipeline does not return successfully, you can retry the UpdatePipeline request until you receive a successful response.
⊞ Locations ProjectsCreates a job for the specified pipeline directly. You can use this method when the internal scheduler is not configured and you want to trigger the job directly or through an external system. Returns a "NOT_FOUND" error if the pipeline doesn't exist. Returns a "FORBIDDEN" error if the user doesn't have permission to access the pipeline or run jobs for the pipeline.
⊞ Locations ProjectsFreezes pipeline execution permanently. If there's a corresponding scheduler entry, it's deleted, and the pipeline state is changed to "ARCHIVED". However, pipeline metadata is retained.
Cloud Tool Results API v1beta3
⊞ GetSettings ProjectsGets the Tool Results settings for a project. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read from project
⊞ Histories ProjectsCreates a History. The returned History will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing project does not exist
⊞ Histories ProjectsRetrieves a single screenshot cluster by its ID
⊞ Histories ProjectsLists Screenshot Clusters Returns the list of screenshot clusters corresponding to an execution. Screenshot clusters are created after the execution is finished. Clusters are created from a set of screenshots. Between any two screenshots, a matching score is calculated based off their metadata that determines how similar they are. Screenshots are placed in the cluster that has screens which have the highest matching scores.
⊞ Histories ProjectsCreates an Execution. The returned Execution will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist
⊞ Histories ProjectsGets an Environment. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Environment does not exist
⊞ Histories ProjectsLists Environments for a given Execution. The Environments are sorted by display name. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing Execution does not exist
⊞ Histories ProjectsGets an Execution. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Execution does not exist
⊞ Histories ProjectsLists Executions for a given History. The executions are sorted by creation_time in descending order. The execution_id key will be used to order the executions with the same creation_time. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist
⊞ Histories ProjectsUpdates an existing Execution with the supplied partial entity. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal - NOT_FOUND - if the containing History does not exist
⊞ Histories ProjectsLists accessibility clusters for a given Step May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if an argument in the request happens to be invalid; e.g. if the locale format is incorrect - NOT_FOUND - if the containing Step does not exist
⊞ Histories ProjectsCreates a Step. The returned Step will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the step is too large (more than 10Mib) - NOT_FOUND - if the containing Execution does not exist
⊞ Histories ProjectsGets a Step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Step does not exist
⊞ Histories ProjectsRetrieves a PerfMetricsSummary. May return any of the following error code(s): - NOT_FOUND - The specified PerfMetricsSummary does not exist
⊞ Histories ProjectsLists Steps for a given Execution. The steps are sorted by creation_time in descending order. The step_id key will be used to order the steps with the same creation_time. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if an argument in the request happens to be invalid; e.g. if an attempt is made to list the children of a nonexistent Step - NOT_FOUND - if the containing Execution does not exist
⊞ Histories ProjectsUpdates an existing Step with the supplied partial entity. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal (e.g try to upload a duplicate xml file), if the updated step is too large (more than 10Mib) - NOT_FOUND - if the containing Execution does not exist
⊞ Histories ProjectsCreates a PerfMetricsSummary resource. Returns the existing one if it has already been created. May return any of the following error code(s): - NOT_FOUND - The containing Step does not exist
⊞ Histories ProjectsCreates a PerfSampleSeries. May return any of the following error code(s): - ALREADY_EXISTS - PerfMetricSummary already exists for the given Step - NOT_FOUND - The containing Step does not exist
⊞ Histories ProjectsGets a PerfSampleSeries. May return any of the following error code(s): - NOT_FOUND - The specified PerfSampleSeries does not exist
⊞ Histories ProjectsLists PerfSampleSeries for a given Step. The request provides an optional filter which specifies one or more PerfMetricsType to include in the result; if none returns all. The resulting PerfSampleSeries are sorted by ids. May return any of the following canonical error codes: - NOT_FOUND - The containing Step does not exist
⊞ Histories ProjectsCreates a batch of PerfSamples - a client can submit multiple batches of Perf Samples through repeated calls to this method in order to split up a large request payload - duplicates and existing timestamp entries will be ignored. - the batch operation may partially succeed - the set of elements successfully inserted is returned in the response (omits items which already existed in the database). May return any of the following canonical error codes: - NOT_FOUND - The containing PerfSampleSeries does not exist
⊞ Histories ProjectsLists the Performance Samples of a given Sample Series - The list results are sorted by timestamps ascending - The default page size is 500 samples; and maximum size allowed 5000 - The response token indicates the last returned PerfSample timestamp - When the results size exceeds the page size, submit a subsequent request including the page token to return the rest of the samples up to the page limit May return any of the following canonical error codes: - OUT_OF_RANGE - The specified request page_token is out of valid range - NOT_FOUND - The containing PerfSampleSeries does not exist
⊞ Histories ProjectsPublish xml files to an existing Step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal, e.g. try to upload a duplicate xml file or a file too large. - NOT_FOUND - if the containing Execution does not exist
⊞ Histories ProjectsGets details of a Test Case for a Step. Experimental test cases API. Still in active development. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing Test Case does not exist
⊞ Histories ProjectsLists Test Cases attached to a Step. Experimental test cases API. Still in active development. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing Step does not exist
⊞ Histories ProjectsLists thumbnails of images attached to a step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read from the project, or from any of the images - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the step does not exist, or if any of the images do not exist
⊞ Histories ProjectsGets a History. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist
⊞ Histories ProjectsLists Histories for a given Project. The histories are sorted by modification time in descending order. The history_id key will be used to order the history with the same modification time. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist
⊞ InitializeSettings ProjectsCreates resources for settings which have not yet been set. Currently, this creates a single resource: a Google Cloud Storage bucket, to be used as the default bucket for this project. The bucket is created in an FTL-own storage project. Except for in rare cases, calling this method in parallel from multiple clients will only create a single bucket. In order to avoid unnecessary storage charges, the bucket is configured to automatically delete objects older than 90 days. The bucket is created with the following permissions: - Owner access for owners of central storage project (FTL-owned) - Writer access for owners/editors of customer project - Reader access for viewers of customer project The default ACL on objects created in the bucket is: - Owner access for owners of central storage project - Reader access for owners/editors/viewers of customer project See Google Cloud Storage documentation for more details. If there is already a default bucket set and the project can access the bucket, this call does nothing. However, if the project doesn't have the permission to access the bucket or the bucket is deleted, a new bucket will be created. May return any canonical error codes, including the following: - PERMISSION_DENIED - if the user is not authorized to write to project - Any error code raised by Google Cloud Storage
Cloud Filestore API v1
⊞ Locations ProjectsCreates a backup.
⊞ Locations ProjectsDeletes a backup.
⊞ Locations ProjectsGets the details of a specific backup.
⊞ Locations ProjectsLists all backups in a project for either a specified location or for all locations.
⊞ Locations ProjectsUpdates the settings of a specific backup.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsCreates an instance. When creating from a backup, the capacity of the new instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the minimum capacity of the tier).
⊞ Locations ProjectsDeletes an instance.
⊞ Locations ProjectsGets the details of a specific instance.
⊞ Locations ProjectsLists all instances in a project for either a specified location or for all locations.
⊞ Locations ProjectsUpdates the settings of a specific instance.
⊞ Locations ProjectsRestores an existing instance's file share from a backup. The capacity of the instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the minimum capacity of the tier).
⊞ Locations ProjectsRevert an existing instance's file system to a specified snapshot.
⊞ Locations ProjectsCreates a snapshot.
⊞ Locations ProjectsDeletes a snapshot.
⊞ Locations ProjectsGets the details of a specific snapshot.
⊞ Locations ProjectsLists all snapshots in a project for either a specified location or for all locations.
⊞ Locations ProjectsUpdates the settings of a specific snapshot.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Artifact Registry API v1
⊞ GetProjectSettings ProjectsRetrieves the Settings for the Project.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsRetrieves the VPCSC Config for the Project.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsImports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.
⊞ Locations ProjectsDirectly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.
⊞ Locations ProjectsCreates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.
⊞ Locations ProjectsDeletes a repository and all of its contents. The returned Operation will finish once the repository has been deleted. It will not have any Operation metadata and will return a google.protobuf.Empty response.
⊞ Locations ProjectsGets a docker image.
⊞ Locations ProjectsLists docker images.
⊞ Locations ProjectsGets a file.
⊞ Locations ProjectsLists files.
⊞ Locations ProjectsGets a repository.
⊞ Locations ProjectsGets the IAM policy for a given resource.
⊞ Locations ProjectsDirectly uploads a Go module. The returned Operation will complete once the Go module is uploaded. Package, Version, and File resources are created based on the uploaded Go module.
⊞ Locations ProjectsImports GooGet artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.
⊞ Locations ProjectsDirectly uploads a GooGet artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.
⊞ Locations ProjectsDirectly uploads a KFP artifact. The returned Operation will complete once the resource is uploaded. Package, Version, and File resources will be created based on the uploaded artifact. Uploaded artifacts that conflict with existing resources will be overwritten.
⊞ Locations ProjectsLists repositories.
⊞ Locations ProjectsGets a maven artifact.
⊞ Locations ProjectsLists maven artifacts.
⊞ Locations ProjectsGets a npm package.
⊞ Locations ProjectsLists npm packages.
⊞ Locations ProjectsDeletes a package and all of its versions and tags. The returned operation will complete once the package has been deleted.
⊞ Locations ProjectsGets a package.
⊞ Locations ProjectsLists packages.
⊞ Locations ProjectsCreates a tag.
⊞ Locations ProjectsDeletes a tag.
⊞ Locations ProjectsGets a tag.
⊞ Locations ProjectsLists tags.
⊞ Locations ProjectsUpdates a tag.
⊞ Locations ProjectsDeletes multiple versions across a repository. The returned operation will complete once the versions have been deleted.
⊞ Locations ProjectsDeletes a version and all of its content. The returned operation will complete once the version has been deleted.
⊞ Locations ProjectsGets a version
⊞ Locations ProjectsLists versions.
⊞ Locations ProjectsUpdates a repository.
⊞ Locations ProjectsGets a python package.
⊞ Locations ProjectsLists python packages.
⊞ Locations ProjectsUpdates the IAM policy for a given resource.
⊞ Locations ProjectsTests if the caller has a list of permissions on a resource.
⊞ Locations ProjectsImports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.
⊞ Locations ProjectsDirectly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.
⊞ Locations ProjectsUpdates the VPCSC Config for the Project.
⊞ UpdateProjectSettings ProjectsUpdates the Settings for the Project.
Cloud Billing API v1
⊞ Create BillingAccountsThis method creates [billing subaccounts](https://cloud.google.com/billing/docs/concepts#subaccounts). Google Cloud resellers should use the Channel Services APIs, [accounts.customers.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers/create) and [accounts.customers.entitlements.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers.entitlements/create). When creating a subaccount, the current authenticated user must have the `billing.accounts.update` IAM permission on the parent account, which is typically given to billing account [administrators](https://cloud.google.com/billing/docs/how-to/billing-access). This method will return an error if the parent account has not been provisioned for subaccounts.
⊞ Get BillingAccountsGets information about a billing account. The current authenticated user must be a [viewer of the billing account](https://cloud.google.com/billing/docs/how-to/billing-access).
⊞ GetIamPolicy BillingAccountsGets the access control policy for a billing account. The caller must have the `billing.accounts.getIamPolicy` permission on the account, which is often given to billing account [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).
⊞ List BillingAccountsLists the billing accounts that the current authenticated user has permission to [view](https://cloud.google.com/billing/docs/how-to/billing-access).
⊞ Move BillingAccountsChanges which parent organization a billing account belongs to.
⊞ Patch BillingAccountsUpdates a billing account's fields. Currently the only field that can be edited is `display_name`. The current authenticated user must have the `billing.accounts.update` IAM permission, which is typically given to the [administrator](https://cloud.google.com/billing/docs/how-to/billing-access) of the billing account.
⊞ Projects BillingAccountsLists the projects associated with a billing account. The current authenticated user must have the `billing.resourceAssociations.list` IAM permission, which is often given to billing account [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).
⊞ SetIamPolicy BillingAccountsSets the access control policy for a billing account. Replaces any existing policy. The caller must have the `billing.accounts.setIamPolicy` permission on the account, which is often given to billing account [administrators](https://cloud.google.com/billing/docs/how-to/billing-access).
⊞ SubAccounts BillingAccountsThis method creates [billing subaccounts](https://cloud.google.com/billing/docs/concepts#subaccounts). Google Cloud resellers should use the Channel Services APIs, [accounts.customers.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers/create) and [accounts.customers.entitlements.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers.entitlements/create). When creating a subaccount, the current authenticated user must have the `billing.accounts.update` IAM permission on the parent account, which is typically given to billing account [administrators](https://cloud.google.com/billing/docs/how-to/billing-access). This method will return an error if the parent account has not been provisioned for subaccounts.
⊞ SubAccounts BillingAccountsLists the billing accounts that the current authenticated user has permission to [view](https://cloud.google.com/billing/docs/how-to/billing-access).
⊞ TestIamPermissions BillingAccountsTests the access control policy for a billing account. This method takes the resource and a set of permissions as input and returns the subset of the input permissions that the caller is allowed for that resource.
⊞ BillingAccounts OrganizationsThis method creates [billing subaccounts](https://cloud.google.com/billing/docs/concepts#subaccounts). Google Cloud resellers should use the Channel Services APIs, [accounts.customers.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers/create) and [accounts.customers.entitlements.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers.entitlements/create). When creating a subaccount, the current authenticated user must have the `billing.accounts.update` IAM permission on the parent account, which is typically given to billing account [administrators](https://cloud.google.com/billing/docs/how-to/billing-access). This method will return an error if the parent account has not been provisioned for subaccounts.
⊞ BillingAccounts OrganizationsLists the billing accounts that the current authenticated user has permission to [view](https://cloud.google.com/billing/docs/how-to/billing-access).
⊞ BillingAccounts OrganizationsChanges which parent organization a billing account belongs to.
⊞ GetBillingInfo ProjectsGets the billing information for a project. The current authenticated user must have the `resourcemanager.projects.get` permission for the project, which can be granted by assigning the [Project Viewer](https://cloud.google.com/iam/docs/understanding-roles#predefined_roles) role.
⊞ UpdateBillingInfo ProjectsSets or updates the billing account associated with a project. You specify the new billing account by setting the `billing_account_name` in the `ProjectBillingInfo` resource to the resource name of a billing account. Associating a project with an open billing account enables billing on the project and allows charges for resource usage. If the project already had a billing account, this method changes the billing account used for resource usage charges. *Note:* Incurred charges that have not yet been reported in the transaction history of the Google Cloud Console might be billed to the new billing account, even if the charge occurred before the new billing account was assigned to the project. The current authenticated user must have ownership privileges for both the [project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo ) and the [billing account](https://cloud.google.com/billing/docs/how-to/billing-access). You can disable billing on the project by setting the `billing_account_name` field to empty. This action disassociates the current billing account from the project. Any billable activity of your in-use services will stop, and your application could stop functioning as expected. Any unbilled charges to date will be billed to the previously associated account. The current authenticated user must be either an owner of the project or an owner of the billing account for the project. Note that associating a project with a *closed* billing account will have much the same effect as disabling billing on the project: any paid resources used by the project will be shut down. Thus, unless you wish to disable billing, you should always call this method with the name of an *open* billing account.
⊞ List ServicesLists all public cloud services.
⊞ Skus ServicesLists all publicly available SKUs for a given cloud service.
Access Context Manager API v1
⊞ AccessLevels AccessPoliciesCreates an access level. The long-running operation from this RPC has a successful status after the access level propagates to long-lasting storage. If access levels contain errors, an error response is returned for the first error encountered.
⊞ AccessLevels AccessPoliciesDeletes an access level based on the resource name. The long-running operation from this RPC has a successful status after the access level has been removed from long-lasting storage.
⊞ AccessLevels AccessPoliciesGets an access level based on the resource name.
⊞ AccessLevels AccessPoliciesLists all access levels for an access policy.
⊞ AccessLevels AccessPoliciesUpdates an access level. The long-running operation from this RPC has a successful status after the changes to the access level propagate to long-lasting storage. If access levels contain errors, an error response is returned for the first error encountered.
⊞ AccessLevels AccessPoliciesReplaces all existing access levels in an access policy with the access levels provided. This is done atomically. The long-running operation from this RPC has a successful status after all replacements propagate to long-lasting storage. If the replacement contains errors, an error response is returned for the first error encountered. Upon error, the replacement is cancelled, and existing access levels are not affected. The Operation.response field contains ReplaceAccessLevelsResponse. Removing access levels contained in existing service perimeters result in an error.
⊞ AccessLevels AccessPoliciesReturns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does not support other resources.
⊞ AuthorizedOrgsDescs AccessPoliciesCreates an authorized orgs desc. The long-running operation from this RPC has a successful status after the authorized orgs desc propagates to long-lasting storage. If a authorized orgs desc contains errors, an error response is returned for the first error encountered. The name of this `AuthorizedOrgsDesc` will be assigned during creation.
⊞ AuthorizedOrgsDescs AccessPoliciesDeletes an authorized orgs desc based on the resource name. The long-running operation from this RPC has a successful status after the authorized orgs desc is removed from long-lasting storage.
⊞ AuthorizedOrgsDescs AccessPoliciesGets an authorized orgs desc based on the resource name.
⊞ AuthorizedOrgsDescs AccessPoliciesLists all authorized orgs descs for an access policy.
⊞ AuthorizedOrgsDescs AccessPoliciesUpdates an authorized orgs desc. The long-running operation from this RPC has a successful status after the authorized orgs desc propagates to long-lasting storage. If a authorized orgs desc contains errors, an error response is returned for the first error encountered. Only the organization list in `AuthorizedOrgsDesc` can be updated. The name, authorization_type, asset_type and authorization_direction cannot be updated.
⊞ Create AccessPoliciesCreates an access policy. This method fails if the organization already has an access policy. The long-running operation has a successful status after the access policy propagates to long-lasting storage. Syntactic and basic semantic errors are returned in `metadata` as a BadRequest proto.
⊞ Delete AccessPoliciesDeletes an access policy based on the resource name. The long-running operation has a successful status after the access policy is removed from long-lasting storage.
⊞ Get AccessPoliciesReturns an access policy based on the name.
⊞ GetIamPolicy AccessPoliciesGets the IAM policy for the specified Access Context Manager access policy.
⊞ List AccessPoliciesLists all access policies in an organization.
⊞ Patch AccessPoliciesUpdates an access policy. The long-running operation from this RPC has a successful status after the changes to the access policy propagate to long-lasting storage.
⊞ ServicePerimeters AccessPoliciesCommits the dry-run specification for all the service perimeters in an access policy. A commit operation on a service perimeter involves copying its `spec` field to the `status` field of the service perimeter. Only service perimeters with `use_explicit_dry_run_spec` field set to true are affected by a commit operation. The long-running operation from this RPC has a successful status after the dry-run specifications for all the service perimeters have been committed. If a commit fails, it causes the long-running operation to return an error response and the entire commit operation is cancelled. When successful, the Operation.response field contains CommitServicePerimetersResponse. The `dry_run` and the `spec` fields are cleared after a successful commit operation.
⊞ ServicePerimeters AccessPoliciesCreates a service perimeter. The long-running operation from this RPC has a successful status after the service perimeter propagates to long-lasting storage. If a service perimeter contains errors, an error response is returned for the first error encountered.
⊞ ServicePerimeters AccessPoliciesDeletes a service perimeter based on the resource name. The long-running operation from this RPC has a successful status after the service perimeter is removed from long-lasting storage.
⊞ ServicePerimeters AccessPoliciesGets a service perimeter based on the resource name.
⊞ ServicePerimeters AccessPoliciesLists all service perimeters for an access policy.
⊞ ServicePerimeters AccessPoliciesUpdates a service perimeter. The long-running operation from this RPC has a successful status after the service perimeter propagates to long-lasting storage. If a service perimeter contains errors, an error response is returned for the first error encountered.
⊞ ServicePerimeters AccessPoliciesReplace all existing service perimeters in an access policy with the service perimeters provided. This is done atomically. The long-running operation from this RPC has a successful status after all replacements propagate to long-lasting storage. Replacements containing errors result in an error response for the first error encountered. Upon an error, replacement are cancelled and existing service perimeters are not affected. The Operation.response field contains ReplaceServicePerimetersResponse.
⊞ ServicePerimeters AccessPoliciesReturns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does not support other resources.
⊞ SetIamPolicy AccessPoliciesSets the IAM policy for the specified Access Context Manager access policy. This method replaces the existing IAM policy on the access policy. The IAM policy controls the set of users who can perform specific operations on the Access Context Manager access policy.
⊞ TestIamPermissions AccessPoliciesReturns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does not support other resources.
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ GcpUserAccessBindings OrganizationsCreates a GcpUserAccessBinding. If the client specifies a name, the server ignores it. Fails if a resource already exists with the same group_key. Completion of this long-running operation does not necessarily signify that the new binding is deployed onto all affected users, which may take more time.
⊞ GcpUserAccessBindings OrganizationsDeletes a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the binding deletion is deployed onto all affected users, which may take more time.
⊞ GcpUserAccessBindings OrganizationsGets the GcpUserAccessBinding with the given name.
⊞ GcpUserAccessBindings OrganizationsLists all GcpUserAccessBindings for a Google Cloud organization.
⊞ GcpUserAccessBindings OrganizationsUpdates a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the changed binding is deployed onto all affected users, which may take more time.
Migration Center API v1
⊞ Locations ProjectsAggregates the requested fields based on provided function.
⊞ Locations ProjectsDeletes list of Assets.
⊞ Locations ProjectsUpdates the parameters of a list of assets.
⊞ Locations ProjectsDeletes an asset.
⊞ Locations ProjectsGets the details of an asset.
⊞ Locations ProjectsLists all the assets in a given project and location.
⊞ Locations ProjectsUpdates the parameters of an asset.
⊞ Locations ProjectsReports a set of frames.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsGets the details of regional settings.
⊞ Locations ProjectsAdds assets to a group.
⊞ Locations ProjectsCreates a new group in a given project and location.
⊞ Locations ProjectsDeletes a group.
⊞ Locations ProjectsGets the details of a group.
⊞ Locations ProjectsLists all groups in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a group.
⊞ Locations ProjectsRemoves assets from a group.
⊞ Locations ProjectsCreates an import job.
⊞ Locations ProjectsDeletes an import job.
⊞ Locations ProjectsGets the details of an import job.
⊞ Locations ProjectsCreates an import data file.
⊞ Locations ProjectsDelete an import data file.
⊞ Locations ProjectsGets an import data file.
⊞ Locations ProjectsList import data files.
⊞ Locations ProjectsLists all import jobs.
⊞ Locations ProjectsUpdates an import job.
⊞ Locations ProjectsRuns an import job.
⊞ Locations ProjectsValidates an import job.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new preference set in a given project and location.
⊞ Locations ProjectsDeletes a preference set.
⊞ Locations ProjectsGets the details of a preference set.
⊞ Locations ProjectsLists all the preference sets in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a preference set.
⊞ Locations ProjectsCreates a report configuration.
⊞ Locations ProjectsDeletes a ReportConfig.
⊞ Locations ProjectsGets details of a single ReportConfig.
⊞ Locations ProjectsLists ReportConfigs in a given project and location.
⊞ Locations ProjectsCreates a report.
⊞ Locations ProjectsDeletes a Report.
⊞ Locations ProjectsGets details of a single Report.
⊞ Locations ProjectsLists Reports in a given ReportConfig.
⊞ Locations ProjectsCreates a new source in a given project and location.
⊞ Locations ProjectsDeletes a source.
⊞ Locations ProjectsGets the details of an error frame.
⊞ Locations ProjectsLists all error frames in a given source and location.
⊞ Locations ProjectsGets the details of a source.
⊞ Locations ProjectsLists all the sources in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a source.
⊞ Locations ProjectsUpdates the regional-level project settings.
Backup for GKE API v1
⊞ Locations ProjectsCreates a Backup for the given BackupPlan.
⊞ Locations ProjectsDeletes an existing Backup.
⊞ Locations ProjectsRetrieve the details of a single Backup.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists the Backups for a given BackupPlan.
⊞ Locations ProjectsUpdate a Backup.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsRetrieve the details of a single VolumeBackup.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists the VolumeBackups for a given Backup.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new BackupPlan in a given location.
⊞ Locations ProjectsDeletes an existing BackupPlan.
⊞ Locations ProjectsRetrieve the details of a single BackupPlan.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists BackupPlans in a given location.
⊞ Locations ProjectsUpdate a BackupPlan.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new RestorePlan in a given location.
⊞ Locations ProjectsDeletes an existing RestorePlan.
⊞ Locations ProjectsRetrieve the details of a single RestorePlan.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists RestorePlans in a given location.
⊞ Locations ProjectsUpdate a RestorePlan.
⊞ Locations ProjectsCreates a new Restore for the given RestorePlan.
⊞ Locations ProjectsDeletes an existing Restore.
⊞ Locations ProjectsRetrieves the details of a single Restore.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists the Restores for a given RestorePlan.
⊞ Locations ProjectsUpdate a Restore.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsRetrieve the details of a single VolumeRestore.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists the VolumeRestores for a given Restore.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
Database Migration API v1
⊞ Locations ProjectsCreates a new connection profile in a given project and location.
⊞ Locations ProjectsDeletes a single Database Migration Service connection profile. A connection profile can only be deleted if it is not in use by any active migration jobs.
⊞ Locations ProjectsGets details of a single connection profile.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsRetrieves a list of all connection profiles in a given project and location.
⊞ Locations ProjectsUpdate the configuration of a single connection profile.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsApplies draft tree onto a specific destination database.
⊞ Locations ProjectsMarks all the data in the conversion workspace as committed.
⊞ Locations ProjectsCreates a draft tree schema for the destination database.
⊞ Locations ProjectsCreates a new conversion workspace in a given project and location.
⊞ Locations ProjectsDeletes a single conversion workspace.
⊞ Locations ProjectsRetrieves a list of committed revisions of a specific conversion workspace.
⊞ Locations ProjectsDescribes the database entities tree for a specific conversion workspace and a specific tree type. Database entities are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are simple data objects describing the structure of the client database.
⊞ Locations ProjectsGets details of a single conversion workspace.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists conversion workspaces in a given project and location.
⊞ Locations ProjectsCreates a new mapping rule for a given conversion workspace.
⊞ Locations ProjectsDeletes a single mapping rule.
⊞ Locations ProjectsGets the details of a mapping rule.
⊞ Locations ProjectsImports the mapping rules for a given conversion workspace. Supports various formats of external rules files.
⊞ Locations ProjectsLists the mapping rules for a specific conversion workspace.
⊞ Locations ProjectsUpdates the parameters of a single conversion workspace.
⊞ Locations ProjectsRolls back a conversion workspace to the last committed snapshot.
⊞ Locations ProjectsSearches/lists the background jobs for a specific conversion workspace. The background jobs are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are a way to expose the data plane jobs log.
⊞ Locations ProjectsImports a snapshot of the source database into the conversion workspace.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsFetches a set of static IP addresses that need to be allowlisted by the customer when using the static-IP connectivity method.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a new migration job in a given project and location.
⊞ Locations ProjectsDeletes a single migration job.
⊞ Locations ProjectsDemotes the destination database to become a read replica of the source. This is applicable for the following migrations: 1. MySQL to Cloud SQL (for MySQL) 2. PostgreSQL to Cloud SQL (for PostgreSQL) 3. PostgreSQL to AlloyDB.
⊞ Locations ProjectsGenerate a SSH configuration script to configure the reverse SSH connectivity.
⊞ Locations ProjectsGenerate a TCP Proxy configuration script to configure a cloud-hosted VM running a TCP Proxy.
⊞ Locations ProjectsGets details of a single migration job.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists migration jobs in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single migration job.
⊞ Locations ProjectsPromote a migration job, stopping replication to the destination and promoting the destination to be a standalone database.
⊞ Locations ProjectsRestart a stopped or failed migration job, resetting the destination instance to its original state and starting the migration process from scratch.
⊞ Locations ProjectsResume a migration job that is currently stopped and is resumable (was stopped during CDC phase).
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsStart an already created migration job.
⊞ Locations ProjectsStops a running migration job.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsVerify a migration job, making sure the destination can reach the source and that all configuration and prerequisites are met.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new private connection in a given project and location.
⊞ Locations ProjectsDeletes a single Database Migration Service private connection.
⊞ Locations ProjectsGets details of a single private connection.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsRetrieves a list of private connections in a given project and location.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
Service Management API v1
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List OperationsLists service operations that match the specified filter in the request.
⊞ Configs ServicesCreates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
⊞ Configs ServicesGets a service configuration (version) for a managed service.
⊞ Configs ServicesLists the history of the service configuration for a managed service, from the newest to the oldest.
⊞ Configs ServicesCreates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
⊞ Consumers ServicesGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Consumers ServicesSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Consumers ServicesReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Create ServicesCreates a new managed service. A managed service is immutable, and is subject to mandatory 30-day data retention. You cannot move a service or recreate it within 30 days after deletion. One producer project can own no more than 500 services. For security and reliability purposes, a production service should be hosted in a dedicated producer project. Operation
⊞ Delete ServicesDeletes a managed service. This method will change the service to the `Soft-Delete` state for 30 days. Within this period, service producers may call UndeleteService to restore the service. After 30 days, the service will be permanently deleted. Operation
⊞ GenerateConfigReport ServicesGenerates and returns a report (errors, warnings and changes from existing configurations) associated with GenerateConfigReportRequest.new_value If GenerateConfigReportRequest.old_value is specified, GenerateConfigReportRequest will contain a single ChangeReport based on the comparison between GenerateConfigReportRequest.new_value and GenerateConfigReportRequest.old_value. If GenerateConfigReportRequest.old_value is not specified, this method will compare GenerateConfigReportRequest.new_value with the last pushed service configuration.
⊞ Get ServicesGets a managed service. Authentication is required unless the service is public.
⊞ GetConfig ServicesGets a service configuration (version) for a managed service.
⊞ GetIamPolicy ServicesGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ List ServicesLists managed services. Returns all public services. For authenticated users, also returns all services the calling user has "servicemanagement.services.get" permission for.
⊞ Rollouts ServicesCreates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent) rollouts are kept for each service. The rest will be deleted eventually. Operation
⊞ Rollouts ServicesGets a service configuration rollout.
⊞ Rollouts ServicesLists the history of the service configuration rollouts for a managed service, from the newest to the oldest.
⊞ SetIamPolicy ServicesSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ TestIamPermissions ServicesReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Undelete ServicesRevives a previously deleted managed service. The method restores the service using the configuration at the time the service was deleted. The target service must exist and must have been deleted within the last 30 days. Operation
Apigee Registry API v1
⊞ Locations ProjectsCreates a specified artifact.
⊞ Locations ProjectsRemoves a specified artifact.
⊞ Locations ProjectsReturns a specified artifact.
⊞ Locations ProjectsReturns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns matching artifacts.
⊞ Locations ProjectsUsed to replace a specified artifact.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a specified API.
⊞ Locations ProjectsRemoves a specified API and all of the resources that it owns.
⊞ Locations ProjectsCreates a specified artifact.
⊞ Locations ProjectsRemoves a specified artifact.
⊞ Locations ProjectsReturns a specified artifact.
⊞ Locations ProjectsReturns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).
⊞ Locations ProjectsReturns matching artifacts.
⊞ Locations ProjectsUsed to replace a specified artifact.
⊞ Locations ProjectsCreates a specified deployment.
⊞ Locations ProjectsRemoves a specified deployment, all revisions, and all child resources (e.g., artifacts).
⊞ Locations ProjectsDeletes a revision of a deployment.
⊞ Locations ProjectsReturns a specified deployment.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns matching deployments.
⊞ Locations ProjectsLists all revisions of a deployment. Revisions are returned in descending order of revision creation time.
⊞ Locations ProjectsUsed to modify a specified deployment.
⊞ Locations ProjectsSets the current revision to a specified prior revision. Note that this creates a new revision with a new revision ID.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsAdds a tag to a specified revision of a deployment.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsReturns a specified API.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns matching APIs.
⊞ Locations ProjectsUsed to modify a specified API.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a specified artifact.
⊞ Locations ProjectsRemoves a specified artifact.
⊞ Locations ProjectsReturns a specified artifact.
⊞ Locations ProjectsReturns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns matching artifacts.
⊞ Locations ProjectsUsed to replace a specified artifact.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a specified version.
⊞ Locations ProjectsRemoves a specified version and all of the resources that it owns.
⊞ Locations ProjectsReturns a specified version.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns matching versions.
⊞ Locations ProjectsUsed to modify a specified version.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsCreates a specified artifact.
⊞ Locations ProjectsRemoves a specified artifact.
⊞ Locations ProjectsReturns a specified artifact.
⊞ Locations ProjectsReturns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns matching artifacts.
⊞ Locations ProjectsUsed to replace a specified artifact.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a specified spec.
⊞ Locations ProjectsRemoves a specified spec, all revisions, and all child resources (e.g., artifacts).
⊞ Locations ProjectsDeletes a revision of a spec.
⊞ Locations ProjectsReturns a specified spec.
⊞ Locations ProjectsReturns the contents of a specified spec. If specs are stored with GZip compression, the default behavior is to return the spec uncompressed (the mime_type response field indicates the exact format returned).
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns matching specs.
⊞ Locations ProjectsLists all revisions of a spec. Revisions are returned in descending order of revision creation time.
⊞ Locations ProjectsUsed to modify a specified spec.
⊞ Locations ProjectsSets the current revision to a specified prior revision. Note that this creates a new revision with a new revision ID.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsAdds a tag to a specified revision of a spec.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a specified artifact.
⊞ Locations ProjectsRemoves a specified artifact.
⊞ Locations ProjectsReturns a specified artifact.
⊞ Locations ProjectsReturns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns matching artifacts.
⊞ Locations ProjectsUsed to replace a specified artifact.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsProvisions instance resources for the Registry.
⊞ Locations ProjectsDeletes the Registry instance.
⊞ Locations ProjectsGets details of a single Instance.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
Serverless VPC Access API v1
⊞ Locations ProjectsCreates a Serverless VPC Access connector, returns an operation.
⊞ Locations ProjectsDeletes a Serverless VPC Access connector. Returns NOT_FOUND if the resource does not exist.
⊞ Locations ProjectsGets a Serverless VPC Access connector. Returns NOT_FOUND if the resource does not exist.
⊞ Locations ProjectsLists Serverless VPC Access connectors.
⊞ Locations ProjectsUpdates a Serverless VPC Access connector, returns an operation.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Cloud Text-to-Speech API v1
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsSynthesizes long form text asynchronously.
⊞ Synthesize TextSynthesizes speech synchronously: receive results after all text input has been processed.
⊞ List VoicesReturns a list of Voice supported for synthesis.
Dialogflow API v3
⊞ Locations ProjectsRetrieves the specified Changelog.
⊞ Locations ProjectsReturns the list of Changelogs.
⊞ Locations ProjectsCreates an agent in the specified location. Note: You should always train flows prior to sending them queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsDeletes the specified agent.
⊞ Locations ProjectsCreates an entity type in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsDeletes the specified entity type. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsRetrieves the specified entity type.
⊞ Locations ProjectsReturns the list of all entity types in the specified agent.
⊞ Locations ProjectsUpdates the specified entity type. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsFetches a list of continuous test results for a given environment.
⊞ Locations ProjectsCreates an Environment in the specified Agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: Environment
⊞ Locations ProjectsDeletes the specified Environment.
⊞ Locations ProjectsDeploys a flow to the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployFlowMetadata - `response`: DeployFlowResponse
⊞ Locations ProjectsRetrieves the specified Deployment.
⊞ Locations ProjectsReturns the list of all deployments in the specified Environment.
⊞ Locations ProjectsCreates an Experiment in the specified Environment.
⊞ Locations ProjectsDeletes the specified Experiment.
⊞ Locations ProjectsRetrieves the specified Experiment.
⊞ Locations ProjectsReturns the list of all experiments in the specified Environment.
⊞ Locations ProjectsUpdates the specified Experiment.
⊞ Locations ProjectsStarts the specified Experiment. This rpc only changes the state of experiment from PENDING to RUNNING.
⊞ Locations ProjectsStops the specified Experiment. This rpc only changes the state of experiment from RUNNING to DONE.
⊞ Locations ProjectsRetrieves the specified Environment.
⊞ Locations ProjectsReturns the list of all environments in the specified Agent.
⊞ Locations ProjectsLooks up the history of the specified Environment.
⊞ Locations ProjectsUpdates the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: Environment
⊞ Locations ProjectsKicks off a continuous test under the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunContinuousTestMetadata - `response`: RunContinuousTestResponse
⊞ Locations ProjectsProcesses a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause session entity types to be updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/cx/docs/concept/version).
⊞ Locations ProjectsCreates a session entity type.
⊞ Locations ProjectsDeletes the specified session entity type.
⊞ Locations ProjectsRetrieves the specified session entity type.
⊞ Locations ProjectsReturns the list of all session entity types in the specified session.
⊞ Locations ProjectsUpdates the specified session entity type.
⊞ Locations ProjectsFulfills a matched intent returned by MatchIntent. Must be called after MatchIntent, with input from MatchIntentResponse. Otherwise, the behavior is undefined.
⊞ Locations ProjectsReturns preliminary intent match results, doesn't change the session status.
⊞ Locations ProjectsExports the specified agent to a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportAgentResponse
⊞ Locations ProjectsCreates a flow in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsDeletes a specified flow.
⊞ Locations ProjectsExports the specified flow to a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportFlowResponse Note that resources (e.g. intents, entities, webhooks) that the flow references will also be exported.
⊞ Locations ProjectsRetrieves the specified flow.
⊞ Locations ProjectsGets the latest flow validation result. Flow validation is performed when ValidateFlow is called.
⊞ Locations ProjectsImports the specified flow to the specified agent from a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ImportFlowResponse Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsReturns the list of all flows in the specified agent.
⊞ Locations ProjectsCreates a page in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsDeletes the specified page. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsRetrieves the specified page.
⊞ Locations ProjectsReturns the list of all pages in the specified flow.
⊞ Locations ProjectsUpdates the specified page. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsUpdates the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsTrains the specified flow. Note that only the flow in 'draft' environment is trained. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsCreates an TransitionRouteGroup in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsDeletes the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsRetrieves the specified TransitionRouteGroup.
⊞ Locations ProjectsReturns the list of all transition route groups in the specified flow.
⊞ Locations ProjectsUpdates the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsValidates the specified flow and creates or updates validation results. Please call this API after the training is completed to get the complete validation results.
⊞ Locations ProjectsCompares the specified base version with target version.
⊞ Locations ProjectsCreates a Version in the specified Flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateVersionOperationMetadata - `response`: Version
⊞ Locations ProjectsDeletes the specified Version.
⊞ Locations ProjectsRetrieves the specified Version.
⊞ Locations ProjectsReturns the list of all versions in the specified Flow.
⊞ Locations ProjectsLoads resources in the specified version to the draft flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
⊞ Locations ProjectsUpdates the specified Version.
⊞ Locations ProjectsRetrieves the specified agent.
⊞ Locations ProjectsGets the generative settings for the agent.
⊞ Locations ProjectsGets the latest agent validation result. Agent validation is performed when ValidateAgent is called.
⊞ Locations ProjectsCreates an intent in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsDeletes the specified intent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsExports the selected intents. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ExportIntentsMetadata - `response`: ExportIntentsResponse
⊞ Locations ProjectsRetrieves the specified intent.
⊞ Locations ProjectsImports the specified intents into the agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportIntentsMetadata - `response`: ImportIntentsResponse
⊞ Locations ProjectsReturns the list of all intents in the specified agent.
⊞ Locations ProjectsUpdates the specified intent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsReturns the list of all agents in the specified location.
⊞ Locations ProjectsUpdates the specified agent. Note: You should always train flows prior to sending them queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsRestores the specified agent from a binary file. Replaces the current agent with a new one. Note that all existing resources in agent (e.g. intents, entity types, flows) will be removed. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train flows prior to sending them queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsProcesses a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause session entity types to be updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/cx/docs/concept/version).
⊞ Locations ProjectsCreates a session entity type.
⊞ Locations ProjectsDeletes the specified session entity type.
⊞ Locations ProjectsRetrieves the specified session entity type.
⊞ Locations ProjectsReturns the list of all session entity types in the specified session.
⊞ Locations ProjectsUpdates the specified session entity type.
⊞ Locations ProjectsFulfills a matched intent returned by MatchIntent. Must be called after MatchIntent, with input from MatchIntentResponse. Otherwise, the behavior is undefined.
⊞ Locations ProjectsReturns preliminary intent match results, doesn't change the session status.
⊞ Locations ProjectsUpdates the feedback received from the user for a single turn of the bot response.
⊞ Locations ProjectsBatch deletes test cases.
⊞ Locations ProjectsKicks off a batch run of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: BatchRunTestCasesMetadata - `response`: BatchRunTestCasesResponse
⊞ Locations ProjectsCalculates the test coverage for an agent.
⊞ Locations ProjectsCreates a test case for the given agent.
⊞ Locations ProjectsExports the test cases under the agent to a Cloud Storage bucket or a local file. Filter can be applied to export a subset of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ExportTestCasesMetadata - `response`: ExportTestCasesResponse
⊞ Locations ProjectsGets a test case.
⊞ Locations ProjectsImports the test cases from a Cloud Storage bucket or a local file. It always creates new test cases and won't overwrite any existing ones. The provided ID in the imported test case is neglected. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportTestCasesMetadata - `response`: ImportTestCasesResponse
⊞ Locations ProjectsFetches a list of test cases for a given agent.
⊞ Locations ProjectsUpdates the specified test case.
⊞ Locations ProjectsGets a test case result.
⊞ Locations ProjectsFetches the list of run results for the given test case. A maximum of 100 results are kept for each test case.
⊞ Locations ProjectsKicks off a test case run. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunTestCaseMetadata - `response`: RunTestCaseResponse
⊞ Locations ProjectsCreates an TransitionRouteGroup in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsDeletes the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsRetrieves the specified TransitionRouteGroup.
⊞ Locations ProjectsReturns the list of all transition route groups in the specified flow.
⊞ Locations ProjectsUpdates the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
⊞ Locations ProjectsUpdates the generative settings for the agent.
⊞ Locations ProjectsValidates the specified agent and creates or updates validation results. The agent in draft version is validated. Please call this API after the training is completed to get the complete validation results.
⊞ Locations ProjectsCreates a webhook in the specified agent.
⊞ Locations ProjectsDeletes the specified webhook.
⊞ Locations ProjectsRetrieves the specified webhook.
⊞ Locations ProjectsReturns the list of all webhooks in the specified agent.
⊞ Locations ProjectsUpdates the specified webhook.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreate security settings in the specified location.
⊞ Locations ProjectsDeletes the specified SecuritySettings.
⊞ Locations ProjectsRetrieves the specified SecuritySettings. The returned settings may be stale by up to 1 minute.
⊞ Locations ProjectsReturns the list of all security settings in the specified location.
⊞ Locations ProjectsUpdates the specified SecuritySettings.
⊞ Operations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Cloud Trace API v2
⊞ Traces ProjectsBatch writes new spans to new or existing traces. You cannot update existing spans.
⊞ Traces ProjectsCreates a new span.
Analytics Hub API v1
⊞ Locations OrganizationsLists all data exchanges from projects in a given organization and location.
⊞ Locations ProjectsCreates a new data exchange.
⊞ Locations ProjectsDeletes an existing data exchange.
⊞ Locations ProjectsGets the details of a data exchange.
⊞ Locations ProjectsGets the IAM policy.
⊞ Locations ProjectsLists all data exchanges in a given project and location.
⊞ Locations ProjectsLists all subscriptions on a given Data Exchange or Listing.
⊞ Locations ProjectsCreates a new listing.
⊞ Locations ProjectsDeletes a listing.
⊞ Locations ProjectsGets the details of a listing.
⊞ Locations ProjectsGets the IAM policy.
⊞ Locations ProjectsLists all listings in a given project and location.
⊞ Locations ProjectsLists all subscriptions on a given Data Exchange or Listing.
⊞ Locations ProjectsUpdates an existing listing.
⊞ Locations ProjectsSets the IAM policy.
⊞ Locations ProjectsSubscribes to a listing. Currently, with Analytics Hub, you can create listings that reference only BigQuery datasets. Upon subscription to a listing for a BigQuery dataset, Analytics Hub creates a linked dataset in the subscriber's project.
⊞ Locations ProjectsReturns the permissions that a caller has.
⊞ Locations ProjectsUpdates an existing data exchange.
⊞ Locations ProjectsSets the IAM policy.
⊞ Locations ProjectsCreates a Subscription to a Data Exchange. This is a long-running operation as it will create one or more linked datasets.
⊞ Locations ProjectsReturns the permissions that a caller has.
⊞ Locations ProjectsDeletes a subscription.
⊞ Locations ProjectsGets the details of a Subscription.
⊞ Locations ProjectsLists all subscriptions in a given project and location.
⊞ Locations ProjectsRefreshes a Subscription to a Data Exchange. A Data Exchange can become stale when a publisher adds or removes data. This is a long-running operation as it may create many linked datasets.
⊞ Locations ProjectsRevokes a given subscription.
Cloud Runtime Configuration API v1
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
IAM Service Account Credentials API v1
⊞ ServiceAccounts ProjectsGenerates an OAuth 2.0 access token for a service account.
⊞ ServiceAccounts ProjectsGenerates an OpenID Connect ID token for a service account.
⊞ ServiceAccounts ProjectsSigns a blob using a service account's system-managed private key.
⊞ ServiceAccounts ProjectsSigns a JWT using a service account's system-managed private key.
Dataflow API v1b3
⊞ DeleteSnapshots ProjectsDeletes a snapshot.
⊞ Jobs ProjectsList the jobs of a project across all regions. **Note:** This method doesn't support filtering the list of jobs by name.
⊞ Jobs ProjectsCreates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API.
⊞ Jobs ProjectsGet encoded debug configuration for component. Not cacheable.
⊞ Jobs ProjectsSend encoded debug capture data for component.
⊞ Jobs ProjectsGets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.
⊞ Jobs ProjectsRequest the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
⊞ Jobs ProjectsList the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, because you can only get the list of jobs that are running in `us-central1`. `projects.locations.jobs.list` and `projects.jobs.list` support filtering the list of jobs by name. Filtering by name isn't supported by `projects.jobs.aggregated`.
⊞ Jobs ProjectsRequest the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
⊞ Jobs ProjectsSnapshot the state of a streaming job.
⊞ Jobs ProjectsUpdates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.
⊞ Jobs ProjectsLeases a dataflow WorkItem to run.
⊞ Jobs ProjectsReports the status of dataflow WorkItems leased by a worker.
⊞ Locations ProjectsLaunch a job with a FlexTemplate.
⊞ Locations ProjectsCreates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API.
⊞ Locations ProjectsGet encoded debug configuration for component. Not cacheable.
⊞ Locations ProjectsSend encoded debug capture data for component.
⊞ Locations ProjectsGets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.
⊞ Locations ProjectsRequest detailed information about the execution status of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
⊞ Locations ProjectsRequest the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
⊞ Locations ProjectsList the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, because you can only get the list of jobs that are running in `us-central1`. `projects.locations.jobs.list` and `projects.jobs.list` support filtering the list of jobs by name. Filtering by name isn't supported by `projects.jobs.aggregated`.
⊞ Locations ProjectsRequest the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
⊞ Locations ProjectsSnapshot the state of a streaming job.
⊞ Locations ProjectsLists snapshots.
⊞ Locations ProjectsRequest detailed information about the execution status of a stage of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
⊞ Locations ProjectsUpdates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.
⊞ Locations ProjectsLeases a dataflow WorkItem to run.
⊞ Locations ProjectsReports the status of dataflow WorkItems leased by a worker.
⊞ Locations ProjectsDeletes a snapshot.
⊞ Locations ProjectsGets information about a snapshot.
⊞ Locations ProjectsLists snapshots.
⊞ Locations ProjectsCreates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
⊞ Locations ProjectsGet the template associated with a template.
⊞ Locations ProjectsLaunch a template.
⊞ Locations ProjectsSend a worker_message to the service.
⊞ Snapshots ProjectsGets information about a snapshot.
⊞ Snapshots ProjectsLists snapshots.
⊞ Templates ProjectsCreates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
⊞ Templates ProjectsGet the template associated with a template.
⊞ Templates ProjectsLaunch a template.
⊞ WorkerMessages ProjectsSend a worker_message to the service.
Identity and Access Management (IAM) API v2
⊞ CreatePolicy PoliciesCreates a policy.
⊞ Delete PoliciesDeletes a policy. This action is permanent.
⊞ Get PoliciesGets a policy.
⊞ ListPolicies PoliciesRetrieves the policies of the specified kind that are attached to a resource. The response lists only policy metadata. In particular, policy rules are omitted.
⊞ Operations PoliciesGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Update PoliciesUpdates the specified policy. You can update only the rules and the display name for the policy. To update a policy, you should use a read-modify-write loop: 1. Use GetPolicy to read the current version of the policy. 2. Modify the policy as needed. 3. Use `UpdatePolicy` to write the updated policy. This pattern helps prevent conflicts between concurrent updates.
Advisory Notifications API v1
⊞ Locations OrganizationsGet notification settings.
⊞ Locations OrganizationsGets a notification.
⊞ Locations OrganizationsLists notifications under a given parent.
⊞ Locations OrganizationsUpdate notification settings.
Cloud Tasks API v2
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsGets the CMEK config. Gets the Customer Managed Encryption Key configured with the Cloud Tasks lcoation. By default there is no kms_key configured.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a queue. Queues created with this method allow tasks to live for a maximum of 31 days. After a task is 31 days old, the task will be deleted regardless of whether it was dispatched or not. WARNING: Using this method may have unintended side effects if you are using an App Engine `queue.yaml` or `queue.xml` file to manage your queues. Read [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using this method.
⊞ Locations ProjectsDeletes a queue. This command will delete the queue even if it has tasks in it. Note: If you delete a queue, you may be prevented from creating a new queue with the same name as the deleted queue for a tombstone window of up to 3 days. During this window, the CreateQueue operation may appear to recreate the queue, but this can be misleading. If you attempt to create a queue with the same name as one that is in the tombstone window, run GetQueue to confirm that the queue creation was successful. If GetQueue returns 200 response code, your queue was successfully created with the name of the previously deleted queue. Otherwise, your queue did not successfully recreate. WARNING: Using this method may have unintended side effects if you are using an App Engine `queue.yaml` or `queue.xml` file to manage your queues. Read [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using this method.
⊞ Locations ProjectsGets a queue.
⊞ Locations ProjectsGets the access control policy for a Queue. Returns an empty policy if the resource exists and does not have a policy set. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission on the specified resource parent: * `cloudtasks.queues.getIamPolicy`
⊞ Locations ProjectsLists queues. Queues are returned in lexicographical order.
⊞ Locations ProjectsUpdates a queue. This method creates the queue if it does not exist and updates the queue if it does exist. Queues created with this method allow tasks to live for a maximum of 31 days. After a task is 31 days old, the task will be deleted regardless of whether it was dispatched or not. WARNING: Using this method may have unintended side effects if you are using an App Engine `queue.yaml` or `queue.xml` file to manage your queues. Read [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using this method.
⊞ Locations ProjectsPauses the queue. If a queue is paused then the system will stop dispatching tasks until the queue is resumed via ResumeQueue. Tasks can still be added when the queue is paused. A queue is paused if its state is PAUSED.
⊞ Locations ProjectsPurges a queue by deleting all of its tasks. All tasks created before this method is called are permanently deleted. Purge operations can take up to one minute to take effect. Tasks might be dispatched before the purge takes effect. A purge is irreversible.
⊞ Locations ProjectsResume a queue. This method resumes a queue after it has been PAUSED or DISABLED. The state of a queue is stored in the queue's state; after calling this method it will be set to RUNNING. WARNING: Resuming many high-QPS queues at the same time can lead to target overloading. If you are resuming high-QPS queues, follow the 500/50/5 pattern described in [Managing Cloud Tasks Scaling Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
⊞ Locations ProjectsSets the access control policy for a Queue. Replaces any existing policy. Note: The Cloud Console does not check queue-level IAM permissions yet. Project-level permissions are required to use the Cloud Console. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission on the specified resource parent: * `cloudtasks.queues.setIamPolicy`
⊞ Locations ProjectsCreates and buffers a new task without the need to explicitly define a Task message. The queue must have HTTP target. To create the task with a custom ID, use the following format and set TASK_ID to your desired ID: projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID:buffer To create the task with an automatically generated ID, use the following format: projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks:buffer.
⊞ Locations ProjectsCreates a task and adds it to a queue. Tasks cannot be updated after creation; there is no UpdateTask command. * The maximum task size is 100KB.
⊞ Locations ProjectsDeletes a task. A task can be deleted if it is scheduled or dispatched. A task cannot be deleted if it has executed successfully or permanently failed.
⊞ Locations ProjectsGets a task.
⊞ Locations ProjectsLists the tasks in a queue. By default, only the BASIC view is retrieved due to performance considerations; response_view controls the subset of information which is returned. The tasks may be returned in any order. The ordering may change at any time.
⊞ Locations ProjectsForces a task to run now. When this method is called, Cloud Tasks will dispatch the task, even if the task is already running, the queue has reached its RateLimits or is PAUSED. This command is meant to be used for manual debugging. For example, RunTask can be used to retry a failed task after a fix has been made or to manually force a task to be dispatched now. The dispatched task is returned. That is, the task that is returned contains the status after the task is dispatched but before the task is received by its target. If Cloud Tasks receives a successful response from the task's target, then the task will be deleted; otherwise the task's schedule_time will be reset to the time that RunTask was called plus the retry delay specified in the queue's RetryConfig. RunTask returns NOT_FOUND when it is called on a task that has already succeeded or permanently failed.
⊞ Locations ProjectsReturns permissions that a caller has on a Queue. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates or Updates a CMEK config. Updates the Customer Managed Encryption Key assotiated with the Cloud Tasks location (Creates if the key does not already exist). All new tasks created in the location will be encrypted at-rest with the KMS-key provided in the config.
Cloud Resource Manager API v3
⊞ List EffectiveTagsReturn a list of effective tags for the given Google Cloud resource, as specified in `parent`.
⊞ Create FoldersCreates a folder in the resource hierarchy. Returns an `Operation` which can be used to track the progress of the folder creation workflow. Upon success, the `Operation.response` field will be populated with the created Folder. In order to succeed, the addition of this new folder must not violate the folder naming, height, or fanout constraints. + The folder's `display_name` must be distinct from all other folders that share its parent. + The addition of the folder must not cause the active folder hierarchy to exceed a height of 10. Note, the full active + deleted folder hierarchy is allowed to reach a height of 20; this provides additional headroom when moving folders that contain deleted folders. + The addition of the folder must not cause the total number of folders under its parent to exceed 300. If the operation fails due to a folder constraint violation, some errors may be returned by the `CreateFolder` request, with status code `FAILED_PRECONDITION` and an error description. Other folder constraint violations will be communicated in the `Operation`, with the specific `PreconditionFailure` returned in the details list in the `Operation.error` field. The caller must have `resourcemanager.folders.create` permission on the identified parent.
⊞ Delete FoldersRequests deletion of a folder. The folder is moved into the DELETE_REQUESTED state immediately, and is deleted approximately 30 days later. This method may only be called on an empty folder, where a folder is empty if it doesn't contain any folders or projects in the ACTIVE state. If called on a folder in DELETE_REQUESTED state the operation will result in a no-op success. The caller must have `resourcemanager.folders.delete` permission on the identified folder.
⊞ Get FoldersRetrieves a folder identified by the supplied resource name. Valid folder resource names have the format `folders/{folder_id}` (for example, `folders/1234`). The caller must have `resourcemanager.folders.get` permission on the identified folder.
⊞ GetIamPolicy FoldersGets the access control policy for a folder. The returned policy may be empty if no such policy or resource exists. The `resource` field should be the folder's resource name, for example: "folders/1234". The caller must have `resourcemanager.folders.getIamPolicy` permission on the identified folder.
⊞ List FoldersLists the folders that are direct descendants of supplied parent resource. `list()` provides a strongly consistent view of the folders underneath the specified parent resource. `list()` returns folders sorted based upon the (ascending) lexical ordering of their display_name. The caller must have `resourcemanager.folders.list` permission on the identified parent.
⊞ Move FoldersMoves a folder under a new resource parent. Returns an `Operation` which can be used to track the progress of the folder move workflow. Upon success, the `Operation.response` field will be populated with the moved folder. Upon failure, a `FolderOperationError` categorizing the failure cause will be returned - if the failure occurs synchronously then the `FolderOperationError` will be returned in the `Status.details` field. If it occurs asynchronously, then the FolderOperation will be returned in the `Operation.error` field. In addition, the `Operation.metadata` field will be populated with a `FolderOperation` message as an aid to stateless clients. Folder moves will be rejected if they violate either the naming, height, or fanout constraints described in the CreateFolder documentation. The caller must have `resourcemanager.folders.move` permission on the folder's current and proposed new parent.
⊞ Patch FoldersUpdates a folder, changing its `display_name`. Changes to the folder `display_name` will be rejected if they violate either the `display_name` formatting rules or the naming constraints described in the CreateFolder documentation. The folder's `display_name` must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be between 3 and 30 characters. This is captured by the regular expression: `\p{L}\p{N}{1,28}[\p{L}\p{N}]`. The caller must have `resourcemanager.folders.update` permission on the identified folder. If the update fails due to the unique name constraint then a `PreconditionFailure` explaining this violation will be returned in the Status.details field.
⊞ Search FoldersSearch for folders that match specific filter criteria. `search()` provides an eventually consistent view of the folders a user has access to which meet the specified filter criteria. This will only return folders on which the caller has the permission `resourcemanager.folders.get`.
⊞ SetIamPolicy FoldersSets the access control policy on a folder, replacing any existing policy. The `resource` field should be the folder's resource name, for example: "folders/1234". The caller must have `resourcemanager.folders.setIamPolicy` permission on the identified folder.
⊞ TestIamPermissions FoldersReturns permissions that a caller has on the specified folder. The `resource` field should be the folder's resource name, for example: "folders/1234". There are no permissions required for making this API call.
⊞ Undelete FoldersCancels the deletion request for a folder. This method may be called on a folder in any state. If the folder is in the ACTIVE state the result will be a no-op success. In order to succeed, the folder's parent must be in the ACTIVE state. In addition, reintroducing the folder into the tree must not violate folder naming, height, and fanout constraints described in the CreateFolder documentation. The caller must have `resourcemanager.folders.undelete` permission on the identified folder.
⊞ Create LiensCreate a Lien which applies to the resource denoted by the `parent` field. Callers of this method will require permission on the `parent` resource. For example, applying to `projects/1234` requires permission `resourcemanager.projects.updateLiens`. NOTE: Some resources may limit the number of Liens which may be applied.
⊞ Delete LiensDelete a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.updateLiens`.
⊞ Get LiensRetrieve a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`
⊞ List LiensList all Liens applied to the `parent` resource. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Get OrganizationsFetches an organization resource identified by the specified resource name.
⊞ GetIamPolicy OrganizationsGets the access control policy for an organization resource. The policy may be empty if no such policy or resource exists. The `resource` field should be the organization's resource name, for example: "organizations/123". Authorization requires the IAM permission `resourcemanager.organizations.getIamPolicy` on the specified organization.
⊞ Search OrganizationsSearches organization resources that are visible to the user and satisfy the specified filter. This method returns organizations in an unspecified order. New organizations do not necessarily appear at the end of the results, and may take a small amount of time to appear. Search will only return organizations on which the user has the permission `resourcemanager.organizations.get` or has super admin privileges.
⊞ SetIamPolicy OrganizationsSets the access control policy on an organization resource. Replaces any existing policy. The `resource` field should be the organization's resource name, for example: "organizations/123". Authorization requires the IAM permission `resourcemanager.organizations.setIamPolicy` on the specified organization.
⊞ TestIamPermissions OrganizationsReturns the permissions that a caller has on the specified organization. The `resource` field should be the organization's resource name, for example: "organizations/123". There are no permissions required for making this API call.
⊞ Create ProjectsRequest that a new project be created. The result is an `Operation` which can be used to track the creation process. This process usually takes a few seconds, but can sometimes take much longer. The tracking `Operation` is automatically deleted after a few hours, so there is no need to call `DeleteOperation`.
⊞ Delete ProjectsMarks the project identified by the specified `name` (for example, `projects/415104041262`) for deletion. This method will only affect the project if it has a lifecycle state of ACTIVE. This method changes the Project's lifecycle state from ACTIVE to DELETE_REQUESTED. The deletion starts at an unspecified time, at which point the Project is no longer accessible. Until the deletion completes, you can check the lifecycle state checked by retrieving the project with GetProject, and the project remains visible to ListProjects. However, you cannot update the project. After the deletion completes, the project is not retrievable by the GetProject, ListProjects, and SearchProjects methods. This method behaves idempotently, such that deleting a `DELETE_REQUESTED` project will not cause an error, but also won't do anything. The caller must have `resourcemanager.projects.delete` permissions for this project.
⊞ Get ProjectsRetrieves the project identified by the specified `name` (for example, `projects/415104041262`). The caller must have `resourcemanager.projects.get` permission for this project.
⊞ GetIamPolicy ProjectsReturns the IAM access control policy for the specified project, in the format `projects/{ProjectIdOrNumber}` e.g. projects/123. Permission is denied if the policy or the resource do not exist.
⊞ List ProjectsLists projects that are direct children of the specified folder or organization resource. `list()` provides a strongly consistent view of the projects underneath the specified parent resource. `list()` returns projects sorted based upon the (ascending) lexical ordering of their `display_name`. The caller must have `resourcemanager.projects.list` permission on the identified parent.
⊞ Move ProjectsMove a project to another place in your resource hierarchy, under a new resource parent. Returns an operation which can be used to track the process of the project move workflow. Upon success, the `Operation.response` field will be populated with the moved project. The caller must have `resourcemanager.projects.move` permission on the project, on the project's current and proposed new parent. If project has no current parent, or it currently does not have an associated organization resource, you will also need the `resourcemanager.projects.setIamPolicy` permission in the project.
⊞ Patch ProjectsUpdates the `display_name` and labels of the project identified by the specified `name` (for example, `projects/415104041262`). Deleting all labels requires an update mask for labels field. The caller must have `resourcemanager.projects.update` permission for this project.
⊞ Search ProjectsSearch for projects that the caller has the `resourcemanager.projects.get` permission on, and also satisfy the specified query. This method returns projects in an unspecified order. This method is eventually consistent with project mutations; this means that a newly created project may not appear in the results or recent updates to an existing project may not be reflected in the results. To retrieve the latest state of a project, use the GetProject method.
⊞ SetIamPolicy ProjectsSets the IAM access control policy for the specified project, in the format `projects/{ProjectIdOrNumber}` e.g. projects/123. CAUTION: This method will replace the existing policy, and cannot be used to append additional IAM settings. Note: Removing service accounts from policies or changing their roles can render services completely inoperable. It is important to understand how the service account is being used before removing or updating its roles. The following constraints apply when using `setIamPolicy()`: + Project does not support `allUsers` and `allAuthenticatedUsers` as `members` in a `Binding` of a `Policy`. + The owner role can be granted to a `user`, `serviceAccount`, or a group that is part of an organization. For example, group@myownpersonaldomain.com could be added as an owner to a project in the myownpersonaldomain.com organization, but not the examplepetstore.com organization. + Service accounts can be made owners of a project directly without any restrictions. However, to be added as an owner, a user must be invited using the Cloud Platform console and must accept the invitation. + A user cannot be granted the owner role using `setIamPolicy()`. The user must be granted the owner role using the Cloud Platform Console and must explicitly accept the invitation. + Invitations to grant the owner role cannot be sent using `setIamPolicy()`; they must be sent only using the Cloud Platform Console. + If the project is not part of an organization, there must be at least one owner who has accepted the Terms of Service (ToS) agreement in the policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner from the policy will fail. This restriction also applies to legacy projects that no longer have owners who have accepted the ToS. Edits to IAM policies will be rejected until the lack of a ToS-accepting owner is rectified. If the project is part of an organization, you can remove all owners, potentially making the organization inaccessible.
⊞ TestIamPermissions ProjectsReturns permissions that a caller has on the specified project, in the format `projects/{ProjectIdOrNumber}` e.g. projects/123..
⊞ Undelete ProjectsRestores the project identified by the specified `name` (for example, `projects/415104041262`). You can only use this method for a project that has a lifecycle state of DELETE_REQUESTED. After deletion starts, the project cannot be restored. The caller must have `resourcemanager.projects.undelete` permission for this project.
⊞ Create TagBindingsCreates a TagBinding between a TagValue and a Google Cloud resource.
⊞ Delete TagBindingsDeletes a TagBinding.
⊞ List TagBindingsLists the TagBindings for the given Google Cloud resource, as specified with `parent`. NOTE: The `parent` field is expected to be a full resource name: https://cloud.google.com/apis/design/resource_names#full_resource_name
⊞ Create TagKeysCreates a new TagKey. If another request with the same parameters is sent while the original request is in process, the second request will receive an error. A maximum of 1000 TagKeys can exist under a parent at any given time.
⊞ Delete TagKeysDeletes a TagKey. The TagKey cannot be deleted if it has any child TagValues.
⊞ Get TagKeysRetrieves a TagKey. This method will return `PERMISSION_DENIED` if the key does not exist or the user does not have permission to view it.
⊞ GetIamPolicy TagKeysGets the access control policy for a TagKey. The returned policy may be empty if no such policy or resource exists. The `resource` field should be the TagKey's resource name. For example, "tagKeys/1234". The caller must have `cloudresourcemanager.googleapis.com/tagKeys.getIamPolicy` permission on the specified TagKey.
⊞ GetNamespaced TagKeysRetrieves a TagKey by its namespaced name. This method will return `PERMISSION_DENIED` if the key does not exist or the user does not have permission to view it.
⊞ List TagKeysLists all TagKeys for a parent resource.
⊞ Patch TagKeysUpdates the attributes of the TagKey resource.
⊞ SetIamPolicy TagKeysSets the access control policy on a TagKey, replacing any existing policy. The `resource` field should be the TagKey's resource name. For example, "tagKeys/1234". The caller must have `resourcemanager.tagKeys.setIamPolicy` permission on the identified tagValue.
⊞ TestIamPermissions TagKeysReturns permissions that a caller has on the specified TagKey. The `resource` field should be the TagKey's resource name. For example, "tagKeys/1234". There are no permissions required for making this API call.
⊞ Create TagValuesCreates a TagValue as a child of the specified TagKey. If a another request with the same parameters is sent while the original request is in process the second request will receive an error. A maximum of 1000 TagValues can exist under a TagKey at any given time.
⊞ Delete TagValuesDeletes a TagValue. The TagValue cannot have any bindings when it is deleted.
⊞ Get TagValuesRetrieves a TagValue. This method will return `PERMISSION_DENIED` if the value does not exist or the user does not have permission to view it.
⊞ GetIamPolicy TagValuesGets the access control policy for a TagValue. The returned policy may be empty if no such policy or resource exists. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. The caller must have the `cloudresourcemanager.googleapis.com/tagValues.getIamPolicy` permission on the identified TagValue to get the access control policy.
⊞ GetNamespaced TagValuesRetrieves a TagValue by its namespaced name. This method will return `PERMISSION_DENIED` if the value does not exist or the user does not have permission to view it.
⊞ List TagValuesLists all TagValues for a specific TagKey.
⊞ Patch TagValuesUpdates the attributes of the TagValue resource.
⊞ SetIamPolicy TagValuesSets the access control policy on a TagValue, replacing any existing policy. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. The caller must have `resourcemanager.tagValues.setIamPolicy` permission on the identified tagValue.
⊞ TagHolds TagValuesCreates a TagHold. Returns ALREADY_EXISTS if a TagHold with the same resource and origin exists under the same TagValue.
⊞ TagHolds TagValuesDeletes a TagHold.
⊞ TagHolds TagValuesLists TagHolds under a TagValue.
⊞ TestIamPermissions TagValuesReturns permissions that a caller has on the specified TagValue. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. There are no permissions required for making this API call.
Contact Center AI Insights API v1
⊞ Locations ProjectsCreates an analysis. The long running operation is done when the analysis has completed.
⊞ Locations ProjectsDeletes an analysis.
⊞ Locations ProjectsGets an analysis.
⊞ Locations ProjectsLists analyses.
⊞ Locations ProjectsAnalyzes multiple conversations in a single request.
⊞ Locations ProjectsDeletes multiple conversations in a single request.
⊞ Locations ProjectsGets conversation statistics.
⊞ Locations ProjectsCreates a conversation.
⊞ Locations ProjectsDeletes a conversation.
⊞ Locations ProjectsGets a conversation.
⊞ Locations ProjectsImports conversations and processes them according to the user's configuration.
⊞ Locations ProjectsLists conversations.
⊞ Locations ProjectsUpdates a conversation.
⊞ Locations ProjectsCreate a longrunning conversation upload operation. This method differs from CreateConversation by allowing audio transcription and optional DLP redaction.
⊞ Locations ProjectsGets project-level settings.
⊞ Locations ProjectsExport insights data to a destination defined in the request body.
⊞ Locations ProjectsGets an issue model's statistics.
⊞ Locations ProjectsCreates an issue model.
⊞ Locations ProjectsDeletes an issue model.
⊞ Locations ProjectsDeploys an issue model. Returns an error if a model is already deployed. An issue model can only be used in analysis after it has been deployed.
⊞ Locations ProjectsGets an issue model.
⊞ Locations ProjectsDeletes an issue.
⊞ Locations ProjectsGets an issue.
⊞ Locations ProjectsLists issues.
⊞ Locations ProjectsUpdates an issue.
⊞ Locations ProjectsLists issue models.
⊞ Locations ProjectsUpdates an issue model.
⊞ Locations ProjectsUndeploys an issue model. An issue model can not be used in analysis after it has been undeployed.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a phrase matcher.
⊞ Locations ProjectsDeletes a phrase matcher.
⊞ Locations ProjectsGets a phrase matcher.
⊞ Locations ProjectsLists phrase matchers.
⊞ Locations ProjectsUpdates a phrase matcher.
⊞ Locations ProjectsUpdates project-level settings.
⊞ Locations ProjectsCreates a view.
⊞ Locations ProjectsDeletes a view.
⊞ Locations ProjectsGets a view.
⊞ Locations ProjectsLists views.
⊞ Locations ProjectsUpdates a view.
Cloud Workstations API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new workstation cluster.
⊞ Locations ProjectsDeletes the specified workstation cluster.
⊞ Locations ProjectsReturns the requested workstation cluster.
⊞ Locations ProjectsReturns all workstation clusters in the specified location.
⊞ Locations ProjectsUpdates an existing workstation cluster.
⊞ Locations ProjectsCreates a new workstation configuration.
⊞ Locations ProjectsDeletes the specified workstation configuration.
⊞ Locations ProjectsReturns the requested workstation configuration.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns all workstation configurations in the specified cluster.
⊞ Locations ProjectsReturns all workstation configurations in the specified cluster on which the caller has the "workstations.workstation.create" permission.
⊞ Locations ProjectsUpdates an existing workstation configuration.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new workstation.
⊞ Locations ProjectsDeletes the specified workstation.
⊞ Locations ProjectsReturns a short-lived credential that can be used to send authenticated and authorized traffic to a workstation.
⊞ Locations ProjectsReturns the requested workstation.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsReturns all Workstations using the specified workstation configuration.
⊞ Locations ProjectsReturns all workstations using the specified workstation configuration on which the caller has the "workstations.workstations.use" permission.
⊞ Locations ProjectsUpdates an existing workstation.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsStarts running a workstation so that users can connect to it.
⊞ Locations ProjectsStops running a workstation, reducing costs.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
Firebase App Distribution API v1
⊞ Upload MediaUploads a binary. Uploading a binary can result in a new release being created, an update to an existing release, or a no-op if a release with the same binary already exists.
⊞ Apps ProjectsGets Android App Bundle (AAB) information for a Firebase app.
⊞ Apps ProjectsDeletes releases. A maximum of 100 releases can be deleted per request.
⊞ Apps ProjectsDistributes a release to testers. This call does the following: 1. Creates testers for the specified emails, if none exist. 2. Adds the testers and groups to the release. 3. Sends new testers an invitation email. 4. Sends existing testers a new release email. The request will fail with a `INVALID_ARGUMENT` if it contains a group that doesn't exist.
⊞ Apps ProjectsDeletes a feedback report.
⊞ Apps ProjectsGets a feedback report.
⊞ Apps ProjectsLists feedback reports. By default, sorts by `createTime` in descending order.
⊞ Apps ProjectsGets a release.
⊞ Apps ProjectsLists releases. By default, sorts by `createTime` in descending order.
⊞ Apps ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Apps ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Apps ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Apps ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Apps ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Apps ProjectsUpdates a release.
⊞ Groups ProjectsBatch adds members to a group. The testers will gain access to all releases that the groups have access to.
⊞ Groups ProjectsBatch removed members from a group. The testers will lose access to all releases that the groups have access to.
⊞ Groups ProjectsCreate a group.
⊞ Groups ProjectsDelete a group.
⊞ Groups ProjectsGet a group.
⊞ Groups ProjectsList groups.
⊞ Groups ProjectsUpdate a group.
⊞ Testers ProjectsBatch adds testers. This call adds testers for the specified emails if they don't already exist. Returns all testers specified in the request, including newly created and previously existing testers. This action is idempotent.
⊞ Testers ProjectsBatch removes testers. If found, this call deletes testers for the specified emails. Returns all deleted testers.
⊞ Testers ProjectsLists testers and their resource ids.
⊞ Testers ProjectsUpdate a tester. If the testers joins a group they gain access to all releases that the group has access to.
Cloud Firestore API v1
⊞ Databases ProjectsCreates a backup schedule on a database. At most two backup schedules can be configured on a database, one daily backup schedule with retention up to 7 days and one weekly backup schedule with retention up to 14 weeks.
⊞ Databases ProjectsDeletes a backup schedule.
⊞ Databases ProjectsGets information about a backup schedule.
⊞ Databases ProjectsList backup schedules.
⊞ Databases ProjectsUpdates a backup schedule.
⊞ Databases ProjectsGets the metadata and configuration for a Field.
⊞ Databases ProjectsLists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false or `ttlConfig:*`.
⊞ Databases ProjectsUpdates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn't aware of. The field mask should be specified as: `{ paths: "index_config" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
⊞ Databases ProjectsCreates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.
⊞ Databases ProjectsDeletes a composite index.
⊞ Databases ProjectsGets a composite index.
⊞ Databases ProjectsLists composite indexes.
⊞ Databases ProjectsCreate a database.
⊞ Databases ProjectsDeletes a database.
⊞ Databases ProjectsGets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested.
⊞ Databases ProjectsApplies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead.
⊞ Databases ProjectsStarts a new transaction.
⊞ Databases ProjectsCommits a transaction, while optionally updating documents.
⊞ Databases ProjectsCreates a new document.
⊞ Databases ProjectsDeletes a document.
⊞ Databases ProjectsGets a single document.
⊞ Databases ProjectsLists documents.
⊞ Databases ProjectsLists all the collection IDs underneath a document.
⊞ Databases ProjectsLists documents.
⊞ Databases ProjectsListens to changes. This method is only available via gRPC or WebChannel (not REST).
⊞ Databases ProjectsPartitions a query by returning partition cursors that can be used to run the query in parallel. The returned partition cursors are split points that can be used by RunQuery as starting/end points for the query results.
⊞ Databases ProjectsUpdates or inserts a document.
⊞ Databases ProjectsRolls back a transaction.
⊞ Databases ProjectsRuns an aggregation query. Rather than producing Document results like Firestore.RunQuery, this API allows running an aggregation to produce a series of AggregationResult server-side. High-Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*) FROM ( SELECT * FROM k where a = true ); ```
⊞ Databases ProjectsRuns a query.
⊞ Databases ProjectsStreams batches of document updates and deletes, in order. This method is only available via gRPC or WebChannel (not REST).
⊞ Databases ProjectsExports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. For more details on export behavior and output format, refer to: https://cloud.google.com/firestore/docs/manage-data/export-import
⊞ Databases ProjectsGets information about a database.
⊞ Databases ProjectsImports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.
⊞ Databases ProjectsList all the databases in the project.
⊞ Databases ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Databases ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Databases ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Databases ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Databases ProjectsUpdates a database.
⊞ Databases ProjectsCreates a new database by restoring from an existing backup. The new database must be in the same cloud region or multi-region location as the existing backup. This behaves similar to FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing backup. The long-running operation can be used to track the progress of the restore, with the Operation's metadata field type being the RestoreDatabaseMetadata. The response type is the Database if the restore was successful. The new database is not readable or writeable until the LRO has completed.
⊞ Locations ProjectsDeletes a backup.
⊞ Locations ProjectsGets information about a backup.
⊞ Locations ProjectsLists all the backups.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
Managed Service for Microsoft Active Directory API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsAdds an AD trust to a domain.
⊞ Locations ProjectsCreates a Backup for a domain.
⊞ Locations ProjectsDeletes identified Backup.
⊞ Locations ProjectsGets details of a single Backup.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Backup in a given project.
⊞ Locations ProjectsUpdates the labels for specified Backup.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCheckMigrationPermission API gets the current state of DomainMigration
⊞ Locations ProjectsCreates a Microsoft AD domain.
⊞ Locations ProjectsDeletes a domain.
⊞ Locations ProjectsRemoves an AD trust.
⊞ Locations ProjectsDisable Domain Migration
⊞ Locations ProjectsDomainJoinMachine API joins a Compute Engine VM to the domain
⊞ Locations ProjectsEnable Domain Migration
⊞ Locations ProjectsExtend Schema for Domain
⊞ Locations ProjectsGets information about a domain.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsGets the domain ldaps settings.
⊞ Locations ProjectsLists domains in a project.
⊞ Locations ProjectsUpdates the metadata and configuration of a domain.
⊞ Locations ProjectsUpdates the DNS conditional forwarder.
⊞ Locations ProjectsResets a domain's administrator password.
⊞ Locations ProjectsRestoreDomain restores domain backup mentioned in the RestoreDomainRequest
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsGets details of a single sqlIntegration.
⊞ Locations ProjectsLists SqlIntegrations in a given domain.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsPatches a single ldaps settings.
⊞ Locations ProjectsValidates a trust state, that the target domain is reachable, and that the target domain is able to accept incoming trust requests.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a Peering for Managed AD instance.
⊞ Locations ProjectsDeletes identified Peering.
⊞ Locations ProjectsGets details of a single Peering.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Peerings in a given project.
⊞ Locations ProjectsUpdates the labels for specified Peering.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists information about the supported locations for this service.
Service Control API v2
⊞ Check ServicesPrivate Preview. This feature is only available for approved services. This method provides admission control for services that are integrated with [Service Infrastructure](https://cloud.google.com/service-infrastructure). It checks whether an operation should be allowed based on the service configuration and relevant policies. It must be called before the operation is executed. For more information, see [Admission Control](https://cloud.google.com/service-infrastructure/docs/admission-control). NOTE: The admission control has an expected policy propagation delay of 60s. The caller **must** not depend on the most recent policy changes. NOTE: The admission control has a hard limit of 1 referenced resources per call. If an operation refers to more than 1 resources, the caller must call the Check method multiple times. This method requires the `servicemanagement.services.check` permission on the specified service. For more information, see [Service Control API Access Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
⊞ Report ServicesPrivate Preview. This feature is only available for approved services. This method provides telemetry reporting for services that are integrated with [Service Infrastructure](https://cloud.google.com/service-infrastructure). It reports a list of operations that have occurred on a service. It must be called after the operations have been executed. For more information, see [Telemetry Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting). NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB per Report call. It is recommended to have no more than 100 operations per call. This method requires the `servicemanagement.services.report` permission on the specified service. For more information, see [Service Control API Access Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
Batch API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsCreate a Job.
⊞ Locations ProjectsDelete a Job.
⊞ Locations ProjectsGet a Job specified by its resource name.
⊞ Locations ProjectsList all Jobs for a project within a region.
⊞ Locations ProjectsReturn a single Task.
⊞ Locations ProjectsList Tasks associated with a job.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsReport agent's state, e.g. agent status and tasks information
KMS Inventory API v1
⊞ ProtectedResources OrganizationsReturns metadata about the resources protected by the given Cloud KMS CryptoKey in the given Cloud organization.
⊞ CryptoKeys ProjectsReturns cryptographic keys managed by Cloud KMS in a given Cloud project. Note that this data is sourced from snapshots, meaning it may not completely reflect the actual state of key metadata at call time.
⊞ Locations ProjectsReturns aggregate information about the resources protected by the given Cloud KMS CryptoKey. Only resources within the same Cloud organization as the key will be returned. The project that holds the key must be part of an organization in order for this call to succeed.
Cloud Deployment Manager V2 API v2
⊞ CancelPreview DeploymentsCancels and removes the preview currently associated with the deployment.
⊞ Delete DeploymentsDeletes a deployment and all of the resources in the deployment.
⊞ Get DeploymentsGets information about a specific deployment.
⊞ GetIamPolicy DeploymentsGets the access control policy for a resource. May be empty if no such policy or resource exists.
⊞ Insert DeploymentsCreates a deployment and all of the resources described by the deployment manifest.
⊞ List DeploymentsLists all deployments for a given project.
⊞ Patch DeploymentsPatches a deployment and all of the resources described by the deployment manifest.
⊞ SetIamPolicy DeploymentsSets the access control policy on the specified resource. Replaces any existing policy.
⊞ Stop DeploymentsStops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started.
⊞ TestIamPermissions DeploymentsReturns permissions that a caller has on the specified resource.
⊞ Update DeploymentsUpdates a deployment and all of the resources described by the deployment manifest.
⊞ Get ManifestsGets information about a specific manifest.
⊞ List ManifestsLists all manifests for a given deployment.
⊞ Get OperationsGets information about a specific operation.
⊞ List OperationsLists all operations for a project.
⊞ Get ResourcesGets information about a single resource.
⊞ List ResourcesLists all resources in a given deployment.
⊞ List TypesLists all resource types for Deployment Manager.
BigLake API v1
⊞ Locations ProjectsCreates a new catalog.
⊞ Locations ProjectsCreates a new database.
⊞ Locations ProjectsDeletes an existing database specified by the database ID.
⊞ Locations ProjectsGets the database specified by the resource name.
⊞ Locations ProjectsList all databases in a specified catalog.
⊞ Locations ProjectsUpdates an existing database specified by the database ID.
⊞ Locations ProjectsCreates a new table.
⊞ Locations ProjectsDeletes an existing table specified by the table ID.
⊞ Locations ProjectsGets the table specified by the resource name.
⊞ Locations ProjectsList all tables in a specified database.
⊞ Locations ProjectsUpdates an existing table specified by the table ID.
⊞ Locations ProjectsRenames an existing table specified by the table ID.
⊞ Locations ProjectsDeletes an existing catalog specified by the catalog ID.
⊞ Locations ProjectsGets the catalog specified by the resource name.
⊞ Locations ProjectsList all catalogs in a specified project.
Firebase Management API v1beta1
⊞ List AvailableProjectsLists each [Google Cloud Platform (GCP) `Project`] (https://cloud.google.com/resource-manager/reference/rest/v1/projects) that can have Firebase resources added to it. A Project will only be listed if: - The caller has sufficient [Google IAM](https://cloud.google.com/iam) permissions to call AddFirebase. - The Project is not already a FirebaseProject. - The Project is not in an Organization which has policies that prevent Firebase resources from being added.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ AddFirebase ProjectsAdds Firebase resources to the specified existing [Google Cloud Platform (GCP) `Project`] (https://cloud.google.com/resource-manager/reference/rest/v1/projects). Since a FirebaseProject is actually also a GCP `Project`, a `FirebaseProject` has the same underlying GCP identifiers (`projectNumber` and `projectId`). This allows for easy interop with Google APIs. The result of this call is an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the provisioning process by calling GetOperation until [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When `done` is `true`, the `Operation` has either succeeded or failed. If the `Operation` succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to a FirebaseProject; if the `Operation` failed, its [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a google.rpc.Status. The `Operation` is automatically deleted after completion, so there is no need to call DeleteOperation. This method does not modify any billing account information on the underlying GCP `Project`. To call `AddFirebase`, a project member or service account must have the following permissions (the IAM roles of Editor and Owner contain these permissions): `firebase.projects.update`, `resourcemanager.projects.get`, `serviceusage.services.enable`, and `serviceusage.services.get`.
⊞ AddGoogleAnalytics ProjectsLinks the specified FirebaseProject with an existing [Google Analytics account](http://www.google.com/analytics/). Using this call, you can either: - Specify an `analyticsAccountId` to provision a new Google Analytics property within the specified account and associate the new property with the `FirebaseProject`. - Specify an existing `analyticsPropertyId` to associate the property with the `FirebaseProject`. Note that when you call `AddGoogleAnalytics`: 1. The first check determines if any existing data streams in the Google Analytics property correspond to any existing Firebase Apps in the `FirebaseProject` (based on the `packageName` or `bundleId` associated with the data stream). Then, as applicable, the data streams and apps are linked. Note that this auto-linking only applies to `AndroidApps` and `IosApps`. 2. If no corresponding data streams are found for the Firebase Apps, new data streams are provisioned in the Google Analytics property for each of the Firebase Apps. Note that a new data stream is always provisioned for a Web App even if it was previously associated with a data stream in the Analytics property. Learn more about the hierarchy and structure of Google Analytics accounts in the [Analytics documentation](https://support.google.com/analytics/answer/9303323). The result of this call is an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the provisioning process by calling GetOperation until [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When `done` is `true`, the `Operation` has either succeeded or failed. If the `Operation` succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to an AnalyticsDetails; if the `Operation` failed, its [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a google.rpc.Status. To call `AddGoogleAnalytics`, a project member must be an Owner for the existing `FirebaseProject` and have the [`Edit` permission](https://support.google.com/analytics/answer/2884495) for the Google Analytics account. If the `FirebaseProject` already has Google Analytics enabled, and you call `AddGoogleAnalytics` using an `analyticsPropertyId` that's different from the currently associated property, then the call will fail. Analytics may have already been enabled in the Firebase console or by specifying `timeZone` and `regionCode` in the call to [`AddFirebase`](../../v1beta1/projects/addFirebase).
⊞ AndroidApps ProjectsRequests the creation of a new AndroidApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.
⊞ AndroidApps ProjectsGets the specified AndroidApp.
⊞ AndroidApps ProjectsGets the configuration artifact associated with the specified AndroidApp.
⊞ AndroidApps ProjectsLists each AndroidApp associated with the specified FirebaseProject. The elements are returned in no particular order, but will be a consistent view of the Apps when additional requests are made with a `pageToken`.
⊞ AndroidApps ProjectsUpdates the attributes of the specified AndroidApp.
⊞ AndroidApps ProjectsRemoves the specified AndroidApp from the FirebaseProject.
⊞ AndroidApps ProjectsAdds a ShaCertificate to the specified AndroidApp.
⊞ AndroidApps ProjectsRemoves a ShaCertificate from the specified AndroidApp.
⊞ AndroidApps ProjectsLists the SHA-1 and SHA-256 certificates for the specified AndroidApp.
⊞ AndroidApps ProjectsRestores the specified AndroidApp to the FirebaseProject.
⊞ AvailableLocations Projects**DEPRECATED.** _Instead, use the applicable resource-specific REST API (or associated documentation, as needed) to determine valid locations for each resource used in your Project._ Lists the valid Google Cloud Platform (GCP) resource locations for the specified Project (including a FirebaseProject). One of these locations can be selected as the Project's [_default_ GCP resource location](https://firebase.google.com/docs/projects/locations), which is the geographical location where the Project's resources, such as Cloud Firestore, will be provisioned by default. However, if the default GCP resource location has already been set for the Project, then this setting cannot be changed. This call checks for any possible [location restrictions](https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations) for the specified Project and, thus, might return a subset of all possible GCP resource locations. To list all GCP resource locations (regardless of any restrictions), call the endpoint without specifying a unique project identifier (that is, `/v1beta1/{parent=projects/-}/listAvailableLocations`). To call `ListAvailableLocations` with a specified project, a member must be at minimum a Viewer of the Project. Calls without a specified project do not require any specific project permissions.
⊞ DefaultLocation Projects**DEPRECATED.** _Instead, use the applicable resource-specific REST API to set the location for each resource used in your Project._ Sets the default Google Cloud Platform (GCP) resource location for the specified FirebaseProject. This method creates an App Engine application with a [default Cloud Storage bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket), located in the specified [`locationId`](#body.request_body.FIELDS.location_id). This location must be one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). After the default GCP resource location is finalized, or if it was already set, it cannot be changed. The default GCP resource location for the specified `FirebaseProject` might already be set because either the underlying GCP `Project` already has an App Engine application or `FinalizeDefaultLocation` was previously called with a specified `locationId`. Any new calls to `FinalizeDefaultLocation` with a *different* specified `locationId` will return a 409 error. The result of this call is an [`Operation`](../../v1beta1/operations), which can be used to track the provisioning process. The [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of the `Operation` is google.protobuf.Empty. The `Operation` can be polled by its `name` using GetOperation until `done` is true. When `done` is true, the `Operation` has either succeeded or failed. If the `Operation` has succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be set to a google.protobuf.Empty; if the `Operation` has failed, its `error` will be set to a google.rpc.Status. The `Operation` is automatically deleted after completion, so there is no need to call DeleteOperation. All fields listed in the [request body](#request-body) are required. To call `FinalizeDefaultLocation`, a member must be an Owner of the Project.
⊞ Get ProjectsGets the specified FirebaseProject.
⊞ GetAdminSdkConfig ProjectsGets the configuration artifact associated with the specified FirebaseProject, which can be used by servers to simplify initialization. Typically, this configuration is used with the Firebase Admin SDK [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk) command.
⊞ GetAnalyticsDetails ProjectsGets the Google Analytics details currently associated with the specified FirebaseProject. If the `FirebaseProject` is not yet linked to Google Analytics, then the response to `GetAnalyticsDetails` is `NOT_FOUND`.
⊞ IosApps ProjectsRequests the creation of a new IosApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.
⊞ IosApps ProjectsGets the specified IosApp.
⊞ IosApps ProjectsGets the configuration artifact associated with the specified IosApp.
⊞ IosApps ProjectsLists each IosApp associated with the specified FirebaseProject. The elements are returned in no particular order, but will be a consistent view of the Apps when additional requests are made with a `pageToken`.
⊞ IosApps ProjectsUpdates the attributes of the specified IosApp.
⊞ IosApps ProjectsRemoves the specified IosApp from the FirebaseProject.
⊞ IosApps ProjectsRestores the specified IosApp to the FirebaseProject.
⊞ List ProjectsLists each FirebaseProject accessible to the caller. The elements are returned in no particular order, but they will be a consistent view of the Projects when additional requests are made with a `pageToken`. This method is eventually consistent with Project mutations, which means newly provisioned Projects and recent modifications to existing Projects might not be reflected in the set of Projects. The list will include only ACTIVE Projects. Use GetFirebaseProject for consistent reads as well as for additional Project details.
⊞ Patch ProjectsUpdates the attributes of the specified FirebaseProject. All [query parameters](#query-parameters) are required.
⊞ RemoveAnalytics ProjectsUnlinks the specified FirebaseProject from its Google Analytics account. This call removes the association of the specified `FirebaseProject` with its current Google Analytics property. However, this call does not delete the Google Analytics resources, such as the Google Analytics property or any data streams. These resources may be re-associated later to the `FirebaseProject` by calling [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps, this call re-links data streams with their corresponding apps. However, for Web Apps, this call provisions a *new* data stream for each Web App. To call `RemoveAnalytics`, a project member must be an Owner for the `FirebaseProject`.
⊞ SearchApps ProjectsLists all available Apps for the specified FirebaseProject. This is a convenience method. Typically, interaction with an App should be done using the platform-specific service, but some tool use-cases require a summary of all known Apps (such as for App selector interfaces).
⊞ WebApps ProjectsRequests the creation of a new WebApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.
⊞ WebApps ProjectsGets the specified WebApp.
⊞ WebApps ProjectsGets the configuration artifact associated with the specified WebApp.
⊞ WebApps ProjectsLists each WebApp associated with the specified FirebaseProject. The elements are returned in no particular order, but will be a consistent view of the Apps when additional requests are made with a `pageToken`.
⊞ WebApps ProjectsUpdates the attributes of the specified WebApp.
⊞ WebApps ProjectsRemoves the specified WebApp from the FirebaseProject.
⊞ WebApps ProjectsRestores the specified WebApp to the FirebaseProject.
Organization Policy API v2
⊞ Constraints FoldersLists constraints that could be applied on the specified resource.
⊞ Policies FoldersCreates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Google Cloud resource.
⊞ Policies FoldersDeletes a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or organization policy does not exist.
⊞ Policies FoldersGets a policy on a resource. If no policy is set on the resource, `NOT_FOUND` is returned. The `etag` value can be used with `UpdatePolicy()` to update a policy during read-modify-write.
⊞ Policies FoldersGets the effective policy on a resource. This is the result of merging policies in the resource hierarchy and evaluating conditions. The returned policy will not have an `etag` or `condition` set because it is an evaluated policy across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
⊞ Policies FoldersRetrieves all of the policies that exist on a particular resource.
⊞ Policies FoldersUpdates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.
⊞ Constraints OrganizationsLists constraints that could be applied on the specified resource.
⊞ CustomConstraints OrganizationsCreates a custom constraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the organization does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the constraint already exists on the given organization.
⊞ CustomConstraints OrganizationsDeletes a custom constraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist.
⊞ CustomConstraints OrganizationsGets a custom constraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the custom constraint does not exist.
⊞ CustomConstraints OrganizationsRetrieves all of the custom constraints that exist on a particular organization resource.
⊞ CustomConstraints OrganizationsUpdates a custom constraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Note: the supplied policy will perform a full overwrite of all fields.
⊞ Policies OrganizationsCreates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Google Cloud resource.
⊞ Policies OrganizationsDeletes a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or organization policy does not exist.
⊞ Policies OrganizationsGets a policy on a resource. If no policy is set on the resource, `NOT_FOUND` is returned. The `etag` value can be used with `UpdatePolicy()` to update a policy during read-modify-write.
⊞ Policies OrganizationsGets the effective policy on a resource. This is the result of merging policies in the resource hierarchy and evaluating conditions. The returned policy will not have an `etag` or `condition` set because it is an evaluated policy across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
⊞ Policies OrganizationsRetrieves all of the policies that exist on a particular resource.
⊞ Policies OrganizationsUpdates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.
⊞ Constraints ProjectsLists constraints that could be applied on the specified resource.
⊞ Policies ProjectsCreates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Google Cloud resource.
⊞ Policies ProjectsDeletes a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or organization policy does not exist.
⊞ Policies ProjectsGets a policy on a resource. If no policy is set on the resource, `NOT_FOUND` is returned. The `etag` value can be used with `UpdatePolicy()` to update a policy during read-modify-write.
⊞ Policies ProjectsGets the effective policy on a resource. This is the result of merging policies in the resource hierarchy and evaluating conditions. The returned policy will not have an `etag` or `condition` set because it is an evaluated policy across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
⊞ Policies ProjectsRetrieves all of the policies that exist on a particular resource.
⊞ Policies ProjectsUpdates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.
Workflows API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new workflow. If a workflow with the specified name already exists in the specified project and location, the long running operation returns a ALREADY_EXISTS error.
⊞ Locations ProjectsDeletes a workflow with the specified name. This method also cancels and deletes all running executions of the workflow.
⊞ Locations ProjectsGets details of a single workflow.
⊞ Locations ProjectsLists workflows in a given project and location. The default order is not specified.
⊞ Locations ProjectsLists revisions for a given workflow.
⊞ Locations ProjectsUpdates an existing workflow. Running this method has no impact on already running executions of the workflow. A new revision of the workflow might be created as a result of a successful update operation. In that case, the new revision is used in new workflow executions.
Certificate Manager API v1
⊞ Locations ProjectsCreates a new CertificateIssuanceConfig in a given project and location.
⊞ Locations ProjectsDeletes a single CertificateIssuanceConfig.
⊞ Locations ProjectsGets details of a single CertificateIssuanceConfig.
⊞ Locations ProjectsLists CertificateIssuanceConfigs in a given project and location.
⊞ Locations ProjectsCreates a new CertificateMapEntry in a given project and location.
⊞ Locations ProjectsDeletes a single CertificateMapEntry.
⊞ Locations ProjectsGets details of a single CertificateMapEntry.
⊞ Locations ProjectsLists CertificateMapEntries in a given project and location.
⊞ Locations ProjectsUpdates a CertificateMapEntry.
⊞ Locations ProjectsCreates a new CertificateMap in a given project and location.
⊞ Locations ProjectsDeletes a single CertificateMap. A Certificate Map can't be deleted if it contains Certificate Map Entries. Remove all the entries from the map before calling this method.
⊞ Locations ProjectsGets details of a single CertificateMap.
⊞ Locations ProjectsLists CertificateMaps in a given project and location.
⊞ Locations ProjectsUpdates a CertificateMap.
⊞ Locations ProjectsCreates a new Certificate in a given project and location.
⊞ Locations ProjectsDeletes a single Certificate.
⊞ Locations ProjectsGets details of a single Certificate.
⊞ Locations ProjectsLists Certificates in a given project and location.
⊞ Locations ProjectsUpdates a Certificate.
⊞ Locations ProjectsCreates a new DnsAuthorization in a given project and location.
⊞ Locations ProjectsDeletes a single DnsAuthorization.
⊞ Locations ProjectsGets details of a single DnsAuthorization.
⊞ Locations ProjectsLists DnsAuthorizations in a given project and location.
⊞ Locations ProjectsUpdates a DnsAuthorization.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new TrustConfig in a given project and location.
⊞ Locations ProjectsDeletes a single TrustConfig.
⊞ Locations ProjectsGets details of a single TrustConfig.
⊞ Locations ProjectsLists TrustConfigs in a given project and location.
⊞ Locations ProjectsUpdates a TrustConfig.
Cloud Healthcare API v1
⊞ Locations ProjectsCreates a new Attribute definition in the parent consent store.
⊞ Locations ProjectsDeletes the specified Attribute definition. Fails if the Attribute definition is referenced by any User data mapping, or the latest revision of any Consent.
⊞ Locations ProjectsGets the specified Attribute definition.
⊞ Locations ProjectsLists the Attribute definitions in the specified consent store.
⊞ Locations ProjectsUpdates the specified Attribute definition.
⊞ Locations ProjectsChecks if a particular data_id of a User data mapping in the specified consent store is consented for the specified use.
⊞ Locations ProjectsCreates a new Consent artifact in the parent consent store.
⊞ Locations ProjectsDeletes the specified Consent artifact. Fails if the artifact is referenced by the latest revision of any Consent.
⊞ Locations ProjectsGets the specified Consent artifact.
⊞ Locations ProjectsLists the Consent artifacts in the specified consent store.
⊞ Locations ProjectsActivates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the specified Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state.
⊞ Locations ProjectsCreates a new Consent in the parent consent store.
⊞ Locations ProjectsDeletes the Consent and its revisions. To keep a record of the Consent but mark it inactive, see [RevokeConsent]. To delete a revision of a Consent, see [DeleteConsentRevision]. This operation does not delete the related Consent artifact.
⊞ Locations ProjectsDeletes the specified revision of a Consent. An INVALID_ARGUMENT error occurs if the specified revision is the latest revision.
⊞ Locations ProjectsGets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name.
⊞ Locations ProjectsLists the Consent in the given consent store, returning each Consent's latest revision.
⊞ Locations ProjectsLists the revisions of the specified Consent in reverse chronological order.
⊞ Locations ProjectsUpdates the latest revision of the specified Consent by committing a new revision with the changes. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state.
⊞ Locations ProjectsRejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the specified Consent is in the `REJECTED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `ACTIVE` or `REVOKED` state.
⊞ Locations ProjectsRevokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the specified Consent is in the `REVOKED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in `DRAFT` or `REJECTED` state.
⊞ Locations ProjectsCreates a new consent store in the parent dataset. Attempting to create a consent store with the same ID as an existing store fails with an ALREADY_EXISTS error.
⊞ Locations ProjectsDeletes the specified consent store and removes all the consent store's data.
⊞ Locations ProjectsEvaluates the user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, which can cause a slight delay between the time mappings are created or updated and when they are included in EvaluateUserConsents results.
⊞ Locations ProjectsGets the specified consent store.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists the consent stores in the specified dataset.
⊞ Locations ProjectsUpdates the specified consent store.
⊞ Locations ProjectsQueries all data_ids that are consented for a specified use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. If the request is successful, a detailed response is returned of type QueryAccessibleDataResponse, contained in the response field when the operation finishes. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). For example, the following sample log entry shows a `failed to evaluate consent policy` error that occurred during a QueryAccessibleData call to consent store `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. ```json jsonPayload: { @type: "type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry" error: { code: 9 message: "failed to evaluate consent policy" } resourceName: "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}" } logName: "projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data" operation: { id: "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}" producer: "healthcare.googleapis.com/QueryAccessibleData" } receiveTimestamp: "TIMESTAMP" resource: { labels: { consent_store_id: "{consent_store_id}" dataset_id: "{dataset_id}" location: "{location_id}" project_id: "{project_id}" } type: "healthcare_consent_store" } severity: "ERROR" timestamp: "TIMESTAMP" ```
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsArchives the specified User data mapping.
⊞ Locations ProjectsCreates a new User data mapping in the parent consent store.
⊞ Locations ProjectsDeletes the specified User data mapping.
⊞ Locations ProjectsGets the specified User data mapping.
⊞ Locations ProjectsLists the User data mappings in the specified consent store.
⊞ Locations ProjectsUpdates the specified User data mapping.
⊞ Locations ProjectsCreates a new health dataset. Results are returned through the Operation interface which returns either an `Operation.response` which contains a Dataset or `Operation.error`. The metadata field type is OperationMetadata.
⊞ Locations ProjectsCreates a new dataset containing de-identified data from the source dataset. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifySummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The new de-identified dataset will not contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
⊞ Locations ProjectsDeletes the specified health dataset and all data contained in the dataset. Deleting a dataset does not affect the sources from which the dataset was imported (if any).
⊞ Locations ProjectsCreates a new DICOM store within the parent dataset.
⊞ Locations ProjectsDe-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyDicomStoreSummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The output DICOM store will not contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
⊞ Locations ProjectsDeletes the specified DICOM store and removes all images that are contained within it.
⊞ Locations ProjectsGetStudyMetrics returns metrics for a study.
⊞ Locations ProjectsGetSeriesMetrics returns metrics for a series.
⊞ Locations ProjectsExports data to the specified destination by copying it from the DICOM store. Errors are also logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata.
⊞ Locations ProjectsGets the specified DICOM store.
⊞ Locations ProjectsGets metrics associated with the DICOM store.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsImports data into the DICOM store by copying it from the specified source. Errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata.
⊞ Locations ProjectsLists the DICOM stores in the given dataset.
⊞ Locations ProjectsUpdates the specified DICOM store.
⊞ Locations ProjectsSearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Search for DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
⊞ Locations ProjectsSearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see [Search for DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
⊞ Locations ProjectsSearchForStudies returns a list of matching studies. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForStudies, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForStudies, see [Search for DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsStoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see [Store DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#store-dicom).
⊞ Locations ProjectsDeleteStudy deletes all instances within the given study. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Instances cannot be inserted into a study that is being deleted by an operation until the operation completes. For samples that show how to call DeleteStudy, see [Delete a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#delete-dicom).
⊞ Locations ProjectsRetrieveStudyMetadata returns instance associated with the given study presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudyMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudyMetadata, see [Retrieve metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-metadata).
⊞ Locations ProjectsRetrieveStudy returns all instances within the given study. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudy, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudy, see [Retrieve DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-dicom).
⊞ Locations ProjectsSearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Search for DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
⊞ Locations ProjectsSearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see [Search for DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
⊞ Locations ProjectsDeleteSeries deletes all instances within the given study and series. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Instances cannot be inserted into a series that is being deleted by an operation until the operation completes. For samples that show how to call DeleteSeries, see [Delete a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#delete-dicom).
⊞ Locations ProjectsDeleteInstance deletes an instance associated with the given study, series, and SOP Instance UID. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. Study and series search results can take a few seconds to be updated after an instance is deleted using DeleteInstance. For samples that show how to call DeleteInstance, see [Delete a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#delete-dicom).
⊞ Locations ProjectsRetrieveFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}. For details on the implementation of RetrieveFrames, see [DICOM frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveFrames, see [Retrieve DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-dicom).
⊞ Locations ProjectsRetrieveRenderedFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers in an acceptable Rendered Media Type. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedFrames, see [Rendered resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedFrames, see [Retrieve consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-consumer).
⊞ Locations ProjectsRetrieveInstance returns instance associated with the given study, series, and SOP Instance UID. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstance, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) and [DICOM instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstance, see [Retrieve an instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-instance).
⊞ Locations ProjectsRetrieveInstanceMetadata returns instance associated with the given study, series, and SOP Instance UID presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstanceMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstanceMetadata, see [Retrieve metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-metadata).
⊞ Locations ProjectsRetrieveRenderedInstance returns instance associated with the given study, series, and SOP Instance UID in an acceptable Rendered Media Type. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedInstance, see [Rendered resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedInstance, see [Retrieve consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-consumer).
⊞ Locations ProjectsRetrieveSeriesMetadata returns instance associated with the given study and series, presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeriesMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeriesMetadata, see [Retrieve metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-metadata).
⊞ Locations ProjectsRetrieveSeries returns all instances within the given study and series. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeries, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeries, see [Retrieve DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-dicom).
⊞ Locations ProjectsSearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Search for DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
⊞ Locations ProjectsStoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see [Store DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#store-dicom).
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new FHIR store within the parent dataset.
⊞ Locations ProjectsDe-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyFhirStoreSummary. If errors occur, error is set. Error details are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
⊞ Locations ProjectsDeletes the specified FHIR store and removes all resources within it.
⊞ Locations ProjectsExport resources from the FHIR store to the specified destination. This method returns an Operation that can be used to track the status of the export by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a detailed response of type ExportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.
⊞ Locations ProjectsRetrieves a Patient resource and resources related to that patient. Implements the FHIR extended operation Patient-everything ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything), [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything), [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the operation. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The resources in scope for the response are: * The patient resource itself. * All the resources directly referenced by the patient resource. * Resources directly referencing the patient resource that meet the inclusion criteria. The inclusion criteria are based on the membership rules in the patient compartment definition ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html), [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html), [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which details the eligible resource types and referencing search parameters. For samples that show how to call `Patient-everything`, see [Getting all patient compartment resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).
⊞ Locations ProjectsDeletes all the historical versions of a resource (excluding the current version) from the FHIR store. To remove all versions of a resource, first delete the current version and then call this method. This is not a FHIR standard operation. For samples that show how to call `Resource-purge`, see [Deleting historical versions of a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).
⊞ Locations ProjectsValidates an input FHIR resource's conformance to its profiles and the profiles configured on the FHIR store. Implements the FHIR extended operation $validate ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resource-operations.html#validate), [STU3](http://hl7.org/implement/standards/fhir/STU3/resource-operations.html#validate), or [R4](http://hl7.org/implement/standards/fhir/R4/resource-operation-validate.html)). The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The `Parameters` input syntax is not supported. The `profile` query parameter can be used to request that the resource only be validated against a specific profile. If a profile with the given URL cannot be found in the FHIR store then an error is returned. Errors generated by validation contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead.
⊞ Locations ProjectsGets the FHIR capability statement ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html), [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)), or the [conformance statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html) in the DSTU2 case for the store, which contains a description of functionality supported by the server. Implements the FHIR standard capabilities interaction ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or the [conformance interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance) in the DSTU2 case. On success, the response body contains a JSON-encoded representation of a `CapabilityStatement` resource.
⊞ Locations ProjectsDeletes a FHIR resource that match an identifier search query. Implements the FHIR standard conditional delete interaction, limited to searching by resource identifier. If multiple resources match, 412 Precondition Failed error will be returned. Search term for identifier should be in the pattern `identifier=system|value` or `identifier=value` - similar to the `search` method on resources with a specific identifier. Note: Unless resource versioning is disabled by setting the disable_resource_versioning flag on the FHIR store, the deleted resource is moved to a history repository that can still be retrieved through vread and related methods, unless they are removed by the purge method. For samples that show how to call `conditionalDelete`, see [Conditionally deleting a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_deleting_a_fhir_resource).
⊞ Locations ProjectsIf a resource is found with the identifier specified in the query parameters, updates part of that resource by applying the operations specified in a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard conditional patch interaction, limited to searching by resource identifier. DSTU2 doesn't define a conditional patch method, but the server supports it in the same way it supports STU3. Search term for identifier should be in the pattern `identifier=system|value` or `identifier=value` - similar to the `search` method on resources with a specific identifier. If the search criteria identify more than one match, the request returns a `412 Precondition Failed` error. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type: application/json-patch+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `conditionalPatch`, see [Conditionally patching a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_patching_a_fhir_resource).
⊞ Locations ProjectsIf a resource is found with the identifier specified in the query parameters, updates the entire contents of that resource. Implements the FHIR standard conditional update interaction, limited to searching by resource identifier. Search term for identifier should be in the pattern `identifier=system|value` or `identifier=value` - similar to the `search` method on resources with a specific identifier. If the search criteria identify more than one match, the request returns a `412 Precondition Failed` error. If the search criteria identify zero matches, and the supplied resource body contains an `id`, and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. If the search criteria identify zero matches, and the supplied resource body does not contain an `id`, the resource is created with a server-assigned ID as per the create method. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `conditionalUpdate`, see [Conditionally updating a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_updating_a_fhir_resource).
⊞ Locations ProjectsCreates a FHIR resource. Implements the FHIR standard create interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which creates a new resource with a server-assigned resource ID. Also supports the FHIR standard conditional create interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#ccreate), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#ccreate), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#ccreate)), specified by supplying an `If-None-Exist` header containing a FHIR search query, limited to searching by resource identifier. If no resources match this search query, the server processes the create operation as normal. When using conditional create, the search term for identifier should be in the pattern `identifier=system|value` or `identifier=value` - similar to the `search` method on resources with a specific identifier. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the resource as it was created on the server, including the server-assigned resource ID and version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `create`, see [Creating a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
⊞ Locations ProjectsDeletes a FHIR resource. Implements the FHIR standard delete interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#delete), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#delete), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#delete)). Note: Unless resource versioning is disabled by setting the disable_resource_versioning flag on the FHIR store, the deleted resources will be moved to a history repository that can still be retrieved through vread and related methods, unless they are removed by the purge method. For samples that show how to call `delete`, see [Deleting a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).
⊞ Locations ProjectsExecutes all the requests in the given Bundle. Implements the FHIR standard batch/transaction interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#transaction), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#transaction)). Supports all interactions within a bundle, except search. This method accepts Bundles of type `batch` and `transaction`, processing them according to the batch processing rules ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#brules)) and transaction processing rules ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#trules)). The request body must contain a JSON-encoded FHIR `Bundle` resource, and the request headers must contain `Content-Type: application/fhir+json`. For a batch bundle or a successful transaction, the response body contains a JSON-encoded representation of a `Bundle` resource of type `batch-response` or `transaction-response` containing one entry for each entry in the request, with the outcome of processing the entry. In the case of an error for a transaction bundle, the response body contains a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. This method checks permissions for each request in the bundle. The `executeBundle` permission is required to call this method, but you must also grant sufficient permissions to execute the individual requests in the bundle. For example, if the bundle contains a request to create a FHIR resource, the caller must also have been granted the `healthcare.fhirResources.create` permission. You can use audit logs to view the permissions for `executeBundle` and each request in the bundle. For more information, see [Viewing Cloud Audit logs](https://cloud.google.com/healthcare-api/docs/how-tos/audit-logging). For samples that show how to call `executeBundle`, see [Managing FHIR resources using FHIR bundles](https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles).
⊞ Locations ProjectsLists all the versions of a resource (including the current version and deleted versions) from the FHIR store. Implements the per-resource form of the FHIR standard history interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `history`, containing the version history sorted from most recent to oldest versions. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `history`, see [Listing FHIR resource versions](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).
⊞ Locations ProjectsUpdates part of an existing resource by applying the operations specified in a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard patch interaction ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2 doesn't define a patch method, but the server supports it in the same way it supports STU3. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type: application/json-patch+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `patch`, see [Patching a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).
⊞ Locations ProjectsGets the contents of a FHIR resource. Implements the FHIR standard read interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#read), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#read), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#read)). Also supports the FHIR standard conditional read interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#cread), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cread), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified by supplying an `If-Modified-Since` header with a date/time value or an `If-None-Match` header with an ETag value. On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `read`, see [Getting a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).
⊞ Locations ProjectsSearches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html), [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. The server might return fewer resources than requested to prevent excessively large responses. If there are additional results, the returned `Bundle` contains a link of `relation` "next", which has a `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changed, and the time when the change reflects in search results. The only exception is resource identifier data, which is indexed synchronously as a special index. As a result, searching using resource identifier is not subject to indexing delay. To use the special synchronous index, the search term for identifier should be in the pattern `identifier=[system]|[value]` or `identifier=[value]`, and any of the following search result parameters can be used: * `_count` * `_include` * `_revinclude` * `_summary` * `_elements` If your query contains any other search parameters, the standard asynchronous index will be used instead. Note that searching against the special index is optimized for resolving a small number of matches. The search isn't optimized if your identifier search criteria matches a large number (i.e. more than 2,000) of resources. For a search query that will match a large number of resources, you can avoiding using the special synchronous index by including an additional `_sort` parameter in your query. Use `_sort=-_lastUpdated` if you want to keep the default sorting order. Note: The special synchronous identifier index are currently disabled for DocumentReference and DocumentManifest searches. For samples and detailed information, see [Searching for FHIR resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
⊞ Locations ProjectsSearches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html), [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. The server might return fewer resources than requested to prevent excessively large responses. If there are additional results, the returned `Bundle` contains a link of `relation` "next", which has a `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changed, and the time when the change reflects in search results. The only exception is resource identifier data, which is indexed synchronously as a special index. As a result, searching using resource identifier is not subject to indexing delay. To use the special synchronous index, the search term for identifier should be in the pattern `identifier=[system]|[value]` or `identifier=[value]`, and any of the following search result parameters can be used: * `_count` * `_include` * `_revinclude` * `_summary` * `_elements` If your query contains any other search parameters, the standard asynchronous index will be used instead. Note that searching against the special index is optimized for resolving a small number of matches. The search isn't optimized if your identifier search criteria matches a large number (i.e. more than 2,000) of resources. For a search query that will match a large number of resources, you can avoiding using the special synchronous index by including an additional `_sort` parameter in your query. Use `_sort=-_lastUpdated` if you want to keep the default sorting order. Note: The special synchronous identifier index are currently disabled for DocumentReference and DocumentManifest searches. For samples and detailed information, see [Searching for FHIR resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
⊞ Locations ProjectsUpdates the entire contents of a resource. Implements the FHIR standard update interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)). If the specified resource does not exist and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The resource must contain an `id` element having an identical value to the ID in the REST path of the request. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `update`, see [Updating a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).
⊞ Locations ProjectsGets the contents of a version (current or historical) of a FHIR resource by version ID. Implements the FHIR standard vread interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#vread), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#vread), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#vread)). On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `vread`, see [Retrieving a FHIR resource version](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).
⊞ Locations ProjectsGets the configuration of the specified FHIR store.
⊞ Locations ProjectsGets metrics associated with the FHIR store.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsImports resources to the FHIR store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some FHIR store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty FHIR store that is not being used by other clients. In cases where this method is not appropriate, consider using ExecuteBundle to load data. Every resource in the input must contain a client-supplied ID. Each resource is stored using the supplied ID regardless of the enable_update_create setting on the FHIR store. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Cloud Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The import process does not enforce referential integrity, regardless of the disable_referential_integrity setting on the FHIR store. This allows the import of resources with arbitrary interdependencies without considering grouping or ordering, but if the input data contains invalid references or if some resources fail to be imported, the FHIR store might be left in a state that violates referential integrity. The import process does not trigger Pub/Sub notification or BigQuery streaming update, regardless of how those are configured on the FHIR store. If a resource with the specified ID already exists, the most recent version of the resource is overwritten without creating a new historical version, regardless of the disable_resource_versioning setting on the FHIR store. If transient failures occur during the import, it's possible that successfully imported resources will be overwritten more than once. The import operation is idempotent unless the input data contains multiple valid resources with the same ID but different contents. In that case, after the import completes, the store contains exactly one resource with that ID but there is no ordering guarantee on which version of the contents it will have. The operation result counters do not count duplicate IDs as an error and count one success for each resource in the input, which might result in a success count larger than the number of resources in the FHIR store. This often occurs when importing data organized in bundles produced by Patient-everything where each bundle contains its own copy of a resource such as Practitioner that might be referred to by many patients. If some resources fail to import, for example due to parsing errors, successfully imported resources are not rolled back. The location and format of the input data is specified by the parameters in ImportResourcesRequest. Note that if no format is specified, this method assumes the `BUNDLE` format. When using the `BUNDLE` format this method ignores the `Bundle.type` field, except that `history` bundles are rejected, and does not apply any of the bundle processing semantics for batch or transaction bundles. Unlike in ExecuteBundle, transaction bundles are not executed as a single transaction and bundle-internal references are not rewritten. The bundle is treated as a collection of resources to be written as provided in `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example, this allows the import of `searchset` bundles produced by a FHIR search or Patient-everything operation. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a detailed response of type ImportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.
⊞ Locations ProjectsLists the FHIR stores in the given dataset.
⊞ Locations ProjectsUpdates the configuration of the specified FHIR store.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets any metadata associated with a dataset.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsCreates a new HL7v2 store within the parent dataset.
⊞ Locations ProjectsDeletes the specified HL7v2 store and removes all messages that it contains.
⊞ Locations ProjectsExports the messages to a destination. To filter messages to be exported, define a filter using the start and end time, relative to the message generation time (MSH.7). This API returns an Operation that can be used to track the status of the job by calling GetOperation. Immediate fatal errors appear in the error field. Otherwise, when the operation finishes, a detailed response of type ExportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.
⊞ Locations ProjectsGets the specified HL7v2 store.
⊞ Locations ProjectsGets metrics associated with the HL7v2 store.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsImport messages to the HL7v2 store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some HL7v2 store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty HL7v2 store that is not being used by other clients. An existing message will be overwritten if a duplicate message is imported. A duplicate message is a message with the same raw bytes as a message that already exists in this HL7v2 store. When a message is overwritten, its labels will also be overwritten. The import operation is idempotent unless the input data contains multiple valid messages with the same raw bytes but different labels. In that case, after the import completes, the store contains exactly one message with those raw bytes but there is no ordering guarantee on which version of the labels it has. The operation result counters do not count duplicated raw bytes as an error and count one success for each message in the input, which might result in a success count larger than the number of messages in the HL7v2 store. If some messages fail to import, for example due to parsing errors, successfully imported messages are not rolled back. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a response of type ImportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.
⊞ Locations ProjectsLists the HL7v2 stores in the given dataset.
⊞ Locations ProjectsParses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received.
⊞ Locations ProjectsDeletes an HL7v2 message.
⊞ Locations ProjectsGets an HL7v2 message.
⊞ Locations ProjectsParses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received. If the method is successful, it generates a response containing an HL7v2 acknowledgment (`ACK`) message. If the method encounters an error, it returns a negative acknowledgment (`NACK`) message. This behavior is suitable for replying to HL7v2 interface systems that expect these acknowledgments.
⊞ Locations ProjectsLists all the messages in the given HL7v2 store with support for filtering. Note: HL7v2 messages are indexed asynchronously, so there might be a slight delay between the time a message is created and when it can be found through a filter.
⊞ Locations ProjectsUpdate the message. The contents of the message in Message.data and data extracted from the contents such as Message.create_time cannot be altered. Only the Message.labels field is allowed to be updated. The labels in the request are merged with the existing set of labels. Existing labels with the same keys are updated.
⊞ Locations ProjectsUpdates the HL7v2 store.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists the health datasets in the current project.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates dataset metadata.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsAnalyze heathcare entity in a document. Its response includes the recognized entity mentions and the relationships between them. AnalyzeEntities uses context aware models to detect entities.
Service Networking API v1
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ AddSubnetwork ServicesFor service producers, provisions a new subnet in a peered service's shared VPC network in the requested region and with the requested size that's expressed as a CIDR range (number of leading bits of ipV4 network mask). The method checks against the assigned allocated ranges to find a non-conflicting IP address range. The method will reuse a subnet if subsequent calls contain the same subnet name, region, and prefix length. This method will make producer's tenant project to be a shared VPC service project as needed.
⊞ Connections ServicesCreates a private connection that establishes a VPC Network Peering connection to a VPC network in the service producer's organization. The administrator of the service consumer's VPC network invokes this method. The administrator must assign one or more allocated IP ranges for provisioning subnetworks in the service producer's VPC network. This connection is used for all supported services in the service producer's organization, so it only needs to be invoked once.
⊞ Connections ServicesDeletes a private service access connection.
⊞ Connections ServicesList the private connections that are configured in a service consumer's VPC network.
⊞ Connections ServicesUpdates the allocated ranges that are assigned to a connection.
⊞ DisableVpcServiceControls ServicesDisables VPC service controls for a connection.
⊞ DnsRecordSets ServicesService producers can use this method to add DNS record sets to private DNS zones in the shared producer host project.
⊞ DnsRecordSets ServicesProducers can use this method to retrieve information about the DNS record set added to the private zone inside the shared tenant host project associated with a consumer network.
⊞ DnsRecordSets ServicesProducers can use this method to retrieve a list of available DNS RecordSets available inside the private zone on the tenant host project accessible from their network.
⊞ DnsRecordSets ServicesService producers can use this method to remove DNS record sets from private DNS zones in the shared producer host project.
⊞ DnsRecordSets ServicesService producers can use this method to update DNS record sets from private DNS zones in the shared producer host project.
⊞ DnsZones ServicesService producers can use this method to add private DNS zones in the shared producer host project and matching peering zones in the consumer project.
⊞ DnsZones ServicesService producers can use this method to remove private DNS zones in the shared producer host project and matching peering zones in the consumer project.
⊞ EnableVpcServiceControls ServicesEnables VPC service controls for a connection.
⊞ Projects ServicesService producers can use this method to retrieve a DNS zone in the shared producer host project and the matching peering zones in consumer project
⊞ Projects Services* Service producers can use this method to retrieve a list of available DNS zones in the shared producer host project and the matching peering zones in the consumer project. *
⊞ Projects ServicesService producers use this method to get the configuration of their connection including the import/export of custom routes and subnetwork routes with public IP.
⊞ Projects ServicesConsumers use this method to find out the state of VPC Service Controls. The controls could be enabled or disabled for a connection.
⊞ Projects ServicesCreates a peered DNS domain which sends requests for records in given namespace originating in the service producer VPC network to the consumer VPC network to be resolved.
⊞ Projects ServicesDeletes a peered DNS domain.
⊞ Projects ServicesLists peered DNS domains for a connection.
⊞ Projects ServicesService producers use this method to update the configuration of their connection including the import/export of custom routes and subnetwork routes with public IP.
⊞ Roles ServicesService producers can use this method to add roles in the shared VPC host project. Each role is bound to the provided member. Each role must be selected from within an allowlisted set of roles. Each role is applied at only the granularity specified in the allowlist.
⊞ SearchRange ServicesService producers can use this method to find a currently unused range within consumer allocated ranges. This returned range is not reserved, and not guaranteed to remain unused. It will validate previously provided allocated ranges, find non-conflicting sub-range of requested size (expressed in number of leading bits of ipv4 network mask, as in CIDR range notation).
⊞ Validate ServicesService producers use this method to validate if the consumer provided network, project and requested range are valid. This allows them to use a fail-fast mechanism for consumer requests, and not have to wait for AddSubnetwork operation completion to determine if user request is invalid.
Firebase ML API v1
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Looker (Google Cloud core) API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new Instance in a given project and location.
⊞ Locations ProjectsDelete instance.
⊞ Locations ProjectsExport instance.
⊞ Locations ProjectsGets details of a single Instance.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsImport instance.
⊞ Locations ProjectsLists Instances in a given project and location.
⊞ Locations ProjectsUpdate Instance.
⊞ Locations ProjectsRestart instance.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Cloud Composer API v1
⊞ Locations ProjectsCreate a new environment.
⊞ Locations ProjectsTriggers database failover (only for highly resilient environments).
⊞ Locations ProjectsDelete an environment.
⊞ Locations ProjectsExecutes Airflow CLI command.
⊞ Locations ProjectsFetches database properties.
⊞ Locations ProjectsGet an existing environment.
⊞ Locations ProjectsList environments.
⊞ Locations ProjectsLoads a snapshot of a Cloud Composer environment. As a result of this operation, a snapshot of environment's specified in LoadSnapshotRequest is loaded into the environment.
⊞ Locations ProjectsUpdate an environment.
⊞ Locations ProjectsPolls Airflow CLI command execution and fetches logs.
⊞ Locations ProjectsCreates a snapshots of a Cloud Composer environment. As a result of this operation, snapshot of environment's state is stored in a location specified in the SaveSnapshotRequest.
⊞ Locations ProjectsStops Airflow CLI command execution.
⊞ Locations ProjectsList ImageVersions for provided location.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Network Services API v1
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new EndpointPolicy in a given project and location.
⊞ Locations ProjectsDeletes a single EndpointPolicy.
⊞ Locations ProjectsGets details of a single EndpointPolicy.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists EndpointPolicies in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single EndpointPolicy.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new Gateway in a given project and location.
⊞ Locations ProjectsDeletes a single Gateway.
⊞ Locations ProjectsGets details of a single Gateway.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Gateways in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Gateway.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsCreates a new GrpcRoute in a given project and location.
⊞ Locations ProjectsDeletes a single GrpcRoute.
⊞ Locations ProjectsGets details of a single GrpcRoute.
⊞ Locations ProjectsLists GrpcRoutes in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single GrpcRoute.
⊞ Locations ProjectsCreates a new HttpRoute in a given project and location.
⊞ Locations ProjectsDeletes a single HttpRoute.
⊞ Locations ProjectsGets details of a single HttpRoute.
⊞ Locations ProjectsLists HttpRoute in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single HttpRoute.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a new Mesh in a given project and location.
⊞ Locations ProjectsDeletes a single Mesh.
⊞ Locations ProjectsGets details of a single Mesh.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Meshes in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Mesh.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new ServiceBinding in a given project and location.
⊞ Locations ProjectsDeletes a single ServiceBinding.
⊞ Locations ProjectsGets details of a single ServiceBinding.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists ServiceBinding in a given project and location.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new TcpRoute in a given project and location.
⊞ Locations ProjectsDeletes a single TcpRoute.
⊞ Locations ProjectsGets details of a single TcpRoute.
⊞ Locations ProjectsLists TcpRoute in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single TcpRoute.
⊞ Locations ProjectsCreates a new TlsRoute in a given project and location.
⊞ Locations ProjectsDeletes a single TlsRoute.
⊞ Locations ProjectsGets details of a single TlsRoute.
⊞ Locations ProjectsLists TlsRoute in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single TlsRoute.
Cloud OS Login API v1
⊞ GetLoginProfile UsersRetrieves the profile information used for logging in to a virtual machine on Google Compute Engine.
⊞ ImportSshPublicKey UsersAdds an SSH public key and returns the profile information. Default POSIX account information is set when no username and UID exist as part of the login profile.
⊞ Projects UsersDeletes a POSIX account.
⊞ SshPublicKeys UsersCreate an SSH public key
⊞ SshPublicKeys UsersDeletes an SSH public key.
⊞ SshPublicKeys UsersRetrieves an SSH public key.
⊞ SshPublicKeys UsersUpdates an SSH public key and returns the profile information. This method supports patch semantics.
Cloud Billing Budget API v1
⊞ Budgets BillingAccountsCreates a new budget. See [Quotas and limits](https://cloud.google.com/billing/quotas) for more information on the limits of the number of budgets you can create.
⊞ Budgets BillingAccountsDeletes a budget. Returns successfully if already deleted.
⊞ Budgets BillingAccountsReturns a budget. WARNING: There are some fields exposed on the Google Cloud Console that aren't available on this API. When reading from the API, you will not see these fields in the return value, though they may have been set in the Cloud Console.
⊞ Budgets BillingAccountsReturns a list of budgets for a billing account. WARNING: There are some fields exposed on the Google Cloud Console that aren't available on this API. When reading from the API, you will not see these fields in the return value, though they may have been set in the Cloud Console.
⊞ Budgets BillingAccountsUpdates a budget and returns the updated budget. WARNING: There are some fields exposed on the Google Cloud Console that aren't available on this API. Budget fields that are not exposed in this API will not be changed by this method.
App Engine Admin API v1
⊞ AuthorizedCertificates AppsUploads the specified SSL certificate.
⊞ AuthorizedCertificates AppsDeletes the specified SSL certificate.
⊞ AuthorizedCertificates AppsGets the specified SSL certificate.
⊞ AuthorizedCertificates AppsLists all SSL certificates the user is authorized to administer.
⊞ AuthorizedCertificates AppsUpdates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.
⊞ AuthorizedDomains AppsLists all domains the user is authorized to administer.
⊞ Create AppsCreates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects, Applications, and Billing (https://cloud.google.com/appengine/docs/standard/python/console/).
⊞ DomainMappings AppsMaps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
⊞ DomainMappings AppsDeletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.
⊞ DomainMappings AppsGets the specified domain mapping.
⊞ DomainMappings AppsLists the domain mappings on an application.
⊞ DomainMappings AppsUpdates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource.
⊞ Firewall AppsReplaces the entire firewall ruleset in one bulk operation. This overrides and replaces the rules of an existing firewall with the new rules.If the final rule does not match traffic with the '*' wildcard IP range, then an "allow all" rule is explicitly added to the end of the list.
⊞ Firewall AppsCreates a firewall rule for the application.
⊞ Firewall AppsDeletes the specified firewall rule.
⊞ Firewall AppsGets the specified firewall rule.
⊞ Firewall AppsLists the firewall rules of an application.
⊞ Firewall AppsUpdates the specified firewall rule.
⊞ Get AppsGets information about an application.
⊞ ListRuntimes AppsLists all the available runtimes for the application.
⊞ Locations AppsGets information about a location.
⊞ Locations AppsLists information about the supported locations for this service.
⊞ Operations AppsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations AppsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
⊞ Patch AppsUpdates the specified Application resource. You can update the following fields: auth_domain - Google authentication domain for controlling user access to the application. default_cookie_expiration - Cookie expiration policy for the application. iap - Identity-Aware Proxy properties for the application.
⊞ Repair AppsRecreates the required App Engine features for the specified App Engine application, for example a Cloud Storage bucket or App Engine service account. Use this method if you receive an error message about a missing feature, for example, Error retrieving the App Engine service account. If you have deleted your App Engine service account, this will not be able to recreate it. Instead, you should attempt to use the IAM undelete API if possible at https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/undelete?apix_params=%7B"name"%3A"projects%2F-%2FserviceAccounts%2Funique_id"%2C"resource"%3A%7B%7D%7D . If the deletion was recent, the numeric ID can be found in the Cloud Console Activity Log.
⊞ Services AppsDeletes the specified service and all enclosed versions.
⊞ Services AppsGets the current configuration of the specified service.
⊞ Services AppsLists all the services in the application.
⊞ Services AppsUpdates the configuration of the specified service.
⊞ Services AppsDeploys code and resource files to a new version.
⊞ Services AppsDeletes an existing Version resource.
⊞ Services AppsGets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource.
⊞ Services AppsEnables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable for instances in App Engine flexible environment.
⊞ Services AppsStops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
⊞ Services AppsGets instance information.
⊞ Services AppsLists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
⊞ Services AppsLists the versions of a service.
⊞ Services AppsUpdates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_cpu_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_throughput_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment: serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment: automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
Document AI Warehouse API v1
⊞ FetchAcl ProjectsGets the access control policy for a resource. Returns NOT_FOUND error if the resource does not exist. Returns an empty policy if the resource exists but does not have a policy set.
⊞ Locations ProjectsCreates a document schema.
⊞ Locations ProjectsDeletes a document schema. Returns NOT_FOUND if the document schema does not exist. Returns BAD_REQUEST if the document schema has documents depending on it.
⊞ Locations ProjectsGets a document schema. Returns NOT_FOUND if the document schema does not exist.
⊞ Locations ProjectsLists document schemas.
⊞ Locations ProjectsUpdates a Document Schema. Returns INVALID_ARGUMENT if the name of the Document Schema is non-empty and does not equal the existing name. Supports only appending new properties, adding new ENUM possible values, and updating the EnumTypeOptions.validation_check_disabled flag for ENUM possible values. Updating existing properties will result into INVALID_ARGUMENT.
⊞ Locations ProjectsCreates a document.
⊞ Locations ProjectsDeletes a document. Returns NOT_FOUND if the document does not exist.
⊞ Locations ProjectsCreate a link between a source document and a target document.
⊞ Locations ProjectsRemove the link between the source and target documents.
⊞ Locations ProjectsGets the access control policy for a resource. Returns NOT_FOUND error if the resource does not exist. Returns an empty policy if the resource exists but does not have a policy set.
⊞ Locations ProjectsGets a document. Returns NOT_FOUND if the document does not exist.
⊞ Locations ProjectsReturn all source document-links from the document.
⊞ Locations ProjectsReturn all target document-links from the document.
⊞ Locations ProjectsLock the document so the document cannot be updated by other users.
⊞ Locations ProjectsUpdates a document. Returns INVALID_ARGUMENT if the name of the document is non-empty and does not equal the existing name.
⊞ Locations ProjectsDeletes a document. Returns NOT_FOUND if the document does not exist.
⊞ Locations ProjectsGets a document. Returns NOT_FOUND if the document does not exist.
⊞ Locations ProjectsUpdates a document. Returns INVALID_ARGUMENT if the name of the document is non-empty and does not equal the existing name.
⊞ Locations ProjectsSearches for documents using provided SearchDocumentsRequest. This call only returns documents that the caller has permission to search against.
⊞ Locations ProjectsSets the access control policy for a resource. Replaces any existing policy.
⊞ Locations ProjectsGet the project status.
⊞ Locations ProjectsProvisions resources for given tenant project. Returns a long running operation.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsCreates a ruleset.
⊞ Locations ProjectsDeletes a ruleset. Returns NOT_FOUND if the document does not exist.
⊞ Locations ProjectsGets a ruleset. Returns NOT_FOUND if the ruleset does not exist.
⊞ Locations ProjectsLists rulesets.
⊞ Locations ProjectsUpdates a ruleset. Returns INVALID_ARGUMENT if the name of the ruleset is non-empty and does not equal the existing name.
⊞ Locations ProjectsRun a predefined pipeline.
⊞ Locations ProjectsCreates a SynonymSet for a single context. Throws an ALREADY_EXISTS exception if a synonymset already exists for the context.
⊞ Locations ProjectsDeletes a SynonymSet for a given context. Throws a NOT_FOUND exception if the SynonymSet is not found.
⊞ Locations ProjectsGets a SynonymSet for a particular context. Throws a NOT_FOUND exception if the Synonymset does not exist
⊞ Locations ProjectsReturns all SynonymSets (for all contexts) for the specified location.
⊞ Locations ProjectsRemove the existing SynonymSet for the context and replaces it with a new one. Throws a NOT_FOUND exception if the SynonymSet is not found.
⊞ SetAcl ProjectsSets the access control policy for a resource. Replaces any existing policy.
Google Cloud Support API v2
⊞ Search CaseClassificationsRetrieve valid classifications to use when creating a support case. Classifications are hierarchical. Each classification is a string containing all levels of the hierarchy separated by `" > "`. For example, `"Technical Issue > Compute > Compute Engine"`. Classification IDs returned by this endpoint are valid for at least six months. When a classification is deactivated, this endpoint immediately stops returning it. After six months, `case.create` requests using the classification will fail. EXAMPLES: cURL: ```shell curl \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ 'https://cloudsupport.googleapis.com/v2/caseClassifications:search?query=display_name:"*Compute%20Engine*"' ``` Python: ```python import googleapiclient.discovery supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version="v2", discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version=v2", ) request = supportApiService.caseClassifications().search( query='display_name:"*Compute Engine*"' ) print(request.execute()) ```
⊞ Attachments CasesList all the attachments associated with a support case. EXAMPLES: cURL: ```shell case="projects/some-project/cases/23598314" curl \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ "https://cloudsupport.googleapis.com/v2/$case/attachments" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = ( supportApiService.cases() .attachments() .list(parent="projects/some-project/cases/43595344") ) print(request.execute()) ```
⊞ Close CasesClose a case. EXAMPLES: cURL: ```shell case="projects/some-project/cases/43595344" curl \ --request POST \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ "https://cloudsupport.googleapis.com/v2/$case:close" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = supportApiService.cases().close( name="projects/some-project/cases/43595344" ) print(request.execute()) ```
⊞ Comments CasesAdd a new comment to a case. The comment must have the following fields set: `body`. EXAMPLES: cURL: ```shell case="projects/some-project/cases/43591344" curl \ --request POST \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ --header 'Content-Type: application/json' \ --data '{ "body": "This is a test comment." }' \ "https://cloudsupport.googleapis.com/v2/$case/comments" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = ( supportApiService.cases() .comments() .create( parent="projects/some-project/cases/43595344", body={"body": "This is a test comment."}, ) ) print(request.execute()) ```
⊞ Comments CasesList all the comments associated with a case. EXAMPLES: cURL: ```shell case="projects/some-project/cases/43595344" curl \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ "https://cloudsupport.googleapis.com/v2/$case/comments" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = ( supportApiService.cases() .comments() .list(parent="projects/some-project/cases/43595344") ) print(request.execute()) ```
⊞ Create CasesCreate a new case and associate it with a parent. It must have the following fields set: `display_name`, `description`, `classification`, and `priority`. If you're just testing the API and don't want to route your case to an agent, set `testCase=true`. EXAMPLES: cURL: ```shell parent="projects/some-project" curl \ --request POST \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ --header 'Content-Type: application/json' \ --data '{ "display_name": "Test case created by me.", "description": "a random test case, feel free to close", "classification": { "id": "100IK2AKCLHMGRJ9CDGMOCGP8DM6UTB4BT262T31BT1M2T31DHNMENPO6KS36CPJ786L2TBFEHGN6NPI64R3CDHN8880G08I1H3MURR7DHII0GRCDTQM8" }, "time_zone": "-07:00", "subscriber_email_addresses": [ "foo@domain.com", "bar@domain.com" ], "testCase": true, "priority": "P3" }' \ "https://cloudsupport.googleapis.com/v2/$parent/cases" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = supportApiService.cases().create( parent="projects/some-project", body={ "displayName": "A Test Case", "description": "This is a test case.", "testCase": True, "priority": "P2", "classification": { "id": "100IK2AKCLHMGRJ9CDGMOCGP8DM6UTB4BT262T31BT1M2T31DHNMENPO6KS36CPJ786L2TBFEHGN6NPI64R3CDHN8880G08I1H3MURR7DHII0GRCDTQM8" }, }, ) print(request.execute()) ```
⊞ Escalate CasesEscalate a case, starting the Google Cloud Support escalation management process. This operation is only available for some support services. Go to https://cloud.google.com/support and look for 'Technical support escalations' in the feature list to find out which ones let you do that. EXAMPLES: cURL: ```shell case="projects/some-project/cases/43595344" curl \ --request POST \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ --header "Content-Type: application/json" \ --data '{ "escalation": { "reason": "BUSINESS_IMPACT", "justification": "This is a test escalation." } }' \ "https://cloudsupport.googleapis.com/v2/$case:escalate" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = supportApiService.cases().escalate( name="projects/some-project/cases/43595344", body={ "escalation": { "reason": "BUSINESS_IMPACT", "justification": "This is a test escalation.", }, }, ) print(request.execute()) ```
⊞ Get CasesRetrieve a case. EXAMPLES: cURL: ```shell case="projects/some-project/cases/16033687" curl \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ "https://cloudsupport.googleapis.com/v2/$case" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = supportApiService.cases().get( name="projects/some-project/cases/43595344", ) print(request.execute()) ```
⊞ List CasesRetrieve all cases under a parent, but not its children. For example, listing cases under an organization only returns the cases that are directly parented by that organization. To retrieve cases under an organization and its projects, use `cases.search`. EXAMPLES: cURL: ```shell parent="projects/some-project" curl \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ "https://cloudsupport.googleapis.com/v2/$parent/cases" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = supportApiService.cases().list(parent="projects/some-project") print(request.execute()) ```
⊞ Patch CasesUpdate a case. Only some fields can be updated. EXAMPLES: cURL: ```shell case="projects/some-project/cases/43595344" curl \ --request PATCH \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ --header "Content-Type: application/json" \ --data '{ "priority": "P1" }' \ "https://cloudsupport.googleapis.com/v2/$case?updateMask=priority" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = supportApiService.cases().patch( name="projects/some-project/cases/43112854", body={ "displayName": "This is Now a New Title", "priority": "P2", }, ) print(request.execute()) ```
⊞ Search CasesSearch for cases using a query. EXAMPLES: cURL: ```shell parent="projects/some-project" curl \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ "https://cloudsupport.googleapis.com/v2/$parent/cases:search" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = supportApiService.cases().search( parent="projects/some-project", query="state=OPEN" ) print(request.execute()) ```
⊞ Download MediaDownload a file attached to a case. Note: HTTP requests must append "?alt=media" to the URL. EXAMPLES: cURL: ```shell name="projects/some-project/cases/43594844/attachments/0674M00000WijAnZAJ" curl \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ "https://cloudsupport.googleapis.com/v2/$name:download?alt=media" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) request = supportApiService.media().download( name="projects/some-project/cases/43595344/attachments/0684M00000Pw6pHQAR" ) request.uri = request.uri.split("?")[0] + "?alt=media" print(request.execute()) ```
⊞ Upload MediaCreate a file attachment on a case or Cloud resource. The attachment must have the following fields set: `filename`. EXAMPLES: cURL: ```shell echo "This text is in a file I'm uploading using CSAPI." \ > "./example_file.txt" case="projects/some-project/cases/43594844" curl \ --header "Authorization: Bearer $(gcloud auth print-access-token)" \ --data-binary @"./example_file.txt" \ "https://cloudsupport.googleapis.com/upload/v2beta/$case/attachments?attachment.filename=uploaded_via_curl.txt" ``` Python: ```python import googleapiclient.discovery api_version = "v2" supportApiService = googleapiclient.discovery.build( serviceName="cloudsupport", version=api_version, discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}", ) file_path = "./example_file.txt" with open(file_path, "w") as file: file.write( "This text is inside a file I'm going to upload using the Cloud Support API.", ) request = supportApiService.media().upload( parent="projects/some-project/cases/43595344", media_body=file_path ) request.uri = request.uri.split("?")[0] + "?attachment.filename=uploaded_via_python.txt" print(request.execute()) ```
Cloud Build API v2
⊞ Locations ProjectsCreates a Connection.
⊞ Locations ProjectsDeletes a single connection.
⊞ Locations ProjectsFetchLinkableRepositories get repositories from SCM that are accessible and could be added to the connection.
⊞ Locations ProjectsGets details of a single connection.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Connections in a given project and location.
⊞ Locations ProjectsUpdates a single connection.
⊞ Locations ProjectsFetches read token of a given repository.
⊞ Locations ProjectsFetches read/write token of a given repository.
⊞ Locations ProjectsCreates multiple repositories inside a connection.
⊞ Locations ProjectsCreates a Repository.
⊞ Locations ProjectsDeletes a single repository.
⊞ Locations ProjectsFetch the list of branches or tags for a given repository.
⊞ Locations ProjectsGets details of a single repository.
⊞ Locations ProjectsLists Repositories in a given connection.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
Cloud IDS API v1
⊞ Locations ProjectsCreates a new Endpoint in a given project and location.
⊞ Locations ProjectsDeletes a single Endpoint.
⊞ Locations ProjectsGets details of a single Endpoint.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Endpoints in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Endpoint.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Cloud Run Admin API v2
⊞ Locations ProjectsCreates a Job.
⊞ Locations ProjectsDeletes a Job.
⊞ Locations ProjectsCancels an Execution.
⊞ Locations ProjectsDeletes an Execution.
⊞ Locations ProjectsGets information about an Execution.
⊞ Locations ProjectsLists Executions from a Job.
⊞ Locations ProjectsGets information about a Task.
⊞ Locations ProjectsLists Tasks from an Execution of a Job.
⊞ Locations ProjectsGets information about a Job.
⊞ Locations ProjectsGets the IAM Access Control policy currently in effect for the given Job. This result does not include any inherited policies.
⊞ Locations ProjectsLists Jobs.
⊞ Locations ProjectsUpdates a Job.
⊞ Locations ProjectsTriggers creation of a new Execution of this Job.
⊞ Locations ProjectsSets the IAM Access control policy for the specified Job. Overwrites any existing policy.
⊞ Locations ProjectsReturns permissions that a caller has on the specified Project. There are no permissions required for making this API call.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsCreates a new Service in a given project and location.
⊞ Locations ProjectsDeletes a Service. This will cause the Service to stop serving traffic and will delete all revisions.
⊞ Locations ProjectsGets information about a Service.
⊞ Locations ProjectsGets the IAM Access Control policy currently in effect for the given Cloud Run Service. This result does not include any inherited policies.
⊞ Locations ProjectsLists Services.
⊞ Locations ProjectsUpdates a Service.
⊞ Locations ProjectsDeletes a Revision.
⊞ Locations ProjectsGets information about a Revision.
⊞ Locations ProjectsLists Revisions from a given Service, or from a given location.
⊞ Locations ProjectsSets the IAM Access control policy for the specified Service. Overwrites any existing policy.
⊞ Locations ProjectsReturns permissions that a caller has on the specified Project. There are no permissions required for making this API call.
Vertex AI API v1
⊞ Locations ProjectsCancels a BatchPredictionJob. Starts asynchronous cancellation on the BatchPredictionJob. The server makes the best effort to cancel the job, but success is not guaranteed. Clients can use JobService.GetBatchPredictionJob or other methods to check whether the cancellation succeeded or whether the job completed despite cancellation. On a successful cancellation, the BatchPredictionJob is not deleted;instead its BatchPredictionJob.state is set to `CANCELLED`. Any files already outputted by the job are not deleted.
⊞ Locations ProjectsCreates a BatchPredictionJob. A BatchPredictionJob once created will right away be attempted to start.
⊞ Locations ProjectsDeletes a BatchPredictionJob. Can only be called on jobs that already finished.
⊞ Locations ProjectsGets a BatchPredictionJob
⊞ Locations ProjectsLists BatchPredictionJobs in a Location.
⊞ Locations ProjectsCancels a CustomJob. Starts asynchronous cancellation on the CustomJob. The server makes a best effort to cancel the job, but success is not guaranteed. Clients can use JobService.GetCustomJob or other methods to check whether the cancellation succeeded or whether the job completed despite cancellation. On successful cancellation, the CustomJob is not deleted; instead it becomes a job with a CustomJob.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`, and CustomJob.state is set to `CANCELLED`.
⊞ Locations ProjectsCreates a CustomJob. A created CustomJob right away will be attempted to be run.
⊞ Locations ProjectsDeletes a CustomJob.
⊞ Locations ProjectsGets a CustomJob.
⊞ Locations ProjectsLists CustomJobs in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsCancels a DataLabelingJob. Success of cancellation is not guaranteed.
⊞ Locations ProjectsCreates a DataLabelingJob.
⊞ Locations ProjectsDeletes a DataLabelingJob.
⊞ Locations ProjectsGets a DataLabelingJob.
⊞ Locations ProjectsLists DataLabelingJobs in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsGets an AnnotationSpec.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsCreates a Dataset.
⊞ Locations ProjectsLists Annotations belongs to a dataitem
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsLists DataItems in a Dataset.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsCreate a version from a Dataset.
⊞ Locations ProjectsDeletes a Dataset version.
⊞ Locations ProjectsGets a Dataset version.
⊞ Locations ProjectsLists DatasetVersions in a Dataset.
⊞ Locations ProjectsRestores a dataset version.
⊞ Locations ProjectsDeletes a Dataset.
⊞ Locations ProjectsExports data from a Dataset.
⊞ Locations ProjectsGets a Dataset.
⊞ Locations ProjectsImports data into a Dataset.
⊞ Locations ProjectsLists Datasets in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates a Dataset.
⊞ Locations ProjectsDeletes a SavedQuery.
⊞ Locations ProjectsLists SavedQueries in a Dataset.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsSearches DataItems in a Dataset.
⊞ Locations ProjectsCreate a DeploymentResourcePool.
⊞ Locations ProjectsDelete a DeploymentResourcePool.
⊞ Locations ProjectsGet a DeploymentResourcePool.
⊞ Locations ProjectsList DeploymentResourcePools in a location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsList DeployedModels that have been deployed on this DeploymentResourcePool.
⊞ Locations ProjectsReturn a list of tokens based on the input text.
⊞ Locations ProjectsPerform a token counting.
⊞ Locations ProjectsCreates an Endpoint.
⊞ Locations ProjectsDeletes an Endpoint.
⊞ Locations ProjectsDeploys a Model into this Endpoint, creating a DeployedModel within it.
⊞ Locations ProjectsPerform an online explanation. If deployed_model_id is specified, the corresponding DeployModel must have explanation_spec populated. If deployed_model_id is not specified, all DeployedModels must have explanation_spec populated.
⊞ Locations ProjectsGets an Endpoint.
⊞ Locations ProjectsLists Endpoints in a Location.
⊞ Locations ProjectsUpdates an existing deployed model. Updatable fields include `min_replica_count`, `max_replica_count`, `autoscaling_metric_specs`, `disable_container_logging` (v1 only), and `enable_container_logging` (v1beta1 only).
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates an Endpoint.
⊞ Locations ProjectsPerform an online prediction.
⊞ Locations ProjectsPerform an online prediction with an arbitrary HTTP payload. The response includes the following HTTP headers: * `X-Vertex-AI-Endpoint-Id`: ID of the Endpoint that served this prediction. * `X-Vertex-AI-Deployed-Model-Id`: ID of the Endpoint's DeployedModel that served this prediction.
⊞ Locations ProjectsPerform a server-side streaming online prediction request for Vertex LLM streaming.
⊞ Locations ProjectsUndeploys a Model from an Endpoint, removing a DeployedModel from it, and freeing all resources it's using.
⊞ Locations ProjectsCreates a new FeatureGroup in a given project and location.
⊞ Locations ProjectsDeletes a single FeatureGroup.
⊞ Locations ProjectsCreates a new Feature in a given FeatureGroup.
⊞ Locations ProjectsDeletes a single Feature.
⊞ Locations ProjectsGets details of a single Feature.
⊞ Locations ProjectsLists Features in a given FeatureGroup.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates the parameters of a single Feature.
⊞ Locations ProjectsGets details of a single FeatureGroup.
⊞ Locations ProjectsLists FeatureGroups in a given project and location.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates the parameters of a single FeatureGroup.
⊞ Locations ProjectsCreates a new FeatureOnlineStore in a given project and location.
⊞ Locations ProjectsDeletes a single FeatureOnlineStore. The FeatureOnlineStore must not contain any FeatureViews.
⊞ Locations ProjectsCreates a new FeatureView in a given FeatureOnlineStore.
⊞ Locations ProjectsDeletes a single FeatureView.
⊞ Locations ProjectsGets details of a single FeatureViewSync.
⊞ Locations ProjectsLists FeatureViewSyncs in a given FeatureView.
⊞ Locations ProjectsFetch feature values under a FeatureView.
⊞ Locations ProjectsGets details of a single FeatureView.
⊞ Locations ProjectsLists FeatureViews in a given FeatureOnlineStore.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates the parameters of a single FeatureView.
⊞ Locations ProjectsTriggers on-demand sync for the FeatureView.
⊞ Locations ProjectsGets details of a single FeatureOnlineStore.
⊞ Locations ProjectsLists FeatureOnlineStores in a given project and location.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates the parameters of a single FeatureOnlineStore.
⊞ Locations ProjectsBatch reads Feature values from a Featurestore. This API enables batch reading Feature values, where each read instance in the batch may read Feature values of entities from one or more EntityTypes. Point-in-time correctness is guaranteed for Feature values of each read instance as of each instance's read timestamp.
⊞ Locations ProjectsCreates a new Featurestore in a given project and location.
⊞ Locations ProjectsDeletes a single Featurestore. The Featurestore must not contain any EntityTypes or `force` must be set to true for the request to succeed.
⊞ Locations ProjectsCreates a new EntityType in a given Featurestore.
⊞ Locations ProjectsDeletes a single EntityType. The EntityType must not have any Features or `force` must be set to true for the request to succeed.
⊞ Locations ProjectsDelete Feature values from Featurestore. The progress of the deletion is tracked by the returned operation. The deleted feature values are guaranteed to be invisible to subsequent read operations after the operation is marked as successfully done. If a delete feature values operation fails, the feature values returned from reads and exports may be inconsistent. If consistency is required, the caller must retry the same delete request again and wait till the new operation returned is marked as successfully done.
⊞ Locations ProjectsExports Feature values from all the entities of a target EntityType.
⊞ Locations ProjectsCreates a batch of Features in a given EntityType.
⊞ Locations ProjectsCreates a new Feature in a given EntityType.
⊞ Locations ProjectsDeletes a single Feature.
⊞ Locations ProjectsGets details of a single Feature.
⊞ Locations ProjectsLists Features in a given EntityType.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates the parameters of a single Feature.
⊞ Locations ProjectsGets details of a single EntityType.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsImports Feature values into the Featurestore from a source storage. The progress of the import is tracked by the returned operation. The imported features are guaranteed to be visible to subsequent read operations after the operation is marked as successfully done. If an import operation fails, the Feature values returned from reads and exports may be inconsistent. If consistency is required, the caller must retry the same import request again and wait till the new operation returned is marked as successfully done. There are also scenarios where the caller can cause inconsistency. - Source data for import contains multiple distinct Feature values for the same entity ID and timestamp. - Source is modified during an import. This includes adding, updating, or removing source data and/or metadata. Examples of updating metadata include but are not limited to changing storage location, storage class, or retention policy. - Online serving cluster is under-provisioned.
⊞ Locations ProjectsLists EntityTypes in a given Featurestore.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates the parameters of a single EntityType.
⊞ Locations ProjectsReads Feature values of a specific entity of an EntityType. For reading feature values of multiple entities of an EntityType, please use StreamingReadFeatureValues.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReads Feature values for multiple entities. Depending on their size, data for different entities may be broken up across multiple responses.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsWrites Feature values of one or more entities of an EntityType. The Feature values are merged into existing entities if any. The Feature values to be written must have timestamp within the online storage retention.
⊞ Locations ProjectsGets details of a single Featurestore.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Featurestores in a given project and location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates the parameters of a single Featurestore.
⊞ Locations ProjectsSearches Features matching a query in a given project.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsCancels a HyperparameterTuningJob. Starts asynchronous cancellation on the HyperparameterTuningJob. The server makes a best effort to cancel the job, but success is not guaranteed. Clients can use JobService.GetHyperparameterTuningJob or other methods to check whether the cancellation succeeded or whether the job completed despite cancellation. On successful cancellation, the HyperparameterTuningJob is not deleted; instead it becomes a job with a HyperparameterTuningJob.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`, and HyperparameterTuningJob.state is set to `CANCELLED`.
⊞ Locations ProjectsCreates a HyperparameterTuningJob
⊞ Locations ProjectsDeletes a HyperparameterTuningJob.
⊞ Locations ProjectsGets a HyperparameterTuningJob
⊞ Locations ProjectsLists HyperparameterTuningJobs in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsCreates an IndexEndpoint.
⊞ Locations ProjectsDeletes an IndexEndpoint.
⊞ Locations ProjectsDeploys an Index into this IndexEndpoint, creating a DeployedIndex within it. Only non-empty Indexes can be deployed.
⊞ Locations ProjectsFinds the nearest neighbors of each vector within the request.
⊞ Locations ProjectsGets an IndexEndpoint.
⊞ Locations ProjectsLists IndexEndpoints in a Location.
⊞ Locations ProjectsUpdate an existing DeployedIndex under an IndexEndpoint.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates an IndexEndpoint.
⊞ Locations ProjectsReads the datapoints/vectors of the given IDs. A maximum of 1000 datapoints can be retrieved in a batch.
⊞ Locations ProjectsUndeploys an Index from an IndexEndpoint, removing a DeployedIndex from it, and freeing all resources it's using.
⊞ Locations ProjectsCreates an Index.
⊞ Locations ProjectsDeletes an Index. An Index can only be deleted when all its DeployedIndexes had been undeployed.
⊞ Locations ProjectsGets an Index.
⊞ Locations ProjectsLists Indexes in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates an Index.
⊞ Locations ProjectsRemove Datapoints from an Index.
⊞ Locations ProjectsAdd/update Datapoints into an Index.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates an Artifact associated with a MetadataStore.
⊞ Locations ProjectsDeletes an Artifact.
⊞ Locations ProjectsRetrieves a specific Artifact.
⊞ Locations ProjectsLists Artifacts in the MetadataStore.
⊞ Locations ProjectsUpdates a stored Artifact.
⊞ Locations ProjectsPurges Artifacts.
⊞ Locations ProjectsRetrieves lineage of an Artifact represented through Artifacts and Executions connected by Event edges and returned as a LineageSubgraph.
⊞ Locations ProjectsAdds a set of Artifacts and Executions to a Context. If any of the Artifacts or Executions have already been added to a Context, they are simply skipped.
⊞ Locations ProjectsAdds a set of Contexts as children to a parent Context. If any of the child Contexts have already been added to the parent Context, they are simply skipped. If this call would create a cycle or cause any Context to have more than 10 parents, the request will fail with an INVALID_ARGUMENT error.
⊞ Locations ProjectsCreates a Context associated with a MetadataStore.
⊞ Locations ProjectsDeletes a stored Context.
⊞ Locations ProjectsRetrieves a specific Context.
⊞ Locations ProjectsLists Contexts on the MetadataStore.
⊞ Locations ProjectsUpdates a stored Context.
⊞ Locations ProjectsPurges Contexts.
⊞ Locations ProjectsRetrieves Artifacts and Executions within the specified Context, connected by Event edges and returned as a LineageSubgraph.
⊞ Locations ProjectsRemove a set of children contexts from a parent Context. If any of the child Contexts were NOT added to the parent Context, they are simply skipped.
⊞ Locations ProjectsInitializes a MetadataStore, including allocation of resources.
⊞ Locations ProjectsDeletes a single MetadataStore and all its child resources (Artifacts, Executions, and Contexts).
⊞ Locations ProjectsAdds Events to the specified Execution. An Event indicates whether an Artifact was used as an input or output for an Execution. If an Event already exists between the Execution and the Artifact, the Event is skipped.
⊞ Locations ProjectsCreates an Execution associated with a MetadataStore.
⊞ Locations ProjectsDeletes an Execution.
⊞ Locations ProjectsRetrieves a specific Execution.
⊞ Locations ProjectsLists Executions in the MetadataStore.
⊞ Locations ProjectsUpdates a stored Execution.
⊞ Locations ProjectsPurges Executions.
⊞ Locations ProjectsObtains the set of input and output Artifacts for this Execution, in the form of LineageSubgraph that also contains the Execution and connecting Events.
⊞ Locations ProjectsRetrieves a specific MetadataStore.
⊞ Locations ProjectsLists MetadataStores for a Location.
⊞ Locations ProjectsCreates a MetadataSchema.
⊞ Locations ProjectsRetrieves a specific MetadataSchema.
⊞ Locations ProjectsLists MetadataSchemas.
⊞ Locations ProjectsBatch migrates resources from ml.googleapis.com, automl.googleapis.com, and datalabeling.googleapis.com to Vertex AI.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsSearches all of the resources in automl.googleapis.com, datalabeling.googleapis.com and ml.googleapis.com that can be migrated to Vertex AI's given location.
⊞ Locations ProjectsCreates a ModelDeploymentMonitoringJob. It will run periodically on a configured interval.
⊞ Locations ProjectsDeletes a ModelDeploymentMonitoringJob.
⊞ Locations ProjectsGets a ModelDeploymentMonitoringJob.
⊞ Locations ProjectsLists ModelDeploymentMonitoringJobs in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates a ModelDeploymentMonitoringJob.
⊞ Locations ProjectsPauses a ModelDeploymentMonitoringJob. If the job is running, the server makes a best effort to cancel the job. Will mark ModelDeploymentMonitoringJob.state to 'PAUSED'.
⊞ Locations ProjectsResumes a paused ModelDeploymentMonitoringJob. It will start to run from next scheduled time. A deleted ModelDeploymentMonitoringJob can't be resumed.
⊞ Locations ProjectsSearches Model Monitoring Statistics generated within a given time window.
⊞ Locations ProjectsCopies an already existing Vertex AI Model into the specified Location. The source Model must exist in the same Project. When copying custom Models, the users themselves are responsible for Model.metadata content to be region-agnostic, as well as making sure that any resources (e.g. files) it depends on remain accessible.
⊞ Locations ProjectsDeletes a Model. A model cannot be deleted if any Endpoint resource has a DeployedModel based on the model in its deployed_models field.
⊞ Locations ProjectsDeletes a Model version. Model version can only be deleted if there are no DeployedModels created from it. Deleting the only version in the Model is not allowed. Use DeleteModel for deleting the Model instead.
⊞ Locations ProjectsGets a ModelEvaluation.
⊞ Locations ProjectsImports an externally generated ModelEvaluation.
⊞ Locations ProjectsLists ModelEvaluations in a Model.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsImports a list of externally generated EvaluatedAnnotations.
⊞ Locations ProjectsGets a ModelEvaluationSlice.
⊞ Locations ProjectsLists ModelEvaluationSlices in a ModelEvaluation.
⊞ Locations ProjectsExports a trained, exportable Model to a location specified by the user. A Model is considered to be exportable if it has at least one supported export format.
⊞ Locations ProjectsGets a Model.
⊞ Locations ProjectsLists Models in a Location.
⊞ Locations ProjectsLists versions of the specified model.
⊞ Locations ProjectsMerges a set of aliases for a Model version.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates a Model.
⊞ Locations ProjectsIncrementally update the dataset used for an examples model.
⊞ Locations ProjectsUploads a Model artifact into Vertex AI.
⊞ Locations ProjectsCancels a NasJob. Starts asynchronous cancellation on the NasJob. The server makes a best effort to cancel the job, but success is not guaranteed. Clients can use JobService.GetNasJob or other methods to check whether the cancellation succeeded or whether the job completed despite cancellation. On successful cancellation, the NasJob is not deleted; instead it becomes a job with a NasJob.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`, and NasJob.state is set to `CANCELLED`.
⊞ Locations ProjectsCreates a NasJob
⊞ Locations ProjectsDeletes a NasJob.
⊞ Locations ProjectsGets a NasJob
⊞ Locations ProjectsLists NasJobs in a Location.
⊞ Locations ProjectsGets a NasTrialDetail.
⊞ Locations ProjectsList top NasTrialDetails of a NasJob.
⊞ Locations ProjectsCreates a NotebookRuntimeTemplate.
⊞ Locations ProjectsDeletes a NotebookRuntimeTemplate.
⊞ Locations ProjectsGets a NotebookRuntimeTemplate.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists NotebookRuntimeTemplates in a Location.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsAssigns a NotebookRuntime to a user for a particular Notebook file. This method will either returns an existing assignment or generates a new one.
⊞ Locations ProjectsDeletes a NotebookRuntime.
⊞ Locations ProjectsGets a NotebookRuntime.
⊞ Locations ProjectsLists NotebookRuntimes in a Location.
⊞ Locations ProjectsStarts a NotebookRuntime.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsCancels a PipelineJob. Starts asynchronous cancellation on the PipelineJob. The server makes a best effort to cancel the pipeline, but success is not guaranteed. Clients can use PipelineService.GetPipelineJob or other methods to check whether the cancellation succeeded or whether the pipeline completed despite cancellation. On successful cancellation, the PipelineJob is not deleted; instead it becomes a pipeline with a PipelineJob.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`, and PipelineJob.state is set to `CANCELLED`.
⊞ Locations ProjectsCreates a PipelineJob. A PipelineJob will run immediately when created.
⊞ Locations ProjectsDeletes a PipelineJob.
⊞ Locations ProjectsGets a PipelineJob.
⊞ Locations ProjectsLists PipelineJobs in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsReturn a list of tokens based on the input text.
⊞ Locations ProjectsPerform a token counting.
⊞ Locations ProjectsPerform an online prediction.
⊞ Locations ProjectsPerform an online prediction with an arbitrary HTTP payload. The response includes the following HTTP headers: * `X-Vertex-AI-Endpoint-Id`: ID of the Endpoint that served this prediction. * `X-Vertex-AI-Deployed-Model-Id`: ID of the Endpoint's DeployedModel that served this prediction.
⊞ Locations ProjectsPerform a server-side streaming online prediction request for Vertex LLM streaming.
⊞ Locations ProjectsCreates a Schedule.
⊞ Locations ProjectsDeletes a Schedule.
⊞ Locations ProjectsGets a Schedule.
⊞ Locations ProjectsLists Schedules in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates an active or paused Schedule. When the Schedule is updated, new runs will be scheduled starting from the updated next execution time after the update time based on the time_specification in the updated Schedule. All unstarted runs before the update time will be skipped while already created runs will NOT be paused or canceled.
⊞ Locations ProjectsPauses a Schedule. Will mark Schedule.state to 'PAUSED'. If the schedule is paused, no new runs will be created. Already created runs will NOT be paused or canceled.
⊞ Locations ProjectsResumes a paused Schedule to start scheduling new runs. Will mark Schedule.state to 'ACTIVE'. Only paused Schedule can be resumed. When the Schedule is resumed, new runs will be scheduled starting from the next execution time after the current time based on the time_specification in the Schedule. If Schedule.catchUp is set up true, all missed runs will be scheduled for backfill first.
⊞ Locations ProjectsCreates a SpecialistPool.
⊞ Locations ProjectsDeletes a SpecialistPool as well as all Specialists in the pool.
⊞ Locations ProjectsGets a SpecialistPool.
⊞ Locations ProjectsLists SpecialistPools in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates a SpecialistPool.
⊞ Locations ProjectsCreates a Study. A resource name will be generated after creation of the Study.
⊞ Locations ProjectsDeletes a Study.
⊞ Locations ProjectsGets a Study by name.
⊞ Locations ProjectsLists all the studies in a region for an associated project.
⊞ Locations ProjectsLooks a study up using the user-defined display_name field instead of the fully qualified resource name.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsAdds a measurement of the objective metrics to a Trial. This measurement is assumed to have been taken before the Trial is complete.
⊞ Locations ProjectsChecks whether a Trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse.
⊞ Locations ProjectsMarks a Trial as complete.
⊞ Locations ProjectsAdds a user provided Trial to a Study.
⊞ Locations ProjectsDeletes a Trial.
⊞ Locations ProjectsGets a Trial.
⊞ Locations ProjectsLists the Trials associated with a Study.
⊞ Locations ProjectsLists the pareto-optimal Trials for multi-objective Study or the optimal Trials for single-objective Study. The definition of pareto-optimal can be checked in wiki page. https://en.wikipedia.org/wiki/Pareto_efficiency
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsStops a Trial.
⊞ Locations ProjectsAdds one or more Trials to a Study, with parameter values suggested by Vertex AI Vizier. Returns a long-running operation associated with the generation of Trial suggestions. When this long-running operation succeeds, it will contain a SuggestTrialsResponse.
⊞ Locations ProjectsCreates a Tensorboard.
⊞ Locations ProjectsDeletes a Tensorboard.
⊞ Locations ProjectsCreates a TensorboardExperiment.
⊞ Locations ProjectsDeletes a TensorboardExperiment.
⊞ Locations ProjectsGets a TensorboardExperiment.
⊞ Locations ProjectsLists TensorboardExperiments in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates a TensorboardExperiment.
⊞ Locations ProjectsBatch create TensorboardRuns.
⊞ Locations ProjectsCreates a TensorboardRun.
⊞ Locations ProjectsDeletes a TensorboardRun.
⊞ Locations ProjectsGets a TensorboardRun.
⊞ Locations ProjectsLists TensorboardRuns in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates a TensorboardRun.
⊞ Locations ProjectsBatch create TensorboardTimeSeries that belong to a TensorboardExperiment.
⊞ Locations ProjectsReads multiple TensorboardTimeSeries' data. The data point number limit is 1000 for scalars, 100 for tensors and blob references. If the number of data points stored is less than the limit, all data is returned. Otherwise, the number limit of data points is randomly selected from this time series and returned.
⊞ Locations ProjectsCreates a TensorboardTimeSeries.
⊞ Locations ProjectsDeletes a TensorboardTimeSeries.
⊞ Locations ProjectsExports a TensorboardTimeSeries' data. Data is returned in paginated responses.
⊞ Locations ProjectsGets a TensorboardTimeSeries.
⊞ Locations ProjectsLists TensorboardTimeSeries in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates a TensorboardTimeSeries.
⊞ Locations ProjectsReads a TensorboardTimeSeries' data. By default, if the number of data points stored is less than 1000, all data is returned. Otherwise, 1000 data points is randomly selected from this time series and returned. This value can be changed by changing max_data_points, which can't be greater than 10k.
⊞ Locations ProjectsGets bytes of TensorboardBlobs. This is to allow reading blob data stored in consumer project's Cloud Storage bucket without users having to obtain Cloud Storage access permission.
⊞ Locations ProjectsWrite time series data points into multiple TensorboardTimeSeries under a TensorboardRun. If any data fail to be ingested, an error is returned.
⊞ Locations ProjectsWrite time series data points of multiple TensorboardTimeSeries in multiple TensorboardRun's. If any data fail to be ingested, an error is returned.
⊞ Locations ProjectsGets a Tensorboard.
⊞ Locations ProjectsLists Tensorboards in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsUpdates a Tensorboard.
⊞ Locations ProjectsReturns the storage size for a given TensorBoard instance.
⊞ Locations ProjectsReturns a list of monthly active users for a given TensorBoard instance.
⊞ Locations ProjectsCancels a TrainingPipeline. Starts asynchronous cancellation on the TrainingPipeline. The server makes a best effort to cancel the pipeline, but success is not guaranteed. Clients can use PipelineService.GetTrainingPipeline or other methods to check whether the cancellation succeeded or whether the pipeline completed despite cancellation. On successful cancellation, the TrainingPipeline is not deleted; instead it becomes a pipeline with a TrainingPipeline.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`, and TrainingPipeline.state is set to `CANCELLED`.
⊞ Locations ProjectsCreates a TrainingPipeline. A created TrainingPipeline right away will be attempted to be run.
⊞ Locations ProjectsDeletes a TrainingPipeline.
⊞ Locations ProjectsGets a TrainingPipeline.
⊞ Locations ProjectsLists TrainingPipelines in a Location.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Models PublishersGets a Model Garden publisher model.
BigQuery API v2
⊞ Delete DatasetsDeletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying deleteContents. Immediately after deletion, you can create another dataset with the same name.
⊞ Get DatasetsReturns the dataset specified by datasetID.
⊞ Insert DatasetsCreates a new empty dataset.
⊞ List DatasetsLists all datasets in the specified project to which you have been granted the READER dataset role.
⊞ Patch DatasetsUpdates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource. This method supports patch semantics.
⊞ Update DatasetsUpdates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource.
⊞ Cancel JobsRequests that a job be cancelled. This call will return immediately, and the client will need to poll for the job status to see if the cancel completed successfully. Cancelled jobs may still incur costs.
⊞ Delete JobsRequests the deletion of the metadata of a job. This call returns when the job's metadata is deleted.
⊞ Get JobsReturns information about a specific job. Job information is available for a six month period after creation. Requires that you're the person who ran the job, or have the Is Owner project role.
⊞ GetQueryResults JobsRetrieves the results of a query job.
⊞ Insert JobsStarts a new asynchronous job. Requires the Can View project role.
⊞ List JobsLists all jobs that you started in the specified project. Job information is available for a six month period after creation. The job list is sorted in reverse chronological order, by job creation time. Requires the Can View project role, or the Is Owner project role if you set the allUsers property.
⊞ Query JobsRuns a BigQuery SQL query synchronously and returns query results if the query completes within a specified timeout.
⊞ Delete ModelsDeletes the model specified by modelId from the dataset.
⊞ Get ModelsGets the specified model resource by model ID.
⊞ List ModelsLists all models in the specified dataset. Requires the READER dataset role. After retrieving the list of models, you can get information about a particular model by calling the models.get method.
⊞ Patch ModelsPatch specific fields in the specified model.
⊞ GetServiceAccount ProjectsReturns the email address of the service account for your project used for interactions with Google Cloud KMS.
⊞ List ProjectsLists all projects to which you have been granted any project role.
⊞ Delete RoutinesDeletes the routine specified by routineId from the dataset.
⊞ Get RoutinesGets the specified routine resource by routine ID.
⊞ Insert RoutinesCreates a new routine in the dataset.
⊞ List RoutinesLists all routines in the specified dataset. Requires the READER dataset role.
⊞ Update RoutinesUpdates information in an existing routine. The update method replaces the entire Routine resource.
⊞ GetIamPolicy RowAccessPoliciesGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ List RowAccessPoliciesLists all row access policies on the specified table.
⊞ TestIamPermissions RowAccessPoliciesReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ InsertAll TabledataStreams data into BigQuery one record at a time without needing to run a load job. Requires the WRITER dataset role.
⊞ List TabledataRetrieves table data from a specified set of rows. Requires the READER dataset role.
⊞ Delete TablesDeletes the table specified by tableId from the dataset. If the table contains data, all the data will be deleted.
⊞ Get TablesGets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table.
⊞ GetIamPolicy TablesGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Insert TablesCreates a new, empty table in the dataset.
⊞ List TablesLists all tables in the specified dataset. Requires the READER dataset role.
⊞ Patch TablesUpdates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource. This method supports patch semantics.
⊞ SetIamPolicy TablesSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ TestIamPermissions TablesReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Update TablesUpdates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource.
Cloud Storage for Firebase API v1beta
⊞ Buckets ProjectsLinks a Google Cloud Storage bucket to a Firebase project.
⊞ Buckets ProjectsGets a single linked storage bucket.
⊞ Buckets ProjectsLists the linked storage buckets for a project.
⊞ Buckets ProjectsUnlinks a linked Google Cloud Storage bucket from a Firebase project.
Data Labeling API v1beta1
⊞ AnnotationSpecSets ProjectsCreates an annotation spec set by providing a set of labels.
⊞ AnnotationSpecSets ProjectsDeletes an annotation spec set by resource name.
⊞ AnnotationSpecSets ProjectsGets an annotation spec set by resource name.
⊞ AnnotationSpecSets ProjectsLists annotation spec sets for a project. Pagination is supported.
⊞ Datasets ProjectsGets a data item in a dataset by resource name. This API can be called after data are imported into dataset.
⊞ Datasets ProjectsLists data items in a dataset. This API can be called after data are imported into dataset. Pagination is supported.
⊞ Datasets ProjectsDeletes an annotated dataset by resource name.
⊞ Datasets ProjectsGets an example by resource name, including both data and annotation.
⊞ Datasets ProjectsLists examples in an annotated dataset. Pagination is supported.
⊞ Datasets ProjectsDelete a FeedbackThread.
⊞ Datasets ProjectsCreate a FeedbackMessage object.
⊞ Datasets ProjectsDelete a FeedbackMessage.
⊞ Datasets ProjectsGet a FeedbackMessage object.
⊞ Datasets ProjectsList FeedbackMessages with pagination.
⊞ Datasets ProjectsGet a FeedbackThread object.
⊞ Datasets ProjectsList FeedbackThreads with pagination.
⊞ Datasets ProjectsGets an annotated dataset by resource name.
⊞ Datasets ProjectsLists annotated datasets for a dataset. Pagination is supported.
⊞ Datasets ProjectsCreates dataset. If success return a Dataset resource.
⊞ Datasets ProjectsGets a data item in a dataset by resource name. This API can be called after data are imported into dataset.
⊞ Datasets ProjectsLists data items in a dataset. This API can be called after data are imported into dataset. Pagination is supported.
⊞ Datasets ProjectsDeletes a dataset by resource name.
⊞ Datasets ProjectsSearches example comparisons from an evaluation. The return format is a list of example comparisons that show ground truth and prediction(s) for a single input. Search by providing an evaluation ID.
⊞ Datasets ProjectsGets an evaluation by resource name (to search, use projects.evaluations.search).
⊞ Datasets ProjectsExports data and annotations from dataset.
⊞ Datasets ProjectsGets dataset by resource name.
⊞ Datasets ProjectsStarts a labeling task for image. The type of image labeling task is configured by feature in the request.
⊞ Datasets ProjectsImports data into dataset based on source locations defined in request. It can be called multiple times for the same dataset. Each dataset can only have one long running operation running on it. For example, no labeling task (also long running operation) can be started while importing is still ongoing. Vice versa.
⊞ Datasets ProjectsLists datasets under a project. Pagination is supported.
⊞ Datasets ProjectsStarts a labeling task for text. The type of text labeling task is configured by feature in the request.
⊞ Datasets ProjectsStarts a labeling task for video. The type of video labeling task is configured by feature in the request.
⊞ EvaluationJobs ProjectsCreates an evaluation job.
⊞ EvaluationJobs ProjectsStops and deletes an evaluation job.
⊞ EvaluationJobs ProjectsGets an evaluation job by resource name.
⊞ EvaluationJobs ProjectsLists all evaluation jobs within a project with possible filters. Pagination is supported.
⊞ EvaluationJobs ProjectsUpdates an evaluation job. You can only update certain fields of the job's EvaluationJobConfig: `humanAnnotationConfig.instruction`, `exampleCount`, and `exampleSamplePercentage`. If you want to change any other aspect of the evaluation job, you must delete the job and create a new one.
⊞ EvaluationJobs ProjectsPauses an evaluation job. Pausing an evaluation job that is already in a `PAUSED` state is a no-op.
⊞ EvaluationJobs ProjectsResumes a paused evaluation job. A deleted evaluation job can't be resumed. Resuming a running or scheduled evaluation job is a no-op.
⊞ Evaluations ProjectsSearches evaluations within a project.
⊞ Instructions ProjectsCreates an instruction for how data should be labeled.
⊞ Instructions ProjectsDeletes an instruction object by resource name.
⊞ Instructions ProjectsGets an instruction by resource name.
⊞ Instructions ProjectsLists instructions for a project. Pagination is supported.
⊞ Operations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Operations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Operations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Service Consumer Management API v1
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Search ServicesSearch tenancy units for a managed service.
⊞ TenancyUnits ServicesAdd a new tenant project to the tenancy unit. There can be a maximum of 1024 tenant projects in a tenancy unit. If there are previously failed `AddTenantProject` calls, you might need to call `RemoveTenantProject` first to resolve them before you can make another call to `AddTenantProject` with the same tag. Operation.
⊞ TenancyUnits ServicesApply a configuration to an existing tenant project. This project must exist in an active state and have the original owner account. The caller must have permission to add a project to the given tenancy unit. The configuration is applied, but any existing settings on the project aren't modified. Specified policy bindings are applied. Existing bindings aren't modified. Specified services are activated. No service is deactivated. If specified, new billing configuration is applied. Omit a billing configuration to keep the existing one. A service account in the project is created if previously non existed. Specified labels will be appended to tenant project, note that the value of existing label key will be updated if the same label key is requested. The specified folder is ignored, as moving a tenant project to a different folder isn't supported. The operation fails if any of the steps fail, but no rollback of already applied configuration changes is attempted. Operation.
⊞ TenancyUnits ServicesAttach an existing project to the tenancy unit as a new tenant resource. The project could either be the tenant project reserved by calling `AddTenantProject` under a tenancy unit of a service producer's project of a managed service, or from a separate project. The caller is checked against a set of permissions as if calling `AddTenantProject` on the same service consumer. To trigger the attachment, the targeted tenant project must be in a folder. Make sure the ServiceConsumerManagement service account is the owner of that project. These two requirements are already met if the project is reserved by calling `AddTenantProject`. Operation.
⊞ TenancyUnits ServicesCreates a tenancy unit with no tenant resources. If tenancy unit already exists, it will be returned, however, in this case, returned TenancyUnit does not have tenant_resources field set and ListTenancyUnits has to be used to get a complete TenancyUnit with all fields populated.
⊞ TenancyUnits ServicesDelete a tenancy unit. Before you delete the tenancy unit, there should be no tenant resources in it that aren't in a DELETED state. Operation.
⊞ TenancyUnits ServicesDeletes the specified project resource identified by a tenant resource tag. The mothod removes a project lien with a 'TenantManager' origin if that was added. It will then attempt to delete the project. If that operation fails, this method also fails. After the project has been deleted, the tenant resource state is set to DELETED. To permanently remove resource metadata, call the `RemoveTenantProject` method. New resources with the same tag can't be added if there are existing resources in a DELETED state. Operation.
⊞ TenancyUnits ServicesFind the tenancy unit for a managed service and service consumer. This method shouldn't be used in a service producer's runtime path, for example to find the tenant project number when creating VMs. Service producers must persist the tenant project's information after the project is created.
⊞ TenancyUnits ServicesRemoves the specified project resource identified by a tenant resource tag. The method removes the project lien with 'TenantManager' origin if that was added. It then attempts to delete the project. If that operation fails, this method also fails. Calls to remove already removed or non-existent tenant project succeed. After the project has been deleted, or if was already in a DELETED state, resource metadata is permanently removed from the tenancy unit. Operation.
⊞ TenancyUnits ServicesAttempts to undelete a previously deleted tenant project. The project must be in a DELETED state. There are no guarantees that an undeleted project will be in a fully restored and functional state. Call the `ApplyTenantProjectConfig` method to update its configuration and then validate all managed service resources. Operation.
Bare Metal Solution API v2
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsDetach LUN from Instance.
⊞ Locations ProjectsDisable the interactive serial console feature on an instance.
⊞ Locations ProjectsEnable the interactive serial console feature on an instance.
⊞ Locations ProjectsGet details about a single server.
⊞ Locations ProjectsList servers in a given project and location.
⊞ Locations ProjectsUpdate details of a single server.
⊞ Locations ProjectsRenameInstance sets a new name for an instance. Use with caution, previous names become immediately invalidated.
⊞ Locations ProjectsPerform an ungraceful, hard reset on a server. Equivalent to shutting the power off and then turning it back on.
⊞ Locations ProjectsStarts a server that was shutdown.
⊞ Locations ProjectsStop a running server.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsGet details of a single network.
⊞ Locations ProjectsList network in a given project and location.
⊞ Locations ProjectsList all Networks (and used IPs for each Network) in the vendor account associated with the specified project.
⊞ Locations ProjectsUpdate details of a single network.
⊞ Locations ProjectsRenameNetwork sets a new name for a network. Use with caution, previous names become immediately invalidated.
⊞ Locations ProjectsCreate an NFS share.
⊞ Locations ProjectsDelete an NFS share. The underlying volume is automatically deleted.
⊞ Locations ProjectsGet details of a single NFS share.
⊞ Locations ProjectsList NFS shares.
⊞ Locations ProjectsUpdate details of a single NFS share.
⊞ Locations ProjectsRenameNfsShare sets a new name for an nfsshare. Use with caution, previous names become immediately invalidated.
⊞ Locations ProjectsGet details about an operation.
⊞ Locations ProjectsGet details of a single OS image.
⊞ Locations ProjectsRetrieves the list of OS images which are currently approved.
⊞ Locations ProjectsCreate new ProvisioningConfig.
⊞ Locations ProjectsGet ProvisioningConfig by name.
⊞ Locations ProjectsUpdate existing ProvisioningConfig.
⊞ Locations ProjectsSubmit a provisiong configuration for a given project.
⊞ Locations ProjectsList the budget details to provision resources on a given project.
⊞ Locations ProjectsRegister a public SSH key in the specified project for use with the interactive serial console feature.
⊞ Locations ProjectsDeletes a public SSH key registered in the specified project.
⊞ Locations ProjectsLists the public SSH keys registered for the specified project. These SSH keys are used only for the interactive serial console feature.
⊞ Locations ProjectsSkips volume's cooloff and deletes it now. Volume must be in cooloff state.
⊞ Locations ProjectsGet details of a single storage volume.
⊞ Locations ProjectsList storage volumes in a given project and location.
⊞ Locations ProjectsSkips lun's cooloff and deletes it now. Lun must be in cooloff state.
⊞ Locations ProjectsGet details of a single storage logical unit number(LUN).
⊞ Locations ProjectsList storage volume luns for given storage volume.
⊞ Locations ProjectsUpdate details of a single storage volume.
⊞ Locations ProjectsRenameVolume sets a new name for a volume. Use with caution, previous names become immediately invalidated.
⊞ Locations ProjectsEmergency Volume resize.
⊞ Locations ProjectsTakes a snapshot of a boot volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
⊞ Locations ProjectsDeletes a volume snapshot. Returns INVALID_ARGUMENT if called for a non-boot volume.
⊞ Locations ProjectsReturns the specified snapshot resource. Returns INVALID_ARGUMENT if called for a non-boot volume.
⊞ Locations ProjectsRetrieves the list of snapshots for the specified volume. Returns a response with an empty list of snapshots if called for a non-boot volume.
⊞ Locations ProjectsUses the specified snapshot to restore its parent volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
Access Approval API v1
⊞ ApprovalRequests FoldersApproves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
⊞ ApprovalRequests FoldersDismisses a request. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It is equivalent in effect to ignoring the request altogether. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
⊞ ApprovalRequests FoldersGets an approval request. Returns NOT_FOUND if the request does not exist.
⊞ ApprovalRequests FoldersInvalidates an existing ApprovalRequest. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It only invalidates a single approval. Returns FAILED_PRECONDITION if the request exists but is not in an approved state.
⊞ ApprovalRequests FoldersLists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological.
⊞ DeleteAccessApprovalSettings FoldersDeletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the project, folder, or organization, but only if all ancestors also have Access Approval disabled. If Access Approval is enabled at a higher level of the hierarchy, then Access Approval will still be enabled at this level as the settings are inherited.
⊞ GetAccessApprovalSettings FoldersGets the settings associated with a project, folder, or organization.
⊞ GetServiceAccount FoldersRetrieves the service account that is used by Access Approval to access KMS keys for signing approved approval requests.
⊞ UpdateAccessApprovalSettings FoldersUpdates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask.
⊞ ApprovalRequests OrganizationsApproves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
⊞ ApprovalRequests OrganizationsDismisses a request. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It is equivalent in effect to ignoring the request altogether. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
⊞ ApprovalRequests OrganizationsGets an approval request. Returns NOT_FOUND if the request does not exist.
⊞ ApprovalRequests OrganizationsInvalidates an existing ApprovalRequest. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It only invalidates a single approval. Returns FAILED_PRECONDITION if the request exists but is not in an approved state.
⊞ ApprovalRequests OrganizationsLists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological.
⊞ DeleteAccessApprovalSettings OrganizationsDeletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the project, folder, or organization, but only if all ancestors also have Access Approval disabled. If Access Approval is enabled at a higher level of the hierarchy, then Access Approval will still be enabled at this level as the settings are inherited.
⊞ GetAccessApprovalSettings OrganizationsGets the settings associated with a project, folder, or organization.
⊞ GetServiceAccount OrganizationsRetrieves the service account that is used by Access Approval to access KMS keys for signing approved approval requests.
⊞ UpdateAccessApprovalSettings OrganizationsUpdates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask.
⊞ ApprovalRequests ProjectsApproves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
⊞ ApprovalRequests ProjectsDismisses a request. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It is equivalent in effect to ignoring the request altogether. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
⊞ ApprovalRequests ProjectsGets an approval request. Returns NOT_FOUND if the request does not exist.
⊞ ApprovalRequests ProjectsInvalidates an existing ApprovalRequest. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It only invalidates a single approval. Returns FAILED_PRECONDITION if the request exists but is not in an approved state.
⊞ ApprovalRequests ProjectsLists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological.
⊞ DeleteAccessApprovalSettings ProjectsDeletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the project, folder, or organization, but only if all ancestors also have Access Approval disabled. If Access Approval is enabled at a higher level of the hierarchy, then Access Approval will still be enabled at this level as the settings are inherited.
⊞ GetAccessApprovalSettings ProjectsGets the settings associated with a project, folder, or organization.
⊞ GetServiceAccount ProjectsRetrieves the service account that is used by Access Approval to access KMS keys for signing approved approval requests.
⊞ UpdateAccessApprovalSettings ProjectsUpdates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask.
Cloud Bigtable Admin API v2
⊞ Cancel OperationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Delete OperationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Projects OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Instances ProjectsCreates an app profile within an instance.
⊞ Instances ProjectsDeletes an app profile from an instance.
⊞ Instances ProjectsGets information about an app profile.
⊞ Instances ProjectsLists information about app profiles in an instance.
⊞ Instances ProjectsUpdates an app profile within an instance.
⊞ Instances ProjectsCopy a Cloud Bigtable backup to a new backup in the destination cluster located in the destination instance and project.
⊞ Instances ProjectsStarts creating a new Cloud Bigtable Backup. The returned backup long-running operation can be used to track creation of the backup. The metadata field type is CreateBackupMetadata. The response field type is Backup, if successful. Cancelling the returned operation will stop the creation and delete the backup.
⊞ Instances ProjectsDeletes a pending or completed Cloud Bigtable backup.
⊞ Instances ProjectsGets metadata on a pending or completed Cloud Bigtable Backup.
⊞ Instances ProjectsGets the access control policy for a Table or Backup resource. Returns an empty policy if the resource exists but does not have a policy set.
⊞ Instances ProjectsLists Cloud Bigtable backups. Returns both completed and pending backups.
⊞ Instances ProjectsUpdates a pending or completed Cloud Bigtable Backup.
⊞ Instances ProjectsSets the access control policy on a Table or Backup resource. Replaces any existing policy.
⊞ Instances ProjectsReturns permissions that the caller has on the specified Table or Backup resource.
⊞ Instances ProjectsCreates a cluster within an instance. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero, then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.
⊞ Instances ProjectsDeletes a cluster from an instance.
⊞ Instances ProjectsGets information about a cluster.
⊞ Instances ProjectsLists hot tablets in a cluster, within the time range provided. Hot tablets are ordered based on CPU usage.
⊞ Instances ProjectsLists information about clusters in an instance.
⊞ Instances ProjectsPartially updates a cluster within a project. This method is the preferred way to update a Cluster. To enable and update autoscaling, set cluster_config.cluster_autoscaling_config. When autoscaling is enabled, serve_nodes is treated as an OUTPUT_ONLY field, meaning that updates to it are ignored. Note that an update cannot simultaneously set serve_nodes to non-zero and cluster_config.cluster_autoscaling_config to non-empty, and also specify both in the update_mask. To disable autoscaling, clear cluster_config.cluster_autoscaling_config, and explicitly set a serve_node count via the update_mask.
⊞ Instances ProjectsUpdates a cluster within an instance. Note that UpdateCluster does not support updating cluster_config.cluster_autoscaling_config. In order to update it, you must use PartialUpdateCluster.
⊞ Instances ProjectsCreate an instance within a project. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero, then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.
⊞ Instances ProjectsDelete an instance from a project.
⊞ Instances ProjectsGets information about an instance.
⊞ Instances ProjectsGets the access control policy for an instance resource. Returns an empty policy if an instance exists but does not have a policy set.
⊞ Instances ProjectsLists information about instances in a project.
⊞ Instances ProjectsPartially updates an instance within a project. This method can modify all fields of an Instance and is the preferred way to update an Instance.
⊞ Instances ProjectsSets the access control policy on an instance resource. Replaces any existing policy.
⊞ Instances ProjectsChecks replication consistency based on a consistency token, that is, if replication has caught up based on the conditions specified in the token and the check request.
⊞ Instances ProjectsCreates a new table in the specified instance. The table can be created with a full set of initial column families, specified in the request.
⊞ Instances ProjectsPermanently deletes a specified table and all of its data.
⊞ Instances ProjectsPermanently drop/delete a row range from a specified table. The request can specify whether to delete all rows in a table, or only those that match a particular prefix.
⊞ Instances ProjectsGenerates a consistency token for a Table, which can be used in CheckConsistency to check whether mutations to the table that finished before this call started have been replicated. The tokens will be available for 90 days.
⊞ Instances ProjectsGets metadata information about the specified table.
⊞ Instances ProjectsGets the access control policy for a Table or Backup resource. Returns an empty policy if the resource exists but does not have a policy set.
⊞ Instances ProjectsLists all tables served from a specified instance.
⊞ Instances ProjectsPerforms a series of column family modifications on the specified table. Either all or none of the modifications will occur before this method returns, but data requests received prior to that point may see a table where only some modifications have taken effect.
⊞ Instances ProjectsUpdates a specified table.
⊞ Instances ProjectsCreate a new table by restoring from a completed backup. The returned table long-running operation can be used to track the progress of the operation, and to cancel it. The metadata field type is RestoreTableMetadata. The response type is Table, if successful.
⊞ Instances ProjectsSets the access control policy on a Table or Backup resource. Replaces any existing policy.
⊞ Instances ProjectsReturns permissions that the caller has on the specified Table or Backup resource.
⊞ Instances ProjectsRestores a specified table which was accidentally deleted.
⊞ Instances ProjectsReturns permissions that the caller has on the specified instance resource.
⊞ Instances ProjectsUpdates an instance within a project. This method updates only the display name and type for an Instance. To update other Instance properties, such as labels, use PartialUpdateInstance.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
Cloud Translation API v3
⊞ DetectLanguage ProjectsDetects the language of text within a request.
⊞ GetSupportedLanguages ProjectsReturns a list of supported languages for translation.
⊞ Locations ProjectsTranslates a large volume of document in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call.
⊞ Locations ProjectsTranslates a large volume of text in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call.
⊞ Locations ProjectsCreates a Dataset.
⊞ Locations ProjectsDeletes a dataset and all of its contents.
⊞ Locations ProjectsLists sentence pairs in the dataset.
⊞ Locations ProjectsExports dataset's data to the provided output location.
⊞ Locations ProjectsGets a Dataset.
⊞ Locations ProjectsImport sentence pairs into translation Dataset.
⊞ Locations ProjectsLists datasets.
⊞ Locations ProjectsDetects the language of text within a request.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsReturns a list of supported languages for translation.
⊞ Locations ProjectsCreates a glossary and returns the long-running operation. Returns NOT_FOUND, if the project doesn't exist.
⊞ Locations ProjectsDeletes a glossary, or cancels glossary construction if the glossary isn't created yet. Returns NOT_FOUND, if the glossary doesn't exist.
⊞ Locations ProjectsGets a glossary. Returns NOT_FOUND, if the glossary doesn't exist.
⊞ Locations ProjectsCreates a glossary entry.
⊞ Locations ProjectsDeletes a single entry from the glossary
⊞ Locations ProjectsGets a single glossary entry by the given id.
⊞ Locations ProjectsList the entries for the glossary.
⊞ Locations ProjectsUpdates a glossary entry.
⊞ Locations ProjectsLists glossaries in a project. Returns NOT_FOUND, if the project doesn't exist.
⊞ Locations ProjectsUpdates a glossary. A LRO is used since the update can be async if the glossary's entry file is updated.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a Model.
⊞ Locations ProjectsDeletes a model.
⊞ Locations ProjectsGets a model.
⊞ Locations ProjectsLists models.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsWaits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
⊞ Locations ProjectsRomanize input text written in non-Latin scripts to Latin text.
⊞ Locations ProjectsTranslates documents in synchronous mode.
⊞ Locations ProjectsTranslates input text and returns translated text.
⊞ RomanizeText ProjectsRomanize input text written in non-Latin scripts to Latin text.
⊞ TranslateText ProjectsTranslates input text and returns translated text.
Cloud Speech-to-Text API v1
⊞ Get OperationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ List OperationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreate a custom class.
⊞ Locations ProjectsDelete a custom class.
⊞ Locations ProjectsGet a custom class.
⊞ Locations ProjectsList custom classes.
⊞ Locations ProjectsUpdate a custom class.
⊞ Locations ProjectsCreate a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet.
⊞ Locations ProjectsDelete a phrase set.
⊞ Locations ProjectsGet a phrase set.
⊞ Locations ProjectsList phrase sets.
⊞ Locations ProjectsUpdate a phrase set.
⊞ Longrunningrecognize SpeechPerforms asynchronous speech recognition: receive results via the google.longrunning.Operations interface. Returns either an `Operation.error` or an `Operation.response` which contains a `LongRunningRecognizeResponse` message. For more information on asynchronous speech recognition, see the [how-to](https://cloud.google.com/speech-to-text/docs/async-recognize).
⊞ Recognize SpeechPerforms synchronous speech recognition: receive results after all audio has been sent and processed.
Blockchain Node Engine API v1
⊞ Locations ProjectsCreates a new blockchain node in a given project and location.
⊞ Locations ProjectsDeletes a single blockchain node.
⊞ Locations ProjectsGets details of a single blockchain node.
⊞ Locations ProjectsLists blockchain nodes in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single blockchain node.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Cloud Domains API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsUpdates a `Registration`'s contact settings. Some changes require confirmation by the domain's registrant contact .
⊞ Locations ProjectsUpdates a `Registration`'s DNS settings.
⊞ Locations ProjectsUpdates a `Registration`'s management settings.
⊞ Locations ProjectsDeletes a `Registration` resource. This method works on any `Registration` resource using [Subscription or Commitment billing](/domains/pricing#billing-models), provided that the resource was created at least 1 day in the past. When an active registration is successfully deleted, you can continue to use the domain in [Google Domains](https://domains.google/) until it expires. The calling user becomes the domain's sole owner in Google Domains, and permissions for the domain are subsequently managed there. The domain does not renew automatically unless the new owner sets up billing in Google Domains. After January 2024 you will only be able to delete `Registration` resources when `state` is one of: `EXPORTED`, `EXPIRED`,`REGISTRATION_FAILED` or `TRANSFER_FAILED`. See [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations) for more details.
⊞ Locations ProjectsDeprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations) Exports a `Registration` resource, such that it is no longer managed by Cloud Domains. When an active domain is successfully exported, you can continue to use the domain in [Google Domains](https://domains.google/) until it expires. The calling user becomes the domain's sole owner in Google Domains, and permissions for the domain are subsequently managed there. The domain does not renew automatically unless the new owner sets up billing in Google Domains.
⊞ Locations ProjectsGets the details of a `Registration` resource.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsDeprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations) Imports a domain name from [Google Domains](https://domains.google/) for use in Cloud Domains. To transfer a domain from another registrar, use the `TransferDomain` method instead. Since individual users can own domains in Google Domains, the calling user must have ownership permission on the domain.
⊞ Locations ProjectsLists the `Registration` resources in a project.
⊞ Locations ProjectsUpdates select fields of a `Registration` resource, notably `labels`. To update other fields, use the appropriate custom update method: * To update management settings, see `ConfigureManagementSettings` * To update DNS configuration, see `ConfigureDnsSettings` * To update contact information, see `ConfigureContactSettings`
⊞ Locations ProjectsRegisters a new domain name and creates a corresponding `Registration` resource. Call `RetrieveRegisterParameters` first to check availability of the domain name and determine parameters like price that are needed to build a call to this method. A successful call creates a `Registration` resource in state `REGISTRATION_PENDING`, which resolves to `ACTIVE` within 1-2 minutes, indicating that the domain was successfully registered. If the resource ends up in state `REGISTRATION_FAILED`, it indicates that the domain was not registered successfully, and you can safely delete the resource and retry registration.
⊞ Locations ProjectsResets the authorization code of the `Registration` to a new random string. You can call this method only after 60 days have elapsed since the initial domain registration.
⊞ Locations ProjectsGets the authorization code of the `Registration` for the purpose of transferring the domain to another registrar. You can call this method only after 60 days have elapsed since the initial domain registration.
⊞ Locations ProjectsDeprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations) Lists domain names from [Google Domains](https://domains.google/) that can be imported to Cloud Domains using the `ImportDomain` method. Since individual users can own domains in Google Domains, the list of domains returned depends on the individual user making the call. Domains already managed by Cloud Domains are not returned.
⊞ Locations ProjectsGets parameters needed to register a new domain name, including price and up-to-date availability. Use the returned values to call `RegisterDomain`.
⊞ Locations ProjectsDeprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations) Gets parameters needed to transfer a domain name from another registrar to Cloud Domains. For domains already managed by [Google Domains](https://domains.google/), use `ImportDomain` instead. Use the returned values to call `TransferDomain`.
⊞ Locations ProjectsSearches for available domain names similar to the provided query. Availability results from this method are approximate; call `RetrieveRegisterParameters` on a domain before registering to confirm availability.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsDeprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations) Transfers a domain name from another registrar to Cloud Domains. For domains already managed by [Google Domains](https://domains.google/), use `ImportDomain` instead. Before calling this method, go to the domain's current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to this method. A successful call creates a `Registration` resource in state `TRANSFER_PENDING`. It can take several days to complete the transfer process. The registrant can often speed up this process by approving the transfer through the current registrar, either by clicking a link in an email from the registrar or by visiting the registrar's website. A few minutes after transfer approval, the resource transitions to state `ACTIVE`, indicating that the transfer was successful. If the transfer is rejected or the request expires without being approved, the resource can end up in state `TRANSFER_FAILED`. If transfer fails, you can safely delete the resource and retry the transfer.
API Gateway API v1
⊞ Locations ProjectsCreates a new ApiConfig in a given project and location.
⊞ Locations ProjectsDeletes a single ApiConfig.
⊞ Locations ProjectsGets details of a single ApiConfig.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists ApiConfigs in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single ApiConfig.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new Api in a given project and location.
⊞ Locations ProjectsDeletes a single Api.
⊞ Locations ProjectsGets details of a single Api.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Apis in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Api.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new Gateway in a given project and location.
⊞ Locations ProjectsDeletes a single Gateway.
⊞ Locations ProjectsGets details of a single Gateway.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Gateways in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single Gateway.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
Dataform API v1beta1
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsApplies a Git commit to a Repository. The Repository must not have a value for `git_remote_settings.url`.
⊞ Locations ProjectsCreates a new CompilationResult in a given project and location.
⊞ Locations ProjectsFetches a single CompilationResult.
⊞ Locations ProjectsLists CompilationResults in a given Repository.
⊞ Locations ProjectsReturns CompilationResultActions in a given CompilationResult.
⊞ Locations ProjectsComputes a Repository's Git access token status.
⊞ Locations ProjectsCreates a new Repository in a given project and location.
⊞ Locations ProjectsDeletes a single Repository.
⊞ Locations ProjectsFetches a Repository's history of commits. The Repository must not have a value for `git_remote_settings.url`.
⊞ Locations ProjectsFetches a Repository's remote branches.
⊞ Locations ProjectsFetches a single Repository.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Repositories in a given project and location.
⊞ Locations ProjectsUpdates a single Repository.
⊞ Locations ProjectsReturns the contents of a given Repository directory. The Repository must not have a value for `git_remote_settings.url`.
⊞ Locations ProjectsReturns the contents of a file (inside a Repository). The Repository must not have a value for `git_remote_settings.url`.
⊞ Locations ProjectsCreates a new ReleaseConfig in a given Repository.
⊞ Locations ProjectsDeletes a single ReleaseConfig.
⊞ Locations ProjectsFetches a single ReleaseConfig.
⊞ Locations ProjectsLists ReleaseConfigs in a given Repository.
⊞ Locations ProjectsUpdates a single ReleaseConfig.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new WorkflowConfig in a given Repository.
⊞ Locations ProjectsDeletes a single WorkflowConfig.
⊞ Locations ProjectsFetches a single WorkflowConfig.
⊞ Locations ProjectsLists WorkflowConfigs in a given Repository.
⊞ Locations ProjectsUpdates a single WorkflowConfig.
⊞ Locations ProjectsRequests cancellation of a running WorkflowInvocation.
⊞ Locations ProjectsCreates a new WorkflowInvocation in a given Repository.
⊞ Locations ProjectsDeletes a single WorkflowInvocation.
⊞ Locations ProjectsFetches a single WorkflowInvocation.
⊞ Locations ProjectsLists WorkflowInvocations in a given Repository.
⊞ Locations ProjectsReturns WorkflowInvocationActions in a given WorkflowInvocation.
⊞ Locations ProjectsApplies a Git commit for uncommitted files in a Workspace.
⊞ Locations ProjectsCreates a new Workspace in a given Repository.
⊞ Locations ProjectsDeletes a single Workspace.
⊞ Locations ProjectsFetches Git diff for an uncommitted file in a Workspace.
⊞ Locations ProjectsFetches Git statuses for the files in a Workspace.
⊞ Locations ProjectsFetches Git ahead/behind against a remote branch.
⊞ Locations ProjectsFetches a single Workspace.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsInstalls dependency NPM packages (inside a Workspace).
⊞ Locations ProjectsLists Workspaces in a given Repository.
⊞ Locations ProjectsCreates a directory inside a Workspace.
⊞ Locations ProjectsMoves a directory (inside a Workspace), and all of its contents, to a new location.
⊞ Locations ProjectsMoves a file (inside a Workspace) to a new location.
⊞ Locations ProjectsPulls Git commits from the Repository's remote into a Workspace.
⊞ Locations ProjectsPushes Git commits from a Workspace to the Repository's remote.
⊞ Locations ProjectsReturns the contents of a given Workspace directory.
⊞ Locations ProjectsReturns the contents of a file (inside a Workspace).
⊞ Locations ProjectsDeletes a directory (inside a Workspace) and all of its contents.
⊞ Locations ProjectsDeletes a file (inside a Workspace).
⊞ Locations ProjectsPerforms a Git reset for uncommitted files in a Workspace.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsWrites to a file (inside a Workspace).
OS Config API v1
⊞ Locations ProjectsGet inventory data for the specified VM instance. If the VM has no associated inventory, the message `NOT_FOUND` is returned.
⊞ Locations ProjectsList inventory data for all VM instances in the specified zone.
⊞ Locations ProjectsGet the OS policy assignment report for the specified Compute Engine VM instance.
⊞ Locations ProjectsList OS policy assignment reports for all Compute Engine VM instances in the specified zone.
⊞ Locations ProjectsGets the vulnerability report for the specified VM instance. Only VMs with inventory data have vulnerability reports associated with them.
⊞ Locations ProjectsList vulnerability reports for all VM instances in the specified zone.
⊞ Locations ProjectsCreate an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
⊞ Locations ProjectsDelete the OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. If the LRO completes and is not cancelled, all revisions associated with the OS policy assignment are deleted. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
⊞ Locations ProjectsRetrieve an existing OS policy assignment. This method always returns the latest revision. In order to retrieve a previous revision of the assignment, also provide the revision ID in the `name` parameter.
⊞ Locations ProjectsList the OS policy assignments under the parent resource. For each OS policy assignment, the latest revision is returned.
⊞ Locations ProjectsList the OS policy assignment revisions for a given OS policy assignment.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsUpdate an existing OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
⊞ PatchDeployments ProjectsCreate an OS Config patch deployment.
⊞ PatchDeployments ProjectsDelete an OS Config patch deployment.
⊞ PatchDeployments ProjectsGet an OS Config patch deployment.
⊞ PatchDeployments ProjectsGet a page of OS Config patch deployments.
⊞ PatchDeployments ProjectsUpdate an OS Config patch deployment.
⊞ PatchDeployments ProjectsChange state of patch deployment to "PAUSED". Patch deployment in paused state doesn't generate patch jobs.
⊞ PatchDeployments ProjectsChange state of patch deployment back to "ACTIVE". Patch deployment in active state continues to generate patch jobs.
⊞ PatchJobs ProjectsCancel a patch job. The patch job must be active. Canceled patch jobs cannot be restarted.
⊞ PatchJobs ProjectsPatch VM instances by creating and running a patch job.
⊞ PatchJobs ProjectsGet the patch job. This can be used to track the progress of an ongoing patch job or review the details of completed jobs.
⊞ PatchJobs ProjectsGet a list of instance details for a given patch job.
⊞ PatchJobs ProjectsGet a list of patch jobs.
Service Directory API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a namespace, and returns the new namespace.
⊞ Locations ProjectsDeletes a namespace. This also deletes all services and endpoints in the namespace.
⊞ Locations ProjectsGets a namespace.
⊞ Locations ProjectsGets the IAM Policy for a resource (namespace or service only).
⊞ Locations ProjectsLists all namespaces.
⊞ Locations ProjectsUpdates a namespace.
⊞ Locations ProjectsCreates a service, and returns the new service.
⊞ Locations ProjectsDeletes a service. This also deletes all endpoints associated with the service.
⊞ Locations ProjectsCreates an endpoint, and returns the new endpoint.
⊞ Locations ProjectsDeletes an endpoint.
⊞ Locations ProjectsGets an endpoint.
⊞ Locations ProjectsLists all endpoints.
⊞ Locations ProjectsUpdates an endpoint.
⊞ Locations ProjectsGets a service.
⊞ Locations ProjectsGets the IAM Policy for a resource (namespace or service only).
⊞ Locations ProjectsLists all services belonging to a namespace.
⊞ Locations ProjectsUpdates a service.
⊞ Locations ProjectsReturns a service and its associated endpoints. Resolving a service is not considered an active developer method.
⊞ Locations ProjectsSets the IAM Policy for a resource (namespace or service only).
⊞ Locations ProjectsTests IAM permissions for a resource (namespace or service only).
⊞ Locations ProjectsSets the IAM Policy for a resource (namespace or service only).
⊞ Locations ProjectsTests IAM permissions for a resource (namespace or service only).
Network Connectivity API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsAccepts a proposal to attach a Network Connectivity Center spoke to a hub.
⊞ Locations ProjectsCreates a new Network Connectivity Center hub in the specified project.
⊞ Locations ProjectsDeletes a Network Connectivity Center hub.
⊞ Locations ProjectsGets details about a Network Connectivity Center hub.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsGets details about a Network Connectivity Center group.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists groups in a given hub.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists the Network Connectivity Center hubs associated with a given project.
⊞ Locations ProjectsLists the Network Connectivity Center spokes associated with a specified hub and location. The list includes both spokes that are attached to the hub and spokes that have been proposed but not yet accepted.
⊞ Locations ProjectsUpdates the description and/or labels of a Network Connectivity Center hub.
⊞ Locations ProjectsRejects a Network Connectivity Center spoke from being attached to a hub. If the spoke was previously in the `ACTIVE` state, it transitions to the `INACTIVE` state and is no longer able to connect to other spokes that are attached to the hub.
⊞ Locations ProjectsGets details about a Network Connectivity Center route table.
⊞ Locations ProjectsLists route tables in a given project.
⊞ Locations ProjectsGets details about the specified route.
⊞ Locations ProjectsLists routes in a given project.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new policy-based route in a given project and location.
⊞ Locations ProjectsDeletes a single policy-based route.
⊞ Locations ProjectsGets details of a single policy-based route.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists policy-based routes in a given project and location.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new internal range in a given project and location.
⊞ Locations ProjectsDeletes a single internal range.
⊞ Locations ProjectsGets details of a single internal range.
⊞ Locations ProjectsLists internal ranges in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single internal range.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsDeletes a single ServiceClass.
⊞ Locations ProjectsGets details of a single ServiceClass.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists ServiceClasses in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single ServiceClass.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new ServiceConnectionMap in a given project and location.
⊞ Locations ProjectsDeletes a single ServiceConnectionMap.
⊞ Locations ProjectsGets details of a single ServiceConnectionMap.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists ServiceConnectionMaps in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single ServiceConnectionMap.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new ServiceConnectionPolicy in a given project and location.
⊞ Locations ProjectsDeletes a single ServiceConnectionPolicy.
⊞ Locations ProjectsGets details of a single ServiceConnectionPolicy.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists ServiceConnectionPolicies in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single ServiceConnectionPolicy.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new ServiceConnectionToken in a given project and location.
⊞ Locations ProjectsDeletes a single ServiceConnectionToken.
⊞ Locations ProjectsGets details of a single ServiceConnectionToken.
⊞ Locations ProjectsLists ServiceConnectionTokens in a given project and location.
⊞ Locations ProjectsCreates a Network Connectivity Center spoke.
⊞ Locations ProjectsDeletes a Network Connectivity Center spoke.
⊞ Locations ProjectsGets details about a Network Connectivity Center spoke.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists the Network Connectivity Center spokes in a specified project and location.
⊞ Locations ProjectsUpdates the parameters of a Network Connectivity Center spoke.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
Network Security API v1
⊞ Locations OrganizationsAdds items to an address group.
⊞ Locations OrganizationsClones items from one address group to another.
⊞ Locations OrganizationsCreates a new address group in a given project and location.
⊞ Locations OrganizationsDeletes an address group.
⊞ Locations OrganizationsGets details of a single address group.
⊞ Locations OrganizationsLists address groups in a given project and location.
⊞ Locations OrganizationsLists references of an address group.
⊞ Locations OrganizationsUpdates parameters of an address group.
⊞ Locations OrganizationsRemoves items from an address group.
⊞ Locations OrganizationsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations OrganizationsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations OrganizationsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations OrganizationsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsAdds items to an address group.
⊞ Locations ProjectsClones items from one address group to another.
⊞ Locations ProjectsCreates a new address group in a given project and location.
⊞ Locations ProjectsDeletes a single address group.
⊞ Locations ProjectsGets details of a single address group.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists address groups in a given project and location.
⊞ Locations ProjectsLists references of an address group.
⊞ Locations ProjectsUpdates the parameters of a single address group.
⊞ Locations ProjectsRemoves items from an address group.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new AuthorizationPolicy in a given project and location.
⊞ Locations ProjectsDeletes a single AuthorizationPolicy.
⊞ Locations ProjectsGets details of a single AuthorizationPolicy.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists AuthorizationPolicies in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single AuthorizationPolicy.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new ClientTlsPolicy in a given project and location.
⊞ Locations ProjectsDeletes a single ClientTlsPolicy.
⊞ Locations ProjectsGets details of a single ClientTlsPolicy.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists ClientTlsPolicies in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single ClientTlsPolicy.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new GatewaySecurityPolicy in a given project and location.
⊞ Locations ProjectsDeletes a single GatewaySecurityPolicy.
⊞ Locations ProjectsGets details of a single GatewaySecurityPolicy.
⊞ Locations ProjectsLists GatewaySecurityPolicies in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single GatewaySecurityPolicy.
⊞ Locations ProjectsCreates a new GatewaySecurityPolicy in a given project and location.
⊞ Locations ProjectsDeletes a single GatewaySecurityPolicyRule.
⊞ Locations ProjectsGets details of a single GatewaySecurityPolicyRule.
⊞ Locations ProjectsLists GatewaySecurityPolicyRules in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single GatewaySecurityPolicyRule.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsCreates a new ServerTlsPolicy in a given project and location.
⊞ Locations ProjectsDeletes a single ServerTlsPolicy.
⊞ Locations ProjectsGets details of a single ServerTlsPolicy.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists ServerTlsPolicies in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single ServerTlsPolicy.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsCreates a new TlsInspectionPolicy in a given project and location.
⊞ Locations ProjectsDeletes a single TlsInspectionPolicy.
⊞ Locations ProjectsGets details of a single TlsInspectionPolicy.
⊞ Locations ProjectsLists TlsInspectionPolicies in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single TlsInspectionPolicy.
⊞ Locations ProjectsCreates a new UrlList in a given project and location.
⊞ Locations ProjectsDeletes a single UrlList.
⊞ Locations ProjectsGets details of a single UrlList.
⊞ Locations ProjectsLists UrlLists in a given project and location.
⊞ Locations ProjectsUpdates the parameters of a single UrlList.
Public Certificate Authority API v1
⊞ Locations ProjectsCreates a new ExternalAccountKey bound to the project.
Cloud TPU API v2
⊞ Locations ProjectsGets AcceleratorType.
⊞ Locations ProjectsLists accelerator types supported by this API.
⊞ Locations ProjectsGenerates the Cloud TPU service identity for the project.
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsCreates a node.
⊞ Locations ProjectsDeletes a node.
⊞ Locations ProjectsGets the details of a node.
⊞ Locations ProjectsRetrieves the guest attributes for the node.
⊞ Locations ProjectsLists nodes.
⊞ Locations ProjectsUpdates the configurations of a node.
⊞ Locations ProjectsStarts a node.
⊞ Locations ProjectsStops a node. This operation is only available with single TPU nodes.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsGets a runtime version.
⊞ Locations ProjectsLists runtime versions supported by this API.
Cloud Natural Language API v2
⊞ AnalyzeEntities DocumentsFinds named entities (currently proper names and common nouns) in the text along with entity types, probability, mentions for each entity, and other properties.
⊞ AnalyzeSentiment DocumentsAnalyzes the sentiment of the provided text.
⊞ AnnotateText DocumentsA convenience method that provides all features in one call.
⊞ ClassifyText DocumentsClassifies a document into categories.
⊞ ModerateText DocumentsModerates a document for harmful and sensitive categories.
Web Risk API v1
⊞ Search HashesGets the full hashes that match the requested hash prefix. This is used after a hash prefix is looked up in a threatList and there is a match. The client side threatList only holds partial hashes so the client must query this method to determine if there is a full hash match of a threat.
⊞ Operations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Submissions ProjectsCreates a Submission of a URI suspected of containing phishing content to be reviewed. If the result verifies the existence of malicious phishing content, the site will be added to the [Google's Social Engineering lists](https://support.google.com/webmasters/answer/6350487/) in order to protect users that could get exposed to this threat in the future. Only allowlisted projects can use this method during Early Access. Please reach out to Sales or your customer engineer to obtain access.
⊞ ComputeDiff ThreatListsGets the most recent threat list diffs. These diffs should be applied to a local database of hashes to keep it up-to-date. If the local database is empty or excessively out-of-date, a complete snapshot of the database will be returned. This Method only updates a single ThreatList at a time. To update multiple ThreatList databases, this method needs to be called once for each list.
⊞ Search UrisThis method is used to check whether a URI is on a given threatList. Multiple threatLists may be searched in a single query. The response will list all requested threatLists the URI was found to match. If the URI is not found on any of the requested ThreatList an empty response will be returned.
Application Integration API v1alpha
⊞ GenerateToken CallbackReceives the auth code and auth config id to combine that with the client id and secret to retrieve access tokens from the token endpoint. Returns either a success or error message when it's done.
⊞ Enumerate ConnectorPlatformRegionsEnumerates the regions for which Connector Platform is provisioned.
⊞ Locations ProjectsCreates an Apps Script project.
⊞ Locations ProjectsLinks a existing Apps Script project.
⊞ Locations ProjectsCreates an auth config record. Fetch corresponding credentials for specific auth types, e.g. access token for OAuth 2.0, JWT token for JWT. Encrypt the auth config with Cloud KMS and store the encrypted credentials in Spanner. Returns the encrypted auth config.
⊞ Locations ProjectsDeletes an auth config.
⊞ Locations ProjectsGets a complete auth config. If the auth config doesn't exist, Code.NOT_FOUND exception will be thrown. Returns the decrypted auth config.
⊞ Locations ProjectsLists all auth configs that match the filter. Restrict to auth configs belong to the current client only.
⊞ Locations ProjectsUpdates an auth config. If credential is updated, fetch the encrypted auth config from Spanner, decrypt with Cloud KMS key, update the credential fields, re-encrypt with Cloud KMS key and update the Spanner record. For other fields, directly update the Spanner record. Returns the encrypted auth config.
⊞ Locations ProjectsGet a certificates in the specified project.
⊞ Locations ProjectsLists the available entities and actions associated with a Connection.
⊞ Locations ProjectsLists Connections in a given project and location.
⊞ Locations ProjectsLists the JSON schemas for the inputs and outputs of actions, filtered by action name.
⊞ Locations ProjectsLists the JSON schemas for the properties of runtime entities, filtered by entity name.
⊞ Locations ProjectsDelete the selected integration and all versions inside
⊞ Locations ProjectsExecutes integrations synchronously by passing the trigger id in the request body. The request is not returned until the requested executions are either fulfilled or experienced an error. If the integration name is not specified (passing `-`), all of the associated integration under the given trigger_id will be executed. Otherwise only the specified integration for the given `trigger_id` is executed. This is helpful for execution the integration from UI.
⊞ Locations ProjectsExecutes an integration on receiving events from Integration Connector triggers, Eventarc or CPS Trigger. Input data to integration is received in body in json format
⊞ Locations ProjectsLists the results of all the integration executions. The response includes the same information as the [execution log](https://cloud.google.com/application-integration/docs/viewing-logs) in the Integration UI.
⊞ Locations Projects* Lifts suspension for the Suspension task. Fetch corresponding suspension with provided suspension Id, resolve suspension, and set up suspension result for the Suspension Task.
⊞ Locations Projects* Lists suspensions associated with a specific execution. Only those with permissions to resolve the relevant suspensions will be able to view them.
⊞ Locations Projects* Resolves (lifts/rejects) any number of suspensions. If the integration is already running, only the status of the suspension is updated. Otherwise, the suspended integration will begin execution again.
⊞ Locations ProjectsReturns the list of all integrations in the specified project.
⊞ Locations ProjectsSchedules an integration for execution by passing the trigger id and the scheduled time in the request body.
⊞ Locations ProjectsCreate a integration with a draft version in the specified project.
⊞ Locations ProjectsSoft-deletes the integration. Changes the status of the integration to ARCHIVED. If the integration being ARCHIVED is tagged as "HEAD", the tag is removed from this snapshot and set to the previous non-ARCHIVED snapshot. The PUBLISH_REQUESTED, DUE_FOR_DELETION tags are removed too. This RPC throws an exception if the version being deleted is DRAFT, and if the `locked_by` user is not the same as the user performing the Delete. Audit fields updated include last_modified_timestamp, last_modified_by. Any existing lock is released when Deleting a integration. Currently, there is no undelete mechanism.
⊞ Locations ProjectsDownloads an integration. Retrieves the `IntegrationVersion` for a given `integration_id` and returns the response as a string.
⊞ Locations ProjectsGet a integration in the specified project.
⊞ Locations ProjectsReturns the list of all integration versions in the specified project.
⊞ Locations ProjectsUpdate a integration with a draft version in the specified project.
⊞ Locations ProjectsThis RPC throws an exception if the integration is in ARCHIVED or ACTIVE state. This RPC throws an exception if the version being published is DRAFT, and if the `locked_by` user is not the same as the user performing the Publish. Audit fields updated include last_published_timestamp, last_published_by, last_modified_timestamp, last_modified_by. Any existing lock is on this integration is released.
⊞ Locations ProjectsClears the `locked_by` and `locked_at_timestamp`in the DRAFT version of this integration. It then performs the same action as the CreateDraftIntegrationVersion (i.e., copies the DRAFT version of the integration as a SNAPSHOT and then creates a new DRAFT version with the `locked_by` set to the `user_taking_over` and the `locked_at_timestamp` set to the current timestamp). Both the `locked_by` and `user_taking_over` are notified via email about the takeover. This RPC throws an exception if the integration is not in DRAFT status or if the `locked_by` and `locked_at_timestamp` fields are not set.The TakeoverEdit lock is treated the same as an edit of the integration, and hence shares ACLs with edit. Audit fields updated include last_modified_timestamp, last_modified_by.
⊞ Locations ProjectsCreates a new test case
⊞ Locations ProjectsDeletes a test case
⊞ Locations ProjectsExecutes functional test
⊞ Locations ProjectsGet a test case
⊞ Locations ProjectsLists the results of all functional test executions. The response includes the same information as the [execution log](https://cloud.google.com/application-integration/docs/viewing-logs) in the Integration UI.
⊞ Locations ProjectsUpdates a test case
⊞ Locations ProjectsSets the status of the ACTIVE integration to SNAPSHOT with a new tag "PREVIOUSLY_PUBLISHED" after validating it. The "HEAD" and "PUBLISH_REQUESTED" tags do not change. This RPC throws an exception if the version being snapshot is not ACTIVE. Audit fields added include action, action_by, action_timestamp.
⊞ Locations ProjectsUploads an integration. The content can be a previously downloaded integration. Performs the same function as CreateDraftIntegrationVersion, but accepts input in a string format, which holds the complete representation of the IntegrationVersion content.
⊞ Locations ProjectsCreates an auth config record. Fetch corresponding credentials for specific auth types, e.g. access token for OAuth 2.0, JWT token for JWT. Encrypt the auth config with Cloud KMS and store the encrypted credentials in Spanner. Returns the encrypted auth config.
⊞ Locations ProjectsDeletes an auth config.
⊞ Locations ProjectsGets a complete auth config. If the auth config doesn't exist, Code.NOT_FOUND exception will be thrown. Returns the decrypted auth config.
⊞ Locations ProjectsLists all auth configs that match the filter. Restrict to auth configs belong to the current client only.
⊞ Locations ProjectsUpdates an auth config. If credential is updated, fetch the encrypted auth config from Spanner, decrypt with Cloud KMS key, update the credential fields, re-encrypt with Cloud KMS key and update the Spanner record. For other fields, directly update the Spanner record. Returns the encrypted auth config.
⊞ Locations ProjectsCreates a new certificate. The certificate will be registered to the trawler service and will be encrypted using cloud KMS and stored in Spanner Returns the certificate.
⊞ Locations ProjectsDelete a certificate
⊞ Locations ProjectsGet a certificates in the specified project.
⊞ Locations ProjectsList all the certificates that match the filter. Restrict to certificate of current client only.
⊞ Locations ProjectsUpdates the certificate by id. If new certificate file is updated, it will register with the trawler service, re-encrypt with cloud KMS and update the Spanner record. Other fields will directly update the Spanner record. Returns the Certificate.
⊞ Locations ProjectsDelete the selected integration and all versions inside
⊞ Locations ProjectsExecutes integrations synchronously by passing the trigger id in the request body. The request is not returned until the requested executions are either fulfilled or experienced an error. If the integration name is not specified (passing `-`), all of the associated integration under the given trigger_id will be executed. Otherwise only the specified integration for the given `trigger_id` is executed. This is helpful for execution the integration from UI.
⊞ Locations ProjectsCancellation of an execution
⊞ Locations ProjectsGet an execution in the specified project.
⊞ Locations ProjectsLists the results of all the integration executions. The response includes the same information as the [execution log](https://cloud.google.com/application-integration/docs/viewing-logs) in the Integration UI.
⊞ Locations Projects* Lifts suspension for the Suspension task. Fetch corresponding suspension with provided suspension Id, resolve suspension, and set up suspension result for the Suspension Task.
⊞ Locations Projects* Lists suspensions associated with a specific execution. Only those with permissions to resolve the relevant suspensions will be able to view them.
⊞ Locations Projects* Resolves (lifts/rejects) any number of suspensions. If the integration is already running, only the status of the suspension is updated. Otherwise, the suspended integration will begin execution again.
⊞ Locations ProjectsReturns the list of all integrations in the specified project.
⊞ Locations ProjectsSchedules an integration for execution by passing the trigger id and the scheduled time in the request body.
⊞ Locations ProjectsCreate a integration with a draft version in the specified project.
⊞ Locations ProjectsSoft-deletes the integration. Changes the status of the integration to ARCHIVED. If the integration being ARCHIVED is tagged as "HEAD", the tag is removed from this snapshot and set to the previous non-ARCHIVED snapshot. The PUBLISH_REQUESTED, DUE_FOR_DELETION tags are removed too. This RPC throws an exception if the version being deleted is DRAFT, and if the `locked_by` user is not the same as the user performing the Delete. Audit fields updated include last_modified_timestamp, last_modified_by. Any existing lock is released when Deleting a integration. Currently, there is no undelete mechanism.
⊞ Locations ProjectsDownloads an integration. Retrieves the `IntegrationVersion` for a given `integration_id` and returns the response as a string.
⊞ Locations ProjectsGet a integration in the specified project.
⊞ Locations ProjectsReturns the list of all integration versions in the specified project.
⊞ Locations ProjectsUpdate a integration with a draft version in the specified project.
⊞ Locations ProjectsThis RPC throws an exception if the integration is in ARCHIVED or ACTIVE state. This RPC throws an exception if the version being published is DRAFT, and if the `locked_by` user is not the same as the user performing the Publish. Audit fields updated include last_published_timestamp, last_published_by, last_modified_timestamp, last_modified_by. Any existing lock is on this integration is released.
⊞ Locations ProjectsClears the `locked_by` and `locked_at_timestamp`in the DRAFT version of this integration. It then performs the same action as the CreateDraftIntegrationVersion (i.e., copies the DRAFT version of the integration as a SNAPSHOT and then creates a new DRAFT version with the `locked_by` set to the `user_taking_over` and the `locked_at_timestamp` set to the current timestamp). Both the `locked_by` and `user_taking_over` are notified via email about the takeover. This RPC throws an exception if the integration is not in DRAFT status or if the `locked_by` and `locked_at_timestamp` fields are not set.The TakeoverEdit lock is treated the same as an edit of the integration, and hence shares ACLs with edit. Audit fields updated include last_modified_timestamp, last_modified_by.
⊞ Locations ProjectsLists all the test cases that satisfy the filters.
⊞ Locations ProjectsSets the status of the ACTIVE integration to SNAPSHOT with a new tag "PREVIOUSLY_PUBLISHED" after validating it. The "HEAD" and "PUBLISH_REQUESTED" tags do not change. This RPC throws an exception if the version being snapshot is not ACTIVE. Audit fields added include action, action_by, action_timestamp.
⊞ Locations ProjectsUploads an integration. The content can be a previously downloaded integration. Performs the same function as CreateDraftIntegrationVersion, but accepts input in a string format, which holds the complete representation of the IntegrationVersion content.
⊞ Locations ProjectsCreates an IntegrationTemplateVersion.
⊞ Locations ProjectsReturns an IntegrationTemplateVersion in the specified project.
⊞ Locations ProjectsReturns the list of all IntegrationTemplateVersions in the specified project.
⊞ Locations ProjectsCreates an sfdc instance record. Store the sfdc instance in Spanner. Returns the sfdc instance.
⊞ Locations ProjectsDeletes an sfdc instance.
⊞ Locations ProjectsGets an sfdc instance. If the instance doesn't exist, Code.NOT_FOUND exception will be thrown.
⊞ Locations ProjectsLists all sfdc instances that match the filter. Restrict to sfdc instances belonging to the current client only.
⊞ Locations ProjectsUpdates an sfdc instance. Updates the sfdc instance in spanner. Returns the sfdc instance.
⊞ Locations ProjectsCreates an sfdc channel record. Store the sfdc channel in Spanner. Returns the sfdc channel.
⊞ Locations ProjectsDeletes an sfdc channel.
⊞ Locations ProjectsGets an sfdc channel. If the channel doesn't exist, Code.NOT_FOUND exception will be thrown.
⊞ Locations ProjectsLists all sfdc channels that match the filter. Restrict to sfdc channels belonging to the current client only.
⊞ Locations ProjectsUpdates an sfdc channel. Updates the sfdc channel in spanner. Returns the sfdc channel.
⊞ Locations ProjectsCreates an sfdc instance record. Store the sfdc instance in Spanner. Returns the sfdc instance.
⊞ Locations ProjectsDeletes an sfdc instance.
⊞ Locations ProjectsGets an sfdc instance. If the instance doesn't exist, Code.NOT_FOUND exception will be thrown.
⊞ Locations ProjectsLists all sfdc instances that match the filter. Restrict to sfdc instances belonging to the current client only.
⊞ Locations ProjectsUpdates an sfdc instance. Updates the sfdc instance in spanner. Returns the sfdc instance.
⊞ Locations ProjectsCreates an sfdc channel record. Store the sfdc channel in Spanner. Returns the sfdc channel.
⊞ Locations ProjectsDeletes an sfdc channel.
⊞ Locations ProjectsGets an sfdc channel. If the channel doesn't exist, Code.NOT_FOUND exception will be thrown.
⊞ Locations ProjectsLists all sfdc channels that match the filter. Restrict to sfdc channels belonging to the current client only.
⊞ Locations ProjectsUpdates an sfdc channel. Updates the sfdc channel in spanner. Returns the sfdc channel.
Traffic Director API v3
⊞ Client Status Discovery
Cloud Data Fusion API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsCreates a new Data Fusion instance in the specified project and location.
⊞ Locations ProjectsDeletes a single Date Fusion instance.
⊞ Locations ProjectsCreates DNS peering on the given resource.
⊞ Locations ProjectsDeletes DNS peering on the given resource.
⊞ Locations ProjectsLists DNS peerings for a given resource.
⊞ Locations ProjectsGets details of a single Data Fusion instance.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists Data Fusion instances in the specified project and location.
⊞ Locations ProjectsUpdates a single Data Fusion instance.
⊞ Locations ProjectsRestart a single Data Fusion instance. At the end of an operation instance is fully restarted.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsLists information about the supported locations for this service.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsLists possible versions for Data Fusion instances in the specified project and location.
Network Management API v1
⊞ Locations ProjectsGets information about a location.
⊞ Locations ProjectsCreates a new Connectivity Test. After you create a test, the reachability analysis is performed as part of the long running operation, which completes when the analysis completes. If the endpoint specifications in `ConnectivityTest` are invalid (for example, containing non-existent resources in the network, or you don't have read permissions to the network configurations of listed projects), then the reachability result returns a value of `UNKNOWN`. If the endpoint specifications in `ConnectivityTest` are incomplete, the reachability result returns a value of AMBIGUOUS. For more information, see the Connectivity Test documentation.
⊞ Locations ProjectsDeletes a specific `ConnectivityTest`.
⊞ Locations ProjectsGets the details of a specific Connectivity Test.
⊞ Locations ProjectsGets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
⊞ Locations ProjectsLists all Connectivity Tests owned by a project.
⊞ Locations ProjectsUpdates the configuration of an existing `ConnectivityTest`. After you update a test, the reachability analysis is performed as part of the long running operation, which completes when the analysis completes. The Reachability state in the test resource is updated with the new result. If the endpoint specifications in `ConnectivityTest` are invalid (for example, they contain non-existent resources in the network, or the user does not have read permissions to the network configurations of listed projects), then the reachability result returns a value of UNKNOWN. If the endpoint specifications in `ConnectivityTest` are incomplete, the reachability result returns a value of `AMBIGUOUS`. See the documentation in `ConnectivityTest` for for more details.
⊞ Locations ProjectsRerun an existing `ConnectivityTest`. After the user triggers the rerun, the reachability analysis is performed as part of the long running operation, which completes when the analysis completes. Even though the test configuration remains the same, the reachability result may change due to underlying network configuration changes. If the endpoint specifications in `ConnectivityTest` become invalid (for example, specified resources are deleted in the network, or you lost read permissions to the network configurations of listed projects), then the reachability result returns a value of `UNKNOWN`.
⊞ Locations ProjectsSets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
⊞ Locations ProjectsReturns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
⊞ Locations ProjectsStarts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
⊞ Locations ProjectsDeletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
⊞ Locations ProjectsGets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
⊞ Locations ProjectsLists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
⊞ Locations ProjectsLists information about the supported locations for this service.
